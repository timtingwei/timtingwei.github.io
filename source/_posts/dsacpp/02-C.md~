---
title: 邓俊辉<<数据结构>>-公开课-02-C
date: 2018-01-10 00:09:15
tags: [数据结构, 向量]
---

# 无序向量
```cpp
template <typename T> class Vector {};    // template定义方式
```

模板和模板, 模板和类之间可以互相组合。意味着数据结构之间也可以互相组合

```cpp
template <typename T> class Vector {
};
class BinTree {
};
template <typename T> class Tree {
};

int main() {
  // ..
  Vector<int> myVector;    // Right

  Vector<float> myfVector;

  Vector<BinTree> binForest;       // Combine with other class;
  Vector<Tree<int>> binForest;     // Combine with template;
  return 0;
}
```

无序向量: 没有顺序, 甚至不可能排成顺序。

## 元素访问(寻秩访问)

v.get(r), v.put(e)

A[r]

重载下标运算符"[]"
```cpp
// 寻秩访问
/* // my test
template <typename T>
T& Vector<T>::operator[](std::size_t n) {    // 这个类 Vector<T>
  assert(n < _size);
  return _elem[n];
}
*/

template <typename T>
T& Vector<T>::operator[](Rank r) const {   // 不改变数据成员, 定义成常量成员函数
  // 在vector内部, 定义了秩的类型, 统一用Rank
  assert(r < _size);   // 对下标秩进行溢出检测
  return _elem[r];
}
```

左值, 右值, `引用??`
引用类型可作为左值。

寻秩访问

代码健壮性简化
 - assert 断言, 
```cpp
#include <cassert>
assert(r < _size);
```

## 插入

```cpp
// 插入
/* my test
template <typename T>
void Vector<T>::insert(const Rank r, const int value) {
  // 检查移动后是否需要扩容
  if (++_size > _capacity) expand();
  // 将秩为r后的所有元素后移一位
  for (Rank i = _size-2; i >= r; i--) {     // 为了不覆盖数据, 从尾部开始移动
    _elem[i+1] = _elem[i];     // 向后移动一位
  }
  // 在r秩位置上填入要插入的值
  _elem[r] = value;
}
*/
template <typename T>
void Vector<T>::insert(const Rank r, T const &e) {
  // value不应该是某一中特点的类型, 而应该利用template的特性
  assert(0<= r && r < _size);
  expand();  // 若有必要扩容  结合expand()中, _size < _capacity的定义
  for (int i = _size; i > r; i--)  // 习惯把改变后的值的索引设置成i
    _elem[i] = _elem[i-1];     // 后继元素顺次后移一个单元
  _elem[r] = e; _size++;
}
```

Template中泛型T的作用, 
模板类中函数的互相搭配,
插入元素对vector操作的顺序 
对\_capacity和_size的影响。
## 删除算法

自前向后的迁移操作
缩容

```cpp
// 删除操作
/* my test code
template <typename T>
void Vector<T>::del(const Rank lo, const Rank hi) {
  for (Rank i = lo; i < _size; i++) {
    // 清空区间元素
    if (i < hi) { _elem[i] = 0;
    } else {
      // 将元素整体前移
      _elem[i - (hi-lo)] = _elem[i];
      // 前移后元素清空
       _elem[i] = 0;
    }
  }
  // 缩短规模和空间容量
  _size -= hi-lo; _capacity -= hi-lo;
}
*/


template <typename T>
int Vector<T>::del(Rank lo, Rank hi) {
  // 处理退化情况
  if (lo == hi) return 0;
  const int length = hi - lo;
  // 自前向后的迁移操作
  while (lo < _size) {
    if (hi < _capacity) {_elem[lo++] = _elem[hi++];
    } else {_elem[lo++] = 0;}   // 处理hi++超出_capacityg容量的情况
  }
  // 更新规模或者缩容
  _size -= length;
  shrunk();
  // 返回被删除元素的数目
  return hi-lo;
}
```


`1, 规模仍旧不变? 删除一段区间, 这里可以不改变规模, 相当于后面留空?` 改进成改变size的版本用于shrunk
`2 , _elem[hi++]能够被一直索引到?` 超过_capacity时, 返回未定义的值
`3, _elem[hi++]为什么不清空? `把_capacity的剩余空间对应元素赋值给它的方法清空
`4, 看出移动操作过程中, 变量的同步性`
`5, 缩容不光光是改变_capacity的值, 仍旧要释放空间`
	
## 查找

无序向量： T为可判等, 重载 "=="或者"!="
有序向量： T为可比较，重载 "<" 或  ">"

```cpp
// 查找
/* my test code
template <typename T>
int Vector<T>::find(Rank lo, Rank hi, T const &e) const {
  // 查找e在区间[lo,hi)内
  // 从右往左查找
  while (hi >= lo) {
    if (_elem[hi] == e) {return hi;
    }
    hi--;
  }
  // 没有在while循环中返回, 不存在匹配元素
  return -1;
}
*/

template <typename T>
Rank Vector<T>::find(Rank lo, Rank hi, T const &e) const {
  // O(hi - lo) = O(n), 在命中多个元素时可返回秩最大者
  while (lo < hi-- && e != _elem[hi]) {}   // 逆向查找
  return hi;   // hi < lo失败; 否则hi即命中元素的秩
}
```

`利用while本身的条件语句；后置递增的特性`
`返回hi?` 将判断是否成功, 交给`上层的调用者`;以及成功后被`上层算法`进一步利用

最好情况 O(1), 最坏情况O(n)
输入敏感(input-sensitive): 最好情况和最坏情况相差悬殊的算法。
## 删除单元素

`视为区间操作的特例`
```cpp
// 删除单个元素
/* my test code
template <typename T>
void Vector<T>::remove(Rank r) {
  // 单元素的删除操作, 视为区间操作的特例 [r, r+1)
  remove(r, r+1);
}
*/
template <typename T>     // 删除向量中秩为r的元素, 0 <= r < size
T& Vector<T>::remove(Rank r) {  // O(n-r)
  T& old_t = _elem[r];    // 备份被删除的元素
  remove(r, r+1);         // 调用区间删除算法
  return old_t;           // 返回被删除元素
}
```


`颠倒考虑`

复杂度分析:
每次循环的耗时正比于删除区间的后缀长度 O(n-hi)
循环的次数等于区间宽度 O(hi-lo)
总体 O(n^2) 复杂度

right, but not fast!!


## 唯一化


`实现`

```cpp
// 唯一化
/*
template <typename T>
void Vector<T>::deduplicate(Rank lo, Rank hi) {
  // 对向量中的元素遍历,
  for (Rank i = lo; i < hi; i++) {
    // find右往左查, 返回lo-1代表失败
    // 删除当前元素, 不再对后续元素查找
    if (find(lo, i, _elem[i]) != lo-1) {remove(i); break;}
    if (find(i+1, hi, _elem[i]) != i) { remove(i);}
  }
}
*/

template <typename T>
int Vector<T>::deduplicate() {
  int old_size = _size;
  Rank i = 1;
  while (i < _size) {
    find(0, i, _elem[i]) < 0 ?
                             i++  // 小于0说明无雷同, 继续查找
                             : remove(i);    // 删除雷同者(至多一个?!)
  }
  return  old_size - _size;      // 返回规模的变化量
}
```

`记录规模?` 考虑返回值怎么设计，这里我估计会在更高级的接口中用到
`从1开始?` 因为要在当前i的前缀中查找
`至多一个?` 删除至多一个, 实际不一定至多一个
`为什么不需要改变_size和_capacity大小?` 说明remove为更底层的操作, 在底层操作中, 定义底层的数据成员的修改, 这样做的话, 在更高级的操作中, 可以不去管这些细节。也是封装调用的好处。

`**正确性证明**`：
**不变性**: 对于当前元素V[i]的前缀V[0, i)中, 各元素彼此互异
初始时, i = 1, 两个元素成立,...

**单调性**:
1)前缀单调非降, 后缀减少, 且前缀迟早增至_size;   // 与1)结合
2)后缀单调下降, _size迟早减至0;     // 2)更容易把握

故算法必然终止, 至多迭代O(n)轮

`复杂度`

主要来自find() 和 remove();
find()从右向左针对前缀, remove()从左向右针对后缀, 因此每次while循环不超过O(n);
while循环会进行n次, 
总体复杂度为 O(n^2)


`练习三种优化方案（未完成）`

1, 仿照uniquify()高效版本的思路.
元素移动的次数可以降至O(n), 但比较次数依然是O(n^2); 而且破坏稳定性
2, 先对需要删除的重复元素标记, 然后统一删除.
稳定性保持, 但因查找长度更长, 从而导致更多的对比操作
3, V.sort().uniquify(): 简明实现最优的O(nlogn)

## 遍历

visit

函数指针机制 ?? 

函数对象机制 ??

两种方法优劣

实例: 将向量中所有的元素统一加一
重载操作符 "++"
重载操作符 "()"

练习更为复杂的遍历

减1

```
// 遍历运用函数对象机制，对各个元素减1
/* my test code
// 单个T类型元素减1的类
template <typename T>
Vector<T>::struct Decrease {
  virtual void operator() {T &e--;}     // 重载()操作, 类对象当作函数来用
};

template <typename T>
void decrease(Vector<T>& V) {
  V.traverse(Decrease<T>());
}
// 泛型模板在调用的时候都要带<type>
*/

template <typename T>
struct Decrease {
  virtual void operator()(T &e) {e--;}
};

/*
// 为什么不是Vector<T>::struct Decrease?
// Decrease对象, 不需要声明在vector类内, 这是借用函数对象作为traverse的参数, traverse声明在类内, 这个参数的类型是VST, 即函数对象。
// 为什么需要virtual
// void operator()(T &e)?
// 第一个括号是代表重载运算符是(), 第二个是该重载函数的参数列表
*/

template <typename T>
void decrease(Vector<T> & V) {
  V.traverse(Decrease<T>());
}

// 在类的外部定义decrease函数, 它具有泛型T, 参数为Vector<T>& 类型
// 函数内部, 实例V调用traverse方法, 通过多次调用这个函数对象去遍历所有元素

// 终极问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?

```

`本质问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?`

加倍 

求和
