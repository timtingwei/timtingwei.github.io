---
title: 邓俊辉<<数据结构>>-公开课-02-D1
date: 2018-01-11 19:22:42
tags: 数据结构
---

```

觉得markdown格式的页面, 排版很不舒服。虽然有标题的概念, 但是标题字体大小不容易分清, 结构不是显而易见。尝试使用不带格式的记笔记，仍然保留markdown语法, 以便复制对比效果。

# 有序向量唯一化
	无序: 比对
	有序: 比较

## 有序性及其甄别

	> * 有序/无序序列中, 任意/总有一对相邻元素顺序/逆序。
	
	> * 相邻逆序对数目, 可以度量逆序程度。
	
		> * 逆序程度实现
		
		===================== source code =========================
		// 逆序程度
		/* my test code 
		template <typename T>
		int Vector<T>::disordered() const {
			int count = 0;
			for (int i = 0; i < _size - 1; i++)
				if (_elem[i] != _elem[i+1]) count++;  // ERROR: 逆序:前个元素大于后一元素
			return count;
		}
		*/

	    template <typename T>
		int Vector<T>::disordered() const {
			int count = 0;   // 计数器
			for (int i = i; i < _size; i++)
				count += (_elem[i-1] > _elem[i]);    // 逆序对则计数+1, bool和int的隐式转换
			return count;  // 向量有序当且仅当n = 0
		} // 若只需要判断是否有序, 首次遇到逆序对之后, 就立即终止
		============================================================
		
	> * 若元素支持大小比较, 可将无序向量转换为有序向量。
	> * 无序向量转换为有序向量后, 算法多可优化。

## 低效算法

我自己的低效deduplicate()版本,
依赖一次性remove函数, 尝试自己实现。








## 标题
   line1
   line2
   line3
## 标题
   *point1: line2
   *poiny2: line3
   
   代码如下:
   template <typename T>
     class MyClass {
   };
   
   int main() {
     // ...
     return 0;
   }
```
