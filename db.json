{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"source/images/vertex_attribute_pointer.png","path":"images/vertex_attribute_pointer.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/._config.yml.un~","hash":"cd65954b92e143b0970c87a0727fae99ec0f377f","modified":1511332445230},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1511324882628},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1511324882629},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1511324882629},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1511324882633},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1511324882634},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1511324882634},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1511324882635},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1511324882636},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1511324882636},{"_id":"themes/next/README.cn.md","hash":"419b60d064a4ac66565ddeec1be55802acf68c8b","modified":1511324882638},{"_id":"themes/next/README.md","hash":"631d68e9cbced2f11cd976bf883b7d8b08b9b365","modified":1511324882639},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1511324882635},{"_id":"themes/next/_config.yml","hash":"c76ad93f14e57c2520c603ddc0cbd61064a9abd9","modified":1511332445225},{"_id":"themes/next/_config.yml~","hash":"c76ad93f14e57c2520c603ddc0cbd61064a9abd9","modified":1511331969791},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1511324882641},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1511324882641},{"_id":"themes/next/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1511324882694},{"_id":"source/_posts/#install-openGL-in-ubuntu14-04.md#","hash":"34865f6e7d423448f7ce96c82f18d9fb071b227a","modified":1514098609749},{"_id":"source/_posts/.add-git-bash-to-right-click-menu.md.un~","hash":"5ebfdeaf6fd4098f711eca50fc5e1cd329838a8e","modified":1513738150258},{"_id":"source/_posts/.hexo-random-symbol.md.un~","hash":"81b24335d2ed7b9de18b5e0e9a45f7ad457b0df2","modified":1513738150258},{"_id":"source/_posts/.srr.txt.swp","hash":"e946eedba20eb89ecfce9b6e5ba3bfd54c3741d3","modified":1513738150258},{"_id":"source/_posts/My-First-Post.md","hash":"42f9d5c0ca52f3039af5c57c8f0e69594de9887d","modified":1514347156817},{"_id":"source/_posts/a-little-light.md","hash":"dddb6d1d14459d6794aa560860b97a4037a29b14","modified":1514041237951},{"_id":"source/_posts/add-git-bash-to-right-click-menu.md","hash":"e4a2dcea2ce7d3c8f109641f58fa7576684a0503","modified":1513738150258},{"_id":"source/_posts/d3d-preparation.md","hash":"1870cf7a72b1d802f218e21988e92c76f4e14d3f","modified":1513738150258},{"_id":"source/_posts/doc-computer-graphic-learn.md","hash":"3816a23aa56661590e9afe082585d03c5a53af79","modified":1514466339952},{"_id":"source/_posts/git-push-credential.md","hash":"02a52cbc4cf75ff95f5eb39256fb6e2fd87dcd1a","modified":1513928459407},{"_id":"source/_posts/gitignore-invalid.md","hash":"3162f15d45561317c03330a0bb850dee8558bde3","modified":1514336127905},{"_id":"source/_posts/hello-triangle-three-execises.md","hash":"7aab6c04fd51a38c855a555699b6cd9f98621599","modified":1514466246448},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1513738150258},{"_id":"source/_posts/hexo-in-different-computers.md","hash":"7c9970e54b0eb1d6f82e64642c9869f102be00b8","modified":1513742650442},{"_id":"source/_posts/hexo-random-symbol.md","hash":"544ec0c207f445626e0438dc701ee27e7d9a5f01","modified":1513738150258},{"_id":"source/_posts/how-to-learn-program.md","hash":"92508e250408f968223ae96d22538cbce9131932","modified":1514098978557},{"_id":"source/_posts/install-openGL-in-ubuntu14-04.md","hash":"34865f6e7d423448f7ce96c82f18d9fb071b227a","modified":1513899997645},{"_id":"source/_posts/markdown-delete-line.md","hash":"dd3fed7034a55981f65a9a31ce317c484578e7a2","modified":1513899357117},{"_id":"source/_posts/trip-of-game-notes.md","hash":"9e8695c18a5c620862c0ba4660ba54a5b705ad7c","modified":1515055658127},{"_id":"source/categories/.index.md.un~","hash":"c9a1aa5741e503495f3a950318a3adf97f698937","modified":1513738150258},{"_id":"source/categories/index.md","hash":"d6e30bf321c09a9496629a1bbad873ba730d5ed3","modified":1513738150258},{"_id":"source/categories/index.md~","hash":"6c36b8e983b96a6764ac1763bde2c028da49d456","modified":1513738150258},{"_id":"source/images/logo.png","hash":"cca97ec099f730e6478d101e3e9bf16b2583a336","modified":1514345883529},{"_id":"source/images/vertex_attribute_pointer.png","hash":"705abe74942775d1dc09092863f6121070ce2861","modified":1514344862321},{"_id":"source/tags/.index.md.un~","hash":"99c6043f396d0057c5f4be8b980db9d5958c29b3","modified":1513738150258},{"_id":"source/tags/index.md","hash":"5012cf70d44daae07a721e2fa4a5890294f68bcf","modified":1513738150258},{"_id":"source/tags/index.md~","hash":"c4378fd4354b18e8b3fb7899f3061d7ab36c9bd5","modified":1513738150258},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1511324882588},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1511324882594},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1511324866667},{"_id":"themes/next/.git/index","hash":"afe85437e371182bad90b2defc621afebaf30306","modified":1513735846043},{"_id":"themes/next/.git/packed-refs","hash":"f1fe33b8cdc221749eb26034a82b483cd86ef1b6","modified":1511324882582},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1511324882630},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1511324882631},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1511324882632},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1511324882633},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1511324882642},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1511324882643},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1511324882643},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1511324882644},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1511324882644},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1511324882645},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1511324882646},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1511324882646},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1511324882647},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1511324882647},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1511324882648},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1511324882648},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1511324882649},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1511324882650},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1511324882650},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1511324882652},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1511324882691},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1511324882692},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1511324882692},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1511324882693},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1511324882693},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1511324882694},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1511324882694},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1511324882695},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1511324882697},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1511324882933},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1511324882933},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1511324882934},{"_id":"source/_posts/.My-First-Post.md.un~","hash":"4ceee140a750b2d03ee74f0f24619933e67506b9","modified":1513738150258},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882768},{"_id":"source/_posts/dsacpp/01-B.md","hash":"b37e88c1688b954b2dcbca450a5d308e47f7fdd3","modified":1515514496069},{"_id":"source/_posts/dsacpp/01-B.md~","hash":"0af570e192d034aa0bc3adba1fc097e88bef0731","modified":1515514074261},{"_id":"source/_posts/dsacpp/01-C.md","hash":"35d1d9b3c634bbca8a00be59fbebef99d0ce60d3","modified":1515514583957},{"_id":"source/_posts/dsacpp/01-C.md~","hash":"050f55e489e922572b7e130e703021ea60911c90","modified":1515514102361},{"_id":"source/_posts/dsacpp/01-D.md","hash":"cfde19fa09e411b462589439431da33e6d094210","modified":1515514624045},{"_id":"source/_posts/dsacpp/01-D.md~","hash":"c27b46617b69285ad3acf7d9a3f01d8a35d944b7","modified":1514431911762},{"_id":"source/_posts/dsacpp/01-E.md","hash":"fcb803fe9a825aeb4438850d0bed94c72bb5bc41","modified":1515514994945},{"_id":"source/_posts/dsacpp/01-E.md~","hash":"b5e3d65f690f4008f10236c08a167d7e2c8fe142","modified":1515514121681},{"_id":"source/_posts/dsacpp/01-F.md","hash":"92fff5e7e05f55b48d8a79a290b6f6de58f0896f","modified":1515515020345},{"_id":"source/_posts/dsacpp/01-F.md~","hash":"24949d9f21c0ce1b3e4a3c9a787afcfd793ba258","modified":1515514132757},{"_id":"source/_posts/dsacpp/02-A.md","hash":"5bd1378b098a4b173edf4488a16bcc9e18d0183b","modified":1515515045397},{"_id":"source/_posts/dsacpp/02-A.md~","hash":"76cef67c4b948ee670f1041d818a18389f02ea53","modified":1515514138837},{"_id":"source/_posts/dsacpp/02-B.md~","hash":"76b00475cf5d693701a9d271ab7e32d5479a519f","modified":1515514147849},{"_id":"source/_posts/dsacpp/02-B.md","hash":"de0784e8660d7d81ad7d4455503b452cf89d98e8","modified":1515515069853},{"_id":"source/_posts/dsacpp/02-C.md","hash":"ecef4ccac35bfe29473a706c412ec6f63ba8c019","modified":1515515219165},{"_id":"source/_posts/dsacpp/02-C.md~","hash":"50960642c75db159b8d4536f1d31ff1e5b8e5831","modified":1515515094145},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1511324866668},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1511324866668},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1511324866669},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1511324866669},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1511324866670},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1511324866671},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1511324866671},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1511324866671},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1511324866672},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1511324866672},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1511324866673},{"_id":"themes/next/.git/logs/HEAD","hash":"a2ad9e876538442423634576d508310f0c4dde3f","modified":1511324882591},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1511324882651},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1511324882651},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1511324882653},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1511324882653},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1511324882654},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1511324882655},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1511324882656},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1511324882656},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1511324882657},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1511324882658},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1511324882659},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1511324882661},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1511324882661},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1511324882661},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1511324882662},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1511324882667},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1511324882667},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1511324882671},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1511324882684},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1511324882684},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1511324882685},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1511324882685},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1511324882686},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1511324882686},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1511324882687},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1511324882698},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1511324882698},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1511324882699},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1511324882699},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1511324882701},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1511324882701},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1511324882702},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1511324882702},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1511324882703},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1511324882767},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1511324882769},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1511324882769},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1511324882770},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1511324882771},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1511324882772},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1511324882773},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1511324882773},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1511324882774},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1511324882775},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1511324882776},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1511324882776},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1511324882776},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511324882777},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1511324882777},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511324882778},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1511324882778},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1511324882779},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1511324882779},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882669},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882669},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882746},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882746},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882749},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882762},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511324882766},{"_id":"themes/next/.git/refs/heads/master","hash":"53814d46a4f19b2e026339024c8c1e2f179bdb6c","modified":1511324882590},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1511324882659},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1511324882660},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1511324882662},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1511324882663},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1511324882663},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1511324882664},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1511324882664},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1511324882665},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1511324882666},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1511324882668},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1511324882669},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1511324882670},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1511324882672},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1511324882672},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1511324882673},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1511324882673},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1511324882674},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1511324882674},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1511324882675},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1511324882675},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1511324882675},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1511324882676},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1511324882676},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1511324882677},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1511324882677},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1511324882678},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1511324882679},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1511324882679},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1511324882681},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1511324882681},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1511324882682},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1511324882682},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1511324882683},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1511324882683},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1511324882689},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1511324882689},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1511324882690},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1511324882691},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1511324882745},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1511324882746},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1511324882747},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1511324882749},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1511324882762},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1511324882762},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1511324882765},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1511324882766},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1511324882781},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1511324882781},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1511324882782},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1511324882782},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1511324882783},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1511324882784},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1511324882785},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1511324882785},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1511324882787},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1511324882787},{"_id":"themes/next/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1511324882788},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1511324882803},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1511324882814},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1511324882815},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1511324882816},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1511324882817},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1511324882830},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1511324882830},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1511324882831},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1511324882832},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1511324882834},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1511324882835},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1511324882836},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1511324882837},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1511324882837},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1511324882880},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1511324882884},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1511324882884},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1511324882885},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1511324882886},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1511324882886},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1511324882887},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1511324882889},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1511324882889},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1511324882891},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1511324882891},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1511324882892},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1511324882893},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1511324882894},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1511324882894},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1511324882895},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1511324882895},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1511324882896},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1511324882896},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1511324882897},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1511324882897},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1511324882898},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1511324882899},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1511324882899},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1511324882901},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1511324882902},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1511324882904},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1511324882921},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1511324882921},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1511324882929},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1511324882931},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1511324882931},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1511324882883},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"a2ad9e876538442423634576d508310f0c4dde3f","modified":1511324882592},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1511324882586},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1511324882688},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1511324882688},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1511324882740},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1511324882704},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1511324882704},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1511324882705},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1511324882705},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1511324882706},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1511324882714},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1511324882728},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1511324882741},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1511324882742},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1511324882743},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1511324882744},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1511324882744},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1511324882744},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1511324882750},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1511324882751},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1511324882751},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1511324882752},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1511324882752},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1511324882753},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1511324882753},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1511324882754},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1511324882755},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1511324882756},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1511324882757},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1511324882757},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1511324882758},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1511324882759},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1511324882759},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1511324882760},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1511324882760},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1511324882761},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1511324882761},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1511324882786},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1511324882795},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1511324882800},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1511324882801},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1511324882817},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1511324882818},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1511324882819},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1511324882819},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1511324882820},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1511324882821},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1511324882826},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1511324882828},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1511324882829},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1511324882833},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1511324882834},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1511324882839},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1511324882840},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1511324882841},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1511324882920},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1511324882920},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1511324882799},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511324882878},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511324882880},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1511324882927},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"a2ad9e876538442423634576d508310f0c4dde3f","modified":1511324882586},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1511324882707},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1511324882707},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1511324882707},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1511324882708},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1511324882709},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1511324882709},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1511324882710},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1511324882710},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1511324882711},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1511324882712},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1511324882712},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1511324882713},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1511324882713},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1511324882714},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1511324882715},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1511324882716},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1511324882716},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1511324882717},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1511324882717},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1511324882718},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1511324882718},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1511324882719},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1511324882719},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1511324882720},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1511324882720},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1511324882720},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1511324882721},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1511324882721},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1511324882722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1511324882722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1511324882723},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1511324882723},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1511324882725},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1511324882725},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1511324882726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1511324882726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1511324882726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1511324882727},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1511324882727},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1511324882728},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1511324882729},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1511324882729},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1511324882730},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1511324882731},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1511324882731},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1511324882732},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1511324882734},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1511324882734},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1511324882735},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1511324882735},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1511324882736},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1511324882737},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1511324882737},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1511324882737},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1511324882738},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1511324882738},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1511324882739},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1511324882739},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1511324882754},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1511324882755},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1511324882758},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1511324882791},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1511324882791},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1511324882792},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1511324882793},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1511324882794},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1511324882822},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1511324882822},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1511324882823},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1511324882824},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1511324882825},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1511324882825},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511324882847},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511324882854},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511324882876},{"_id":"themes/next/.git/objects/pack/pack-28d87b026b5370a385755d143050e3ce0ce161e2.idx","hash":"db365f2626516321010a95981bdf898fb0c79a82","modified":1511324881939},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1511324882813},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1511324882918},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1511324882868},{"_id":"themes/next/.git/objects/pack/pack-28d87b026b5370a385755d143050e3ce0ce161e2.pack","hash":"bb95fb2e0a3eaefe07c90c71ef4e9be7ca80c5eb","modified":1511324882174},{"_id":"public/search.xml","hash":"eb10751e7bbbbf9ec22df501a0597238714c1f0e","modified":1515515237929},{"_id":"public/categories/index.html","hash":"58286592361ba2cd07c1e4b9d8028b0350433e58","modified":1515515135119},{"_id":"public/tags/index.html","hash":"555a57a1d654547c09de6b6a0c61c7e9919ae80e","modified":1515515135124},{"_id":"public/2018/01/04/trip-of-game-notes/index.html","hash":"68a2f527d48c80d8fadeb8cd4f0ed668e780cbdb","modified":1515515135124},{"_id":"public/2017/12/28/doc-computer-graphic-learn/index.html","hash":"0ca0d99901c2f99e18974249c7d080a614413064","modified":1515515135124},{"_id":"public/2017/12/27/gitignore-invalid/index.html","hash":"d3dfb77c6880996e1c6484e60a38acc6a18b2f55","modified":1515515135124},{"_id":"public/2017/12/25/hello-triangle-three-execises/index.html","hash":"d0d910f0cd40e89c58a8cb3518844d23bdb8928d","modified":1515515135124},{"_id":"public/2017/12/24/how-to-learn-program/index.html","hash":"0787b9b7ce41da160dcd0f776f1183fa3f6866d6","modified":1515515135124},{"_id":"public/2017/12/22/a-little-light/index.html","hash":"1bac1d27c6946bb10e6395e7a87b074acc1720c4","modified":1515515135124},{"_id":"public/2017/12/22/git-push-credential/index.html","hash":"f1970a86b7c156e2943818c09b5262095e091b7c","modified":1515515135124},{"_id":"public/2017/12/22/markdown-delete-line/index.html","hash":"00f802fb9e566454998de1cf2013efdd5c9c0dc6","modified":1515515135124},{"_id":"public/2017/12/20/install-openGL-in-ubuntu14-04/index.html","hash":"f1f1cb6d0f50e24facf439da654c8d9c8760de2c","modified":1515515135124},{"_id":"public/2017/12/20/hexo-in-different-computers/index.html","hash":"b79310224799bc4d14df897fe19be84890aff173","modified":1515515135124},{"_id":"public/2017/12/20/hello-world/index.html","hash":"19979369e025975dd9cb662de742685ec4df8101","modified":1515515135125},{"_id":"public/2017/11/23/add-git-bash-to-right-click-menu/index.html","hash":"033b5faa6177023934f5aa6846a6c7d08cd1de54","modified":1515515135125},{"_id":"public/2017/11/23/hexo-random-symbol/index.html","hash":"960f0a12625b04ea421fb1d788c5b72c3c3a9ec3","modified":1515515135125},{"_id":"public/2017/11/22/d3d-preparation/index.html","hash":"445c03c63ba576569d15fe43414919ac109cf775","modified":1515515135125},{"_id":"public/2017/11/21/My-First-Post/index.html","hash":"c41c5dffc747d5aab2a460d1f4dcfb6a20095e46","modified":1515515135125},{"_id":"public/archives/index.html","hash":"9777ce8cf34d4840655e73cbde3cb4f513ef49c2","modified":1515515135125},{"_id":"public/archives/page/2/index.html","hash":"88188ae8aa3c524181603b85a226d7786ebc5976","modified":1515515135125},{"_id":"public/archives/2017/index.html","hash":"c1bd61b8f2be630eb65566e77a03b0826c8d9c53","modified":1515515135125},{"_id":"public/archives/2017/page/2/index.html","hash":"59adca790864319f16944da2121248dfe52128e2","modified":1515515135125},{"_id":"public/archives/2017/11/index.html","hash":"b095488dc19018741e67bc66358fdd64ce0c4c47","modified":1515515135125},{"_id":"public/archives/2017/12/index.html","hash":"37888a43b5b42b81ea9b55a4cb49f17369b501c9","modified":1515515135125},{"_id":"public/archives/2017/12/page/2/index.html","hash":"88aedf69f1cb3fad82b4d011061fb9bed0ad6e90","modified":1515515135125},{"_id":"public/archives/2018/index.html","hash":"54b91074db7c725405785386dccee5e99013e823","modified":1515515135125},{"_id":"public/archives/2018/01/index.html","hash":"c8f3535317d162fb92f33c4a1638aab3571b6869","modified":1515515135125},{"_id":"public/index.html","hash":"875e0813f8b8bb50beca2212c518c0717ca39988","modified":1515515237965},{"_id":"public/page/2/index.html","hash":"05c99f39f58bcf032cdd47b858f71cf3061de363","modified":1515515135125},{"_id":"public/tags/markdown/index.html","hash":"88cf2f291a8d390ea330a6e6af91e01e716a9b9b","modified":1515515135125},{"_id":"public/tags/随笔/index.html","hash":"27b8361586e700827176f480ab01d419c9d03dd3","modified":1515515135126},{"_id":"public/tags/git/index.html","hash":"3254f4d73521b07b51f90cc2b4d8d0ae79c50b30","modified":1515515135126},{"_id":"public/tags/DirectX/index.html","hash":"1a66e26f992ed1d6544941a6e6f74934a317f346","modified":1515515135126},{"_id":"public/tags/Games/index.html","hash":"69820beb14992337da9657914fdafbd09dc6a2e0","modified":1515515135126},{"_id":"public/tags/图形学/index.html","hash":"bfad369773b8af828075546dc4883009fb3aaff1","modified":1515515135126},{"_id":"public/tags/OpenGL/index.html","hash":"e038c72f2eb7ddbdda498598cd5616fd859a3aa7","modified":1515515135126},{"_id":"public/tags/读书/index.html","hash":"80c06ad075d2befd4e831923464e6a8cded113ba","modified":1515515135126},{"_id":"public/tags/随想/index.html","hash":"0f7ffe5add7f71846f8c9826c2a1ea5853a4ccca","modified":1515515135126},{"_id":"public/tags/方法论/index.html","hash":"2259b55beb1a69fa6ce706480dcbf13be925a4a8","modified":1515515135126},{"_id":"public/tags/引擎/index.html","hash":"7c2bdcbc4bb97a151a3cac31460bef8af9064b27","modified":1515515135126},{"_id":"public/tags/hexo/index.html","hash":"7bbdfc6dac2cef770bd3f2ec89cedaef0a848d69","modified":1515515135126},{"_id":"public/tags/UTF-8/index.html","hash":"4b41d8c73bf60accf0790ec85a02376f41dbc318","modified":1515515135126},{"_id":"public/tags/program/index.html","hash":"31633947a2993cc0bbca360334f0c1362505f3a3","modified":1515515135126},{"_id":"public/tags/learn/index.html","hash":"9fe47d61d9630a928ec529578e5803b56b84a635","modified":1515515135126},{"_id":"public/tags/游戏/index.html","hash":"9cd975fbc39a64191d3569a957e3244faba10c38","modified":1515515135126},{"_id":"public/tags/C/index.html","hash":"abb30a03a7911baafb274c8f6b221f064b921ba3","modified":1515515135126},{"_id":"public/tags/数据结构/index.html","hash":"e1397e2b13b04d0b9e0faccf0a1278df1e54bd3d","modified":1515515135126},{"_id":"public/2018/01/10/dsacpp/02-C/index.html","hash":"4e98fa333922edaf62ed78c0ad4c709b075215cb","modified":1515515237965},{"_id":"public/2018/01/10/dsacpp/02-B/index.html","hash":"19c53cba24cf590a0db20e6e78cf9a6bd4a26796","modified":1515515135137},{"_id":"public/2018/01/10/dsacpp/02-A/index.html","hash":"b060e17bb36f5cb2718a42328c60d80c27e47c1e","modified":1515515135137},{"_id":"public/2018/01/10/dsacpp/01-F/index.html","hash":"e8e131f095cffc23b3ec649f55ba2175e060af21","modified":1515515135137},{"_id":"public/2018/01/10/dsacpp/01-E/index.html","hash":"708e2a84103c242a8dd2068231eb7c5a3ddbf98d","modified":1515515135137},{"_id":"public/2018/01/10/dsacpp/01-C/index.html","hash":"52174baa1cf49c388225f342d710b678744c2392","modified":1515515135137},{"_id":"public/2018/01/10/dsacpp/01-B/index.html","hash":"b7b8a1d9686d86e932390fb1afcc107c019481c1","modified":1515515135137},{"_id":"public/2017/12/28/dsacpp/01-D/index.html","hash":"aa8d46fbe9b26b850be9273dc4dba589f38746df","modified":1515515135137},{"_id":"public/archives/page/3/index.html","hash":"dd943a77b30c31c08ec767569326d7b7a1365caf","modified":1515515135137},{"_id":"public/page/3/index.html","hash":"1cb7a1413c009ce410a8a2728fb7cd8654a289cc","modified":1515515135137},{"_id":"public/tags/动态规划/index.html","hash":"3530c4c120cad9df9be36df19bcb9487627cc228","modified":1515515135137},{"_id":"public/tags/向量/index.html","hash":"997f540f25711a90bb0af773aea7f665177cd455","modified":1515515135137},{"_id":"public/tags/复杂度/index.html","hash":"394671d3b6b14f609b5f3824683cb60b7825e283","modified":1515515135137},{"_id":"public/images/logo.png","hash":"cca97ec099f730e6478d101e3e9bf16b2583a336","modified":1515515135148},{"_id":"public/images/vertex_attribute_pointer.png","hash":"705abe74942775d1dc09092863f6121070ce2861","modified":1515515135148},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1515515135148},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515515135148},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515515135148},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1515515135148},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1515515135148},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1515515135148},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1515515135148},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1515515135149},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1515515135149},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1515515135149},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515515135149},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515515135149},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515515135149},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1515515135149},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515515135149},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1515515135149},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1515515135149},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515515135149},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1515515135149},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1515515135149},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515515135149},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515515135149},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515515135149},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515515135149},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515515135150},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515515135150},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1515515135150},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515515135150},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515515135150},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515515135150},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515515135150},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1515515135150},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515515135150},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515515135822},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515515135830},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1515515135843},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1515515135843},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1515515135843},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1515515135843},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1515515135843},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1515515135843},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1515515135843},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1515515135843},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1515515135843},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1515515135843},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515515135843},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1515515135843},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515515135843},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1515515135843},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1515515135843},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1515515135843},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1515515135844},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1515515135844},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1515515135844},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1515515135844},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1515515135844},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1515515135844},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515515135844},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515515135845},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1515515135846},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1515515135846},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1515515135846},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1515515135846},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1515515135846},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515515135846},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1515515135846},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1515515135846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515515135846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1515515135847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1515515135847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515515135847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1515515135847},{"_id":"public/css/main.css","hash":"8fbdf8684e77763d525217af8cbe3c1c687bc48f","modified":1515515135847},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1515515135847},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1515515135847},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1515515135847},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1515515135847},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1515515135847},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1515515135847},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1515515135847},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515515135847},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1515515135847},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1515515135847},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1515515135847},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1515515135847},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1515515135848},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1515515135848},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515515135848},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515515135848},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1515515135848},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1515515135848},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1515515135848},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1515515135848},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515515135848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515515135848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515515135848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1515515135862}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-11-22T04:39:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-22 12:39:22\ntype: \"categories\"\n\n---\n","updated":"2017-12-20T02:49:10.258Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjc7ukuqy0001fadrpy2svn6j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-11-22T04:36:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-11-22 12:36:33\ntype: \"tags\"\n\n---\n","updated":"2017-12-20T02:49:10.258Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjc7ukur60003fadrcwjtzz9d","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Markdown语法整理(不定期更新)","date":"2017-11-21T05:31:03.000Z","_content":"\n\nIn this post, I will focus on use of Markdown and hexo push.\n \n> 1. title level\n> 2. insert a link\n> 3. highlight the code\n> 4. three lists of point\n> 5. insert a note\"[^code]\"\n> 6. bold fonts\n> 7. reference\n> 8. edit a formula\n> 9. draw a flow picture\n> * [补充](#补充)\n\nreference website: [Cmd Markdown reader](https://www.zybuluo.com/mdeditor#fn:latex)\n\n\n\n## 1. Title level\n\n### level 3-0\n#### level 4-0\n### level 3-1\n#### level 4-1\n#### level 4-2\n\n## 2. Insert a link.\n\n### [Tim's Blog](https://timtingwei.github.io/)\n### [Tim's Blog][2]\n\n## 3. Highlight the code\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n\n```cpp\n#include <iostream>\n\nclass Foo {\n public:\n  int f();\n};\n\nint main() {\n  // ...\n  return 0;\n}\n```\n\n\n\n## 4. three lists of point\n\n### Bulleted List\n> * first line\n> * second line\n> * third line\n\n### Numbered List\n> 1. first line\n> 2. second line\n> 3. third line\n\n### TODO list\n- [ ] first todo \n- [ ] second todo\n- [x] third todo -> Done\n\n## 5. insert a note[^code]\nLaTex formula support [LaTex][^LaTex]\nhigh light code [code][^code]\ninsert a web note [MathJax][1]\n\n## 6. bold fonts\n\n** bold fonts ** by adding two asteriskes *  as prefix and suffix respectively\n\n\n## 7. Reference \n\n> You can insert a reference by \">\",\nand input enter to create a new line,\nThis is the end line. Until the next symbol occur.\n\n## 8. edit a formula\n$$E=mc^2$$    use $$\n\n## 9.draw a flow picture\n\n```flow\nst=>start: Start\nop=>operation: Your Opreation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[^LaTex]: support **LaTex** edit and display, such as: $\\sum_{i=1}^n a_i=0$, visit [MathJax][1] for more information.\n[^code]: include Java, Python, JavaScript etc.\n[1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n[2]: https://timtingwei.github.io/\n\n------\n\n# 补充\n\n> * [背景色灰](#背景色灰)\n> * [实现页面内跳转](#实现页面内跳转)\n> * [删除线](#删除线)\n> * [插入图片](#插入图片)\n> * [标记文本颜色](#标记文本颜色)\n20171224之后补充但未作整理。本来可以将每个语法分成多个博客离散列出，但后来出于对博客页面和知识索引的考虑，还是放在一个post内，也许将来会又变动，但是先不提前优化。\n\n\n## 背景色灰\n\\`gray background\\`\n\n`gray background`\n\n背景灰可以代替 反斜杠 \\\\,去完成注释。这个很好用。原理估计和代码块差不多吧。\n\n## 实现页面内跳转\n\n`[create an anchor](#anchors-in-markdown)`\n\n[create an anchor](#anchors-in-markdown)\n\n\\===========\nrefwebsite:\n\n[Anchors in Markdown](https://gist.github.com/asabaylus/3071099)\n\n\n### anchors in markdown\n\tskip into this title\n\n\n## 删除线\n\n`~~删除一句~~`\n~~删除一句~~\n\n`~~删除`\n`多行~~`\n~~删除\n多行~~\n\n`~~删除包含语法[mituh’s notes][timtingwei.github.io]~~`\n~~删除包含语法\\[mituh’s notes\\]\\[timtingwei.github.io\\]~~\n\n====\n不知道还有其他方法否？\n\n\\==========\nrefwebsite:\n\nhttps://en.wikipedia.org/wiki/Markdown\n\n\n\n## 插入图片\n\n`![Logo](/images/logo.png)`\n![Logo](/images/logo.png)\n\n\\===========\nrefwebsite:\n\nhexo图片的其他用法：https://hexo.io/zh-cn/docs/asset-folders.html\nhttps://webapps.stackexchange.com/questions/29602/markdown-to-insert-and-display-an-image-on-github-repo\n\n## 标记文本颜色\n\n`<span style=\"color:blue\">*This is Blue italic.*</span>`\n<span style=\"color:blue\">*This is Blue italic.*</span>\n\n`<span style=\"color:red\">**This is Red Bold.**</span>`\n<span style=\"color:red\">**This is Red Bold.**</span>\n\n相比之下,\nitalic 给人轻松的感觉，\nblod有种警告意味。\n\n\\===========\nrefwebsite:\n\nhttps://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown\n\n## next one ?\n\n---------------------------------------------------------------\n以上是我的个人笔记收录，markdown主要用来写笔记和写博客\n其他有什么好玩的用法，欢迎指教。\ntimtingwei#hotmail.com\n","source":"_posts/My-First-Post.md","raw":"---\ntitle: Markdown语法整理(不定期更新)\ndate: 2017-11-21 13:31:03\ntags: \"markdown\"\ncategories: \n\n---\n\n\nIn this post, I will focus on use of Markdown and hexo push.\n \n> 1. title level\n> 2. insert a link\n> 3. highlight the code\n> 4. three lists of point\n> 5. insert a note\"[^code]\"\n> 6. bold fonts\n> 7. reference\n> 8. edit a formula\n> 9. draw a flow picture\n> * [补充](#补充)\n\nreference website: [Cmd Markdown reader](https://www.zybuluo.com/mdeditor#fn:latex)\n\n\n\n## 1. Title level\n\n### level 3-0\n#### level 4-0\n### level 3-1\n#### level 4-1\n#### level 4-2\n\n## 2. Insert a link.\n\n### [Tim's Blog](https://timtingwei.github.io/)\n### [Tim's Blog][2]\n\n## 3. Highlight the code\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n\n```cpp\n#include <iostream>\n\nclass Foo {\n public:\n  int f();\n};\n\nint main() {\n  // ...\n  return 0;\n}\n```\n\n\n\n## 4. three lists of point\n\n### Bulleted List\n> * first line\n> * second line\n> * third line\n\n### Numbered List\n> 1. first line\n> 2. second line\n> 3. third line\n\n### TODO list\n- [ ] first todo \n- [ ] second todo\n- [x] third todo -> Done\n\n## 5. insert a note[^code]\nLaTex formula support [LaTex][^LaTex]\nhigh light code [code][^code]\ninsert a web note [MathJax][1]\n\n## 6. bold fonts\n\n** bold fonts ** by adding two asteriskes *  as prefix and suffix respectively\n\n\n## 7. Reference \n\n> You can insert a reference by \">\",\nand input enter to create a new line,\nThis is the end line. Until the next symbol occur.\n\n## 8. edit a formula\n$$E=mc^2$$    use $$\n\n## 9.draw a flow picture\n\n```flow\nst=>start: Start\nop=>operation: Your Opreation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[^LaTex]: support **LaTex** edit and display, such as: $\\sum_{i=1}^n a_i=0$, visit [MathJax][1] for more information.\n[^code]: include Java, Python, JavaScript etc.\n[1]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n[2]: https://timtingwei.github.io/\n\n------\n\n# 补充\n\n> * [背景色灰](#背景色灰)\n> * [实现页面内跳转](#实现页面内跳转)\n> * [删除线](#删除线)\n> * [插入图片](#插入图片)\n> * [标记文本颜色](#标记文本颜色)\n20171224之后补充但未作整理。本来可以将每个语法分成多个博客离散列出，但后来出于对博客页面和知识索引的考虑，还是放在一个post内，也许将来会又变动，但是先不提前优化。\n\n\n## 背景色灰\n\\`gray background\\`\n\n`gray background`\n\n背景灰可以代替 反斜杠 \\\\,去完成注释。这个很好用。原理估计和代码块差不多吧。\n\n## 实现页面内跳转\n\n`[create an anchor](#anchors-in-markdown)`\n\n[create an anchor](#anchors-in-markdown)\n\n\\===========\nrefwebsite:\n\n[Anchors in Markdown](https://gist.github.com/asabaylus/3071099)\n\n\n### anchors in markdown\n\tskip into this title\n\n\n## 删除线\n\n`~~删除一句~~`\n~~删除一句~~\n\n`~~删除`\n`多行~~`\n~~删除\n多行~~\n\n`~~删除包含语法[mituh’s notes][timtingwei.github.io]~~`\n~~删除包含语法\\[mituh’s notes\\]\\[timtingwei.github.io\\]~~\n\n====\n不知道还有其他方法否？\n\n\\==========\nrefwebsite:\n\nhttps://en.wikipedia.org/wiki/Markdown\n\n\n\n## 插入图片\n\n`![Logo](/images/logo.png)`\n![Logo](/images/logo.png)\n\n\\===========\nrefwebsite:\n\nhexo图片的其他用法：https://hexo.io/zh-cn/docs/asset-folders.html\nhttps://webapps.stackexchange.com/questions/29602/markdown-to-insert-and-display-an-image-on-github-repo\n\n## 标记文本颜色\n\n`<span style=\"color:blue\">*This is Blue italic.*</span>`\n<span style=\"color:blue\">*This is Blue italic.*</span>\n\n`<span style=\"color:red\">**This is Red Bold.**</span>`\n<span style=\"color:red\">**This is Red Bold.**</span>\n\n相比之下,\nitalic 给人轻松的感觉，\nblod有种警告意味。\n\n\\===========\nrefwebsite:\n\nhttps://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown\n\n## next one ?\n\n---------------------------------------------------------------\n以上是我的个人笔记收录，markdown主要用来写笔记和写博客\n其他有什么好玩的用法，欢迎指教。\ntimtingwei#hotmail.com\n","slug":"My-First-Post","published":1,"updated":"2017-12-27T03:59:16.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukuqq0000fadrzzkd6qa0","content":"<p>In this post, I will focus on use of Markdown and hexo push.</p>\n<blockquote>\n<ol>\n<li>title level</li>\n<li>insert a link</li>\n<li>highlight the code</li>\n<li>three lists of point</li>\n<li>insert a note”[^code]”</li>\n<li>bold fonts</li>\n<li>reference</li>\n<li>edit a formula</li>\n<li>draw a flow picture</li>\n</ol>\n<ul>\n<li><a href=\"#补充\">补充</a></li>\n</ul>\n</blockquote>\n<p>reference website: <a href=\"https://www.zybuluo.com/mdeditor#fn:latex\" target=\"_blank\" rel=\"noopener\">Cmd Markdown reader</a></p>\n<h2 id=\"1-Title-level\"><a href=\"#1-Title-level\" class=\"headerlink\" title=\"1. Title level\"></a>1. Title level</h2><h3 id=\"level-3-0\"><a href=\"#level-3-0\" class=\"headerlink\" title=\"level 3-0\"></a>level 3-0</h3><h4 id=\"level-4-0\"><a href=\"#level-4-0\" class=\"headerlink\" title=\"level 4-0\"></a>level 4-0</h4><h3 id=\"level-3-1\"><a href=\"#level-3-1\" class=\"headerlink\" title=\"level 3-1\"></a>level 3-1</h3><h4 id=\"level-4-1\"><a href=\"#level-4-1\" class=\"headerlink\" title=\"level 4-1\"></a>level 4-1</h4><h4 id=\"level-4-2\"><a href=\"#level-4-2\" class=\"headerlink\" title=\"level 4-2\"></a>level 4-2</h4><h2 id=\"2-Insert-a-link\"><a href=\"#2-Insert-a-link\" class=\"headerlink\" title=\"2. Insert a link.\"></a>2. Insert a link.</h2><h3 id=\"Tim’s-Blog\"><a href=\"#Tim’s-Blog\" class=\"headerlink\" title=\"Tim’s Blog\"></a><a href=\"https://timtingwei.github.io/\">Tim’s Blog</a></h3><h3 id=\"Tim’s-Blog-1\"><a href=\"#Tim’s-Blog-1\" class=\"headerlink\" title=\"Tim’s Blog\"></a><a href=\"https://timtingwei.github.io/\">Tim’s Blog</a></h3><h2 id=\"3-Highlight-the-code\"><a href=\"#3-Highlight-the-code\" class=\"headerlink\" title=\"3. Highlight the code\"></a>3. Highlight the code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@requires_authorization</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># A comment</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-three-lists-of-point\"><a href=\"#4-three-lists-of-point\" class=\"headerlink\" title=\"4. three lists of point\"></a>4. three lists of point</h2><h3 id=\"Bulleted-List\"><a href=\"#Bulleted-List\" class=\"headerlink\" title=\"Bulleted List\"></a>Bulleted List</h3><blockquote>\n<ul>\n<li>first line</li>\n<li>second line</li>\n<li>third line</li>\n</ul>\n</blockquote>\n<h3 id=\"Numbered-List\"><a href=\"#Numbered-List\" class=\"headerlink\" title=\"Numbered List\"></a>Numbered List</h3><blockquote>\n<ol>\n<li>first line</li>\n<li>second line</li>\n<li>third line</li>\n</ol>\n</blockquote>\n<h3 id=\"TODO-list\"><a href=\"#TODO-list\" class=\"headerlink\" title=\"TODO list\"></a>TODO list</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> first todo </li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> second todo</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> third todo -&gt; Done</li>\n</ul>\n<h2 id=\"5-insert-a-note-code\"><a href=\"#5-insert-a-note-code\" class=\"headerlink\" title=\"5. insert a note[^code]\"></a>5. insert a note[^code]</h2><p>LaTex formula support [LaTex][^LaTex]<br>high light code [code][^code]<br>insert a web note <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax</a></p>\n<h2 id=\"6-bold-fonts\"><a href=\"#6-bold-fonts\" class=\"headerlink\" title=\"6. bold fonts\"></a>6. bold fonts</h2><p><strong> bold fonts </strong> by adding two asteriskes *  as prefix and suffix respectively</p>\n<h2 id=\"7-Reference\"><a href=\"#7-Reference\" class=\"headerlink\" title=\"7. Reference\"></a>7. Reference</h2><blockquote>\n<p>You can insert a reference by “&gt;”,<br>and input enter to create a new line,<br>This is the end line. Until the next symbol occur.</p>\n</blockquote>\n<h2 id=\"8-edit-a-formula\"><a href=\"#8-edit-a-formula\" class=\"headerlink\" title=\"8. edit a formula\"></a>8. edit a formula</h2><p>$$E=mc^2$$    use $$</p>\n<h2 id=\"9-draw-a-flow-picture\"><a href=\"#9-draw-a-flow-picture\" class=\"headerlink\" title=\"9.draw a flow picture\"></a>9.draw a flow picture</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: Start</span><br><span class=\"line\">op=&gt;operation: Your Opreation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n<p>[^LaTex]: support <strong>LaTex</strong> edit and display, such as: $\\sum_{i=1}^n a_i=0$, visit <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax</a> for more information.<br>[^code]: include Java, Python, JavaScript etc.</p>\n<hr>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><blockquote>\n<ul>\n<li><a href=\"#背景色灰\">背景色灰</a></li>\n<li><a href=\"#实现页面内跳转\">实现页面内跳转</a></li>\n<li><a href=\"#删除线\">删除线</a></li>\n<li><a href=\"#插入图片\">插入图片</a></li>\n<li><a href=\"#标记文本颜色\">标记文本颜色</a><br>20171224之后补充但未作整理。本来可以将每个语法分成多个博客离散列出，但后来出于对博客页面和知识索引的考虑，还是放在一个post内，也许将来会又变动，但是先不提前优化。</li>\n</ul>\n</blockquote>\n<h2 id=\"背景色灰\"><a href=\"#背景色灰\" class=\"headerlink\" title=\"背景色灰\"></a>背景色灰</h2><p>`gray background`</p>\n<p><code>gray background</code></p>\n<p>背景灰可以代替 反斜杠 \\,去完成注释。这个很好用。原理估计和代码块差不多吧。</p>\n<h2 id=\"实现页面内跳转\"><a href=\"#实现页面内跳转\" class=\"headerlink\" title=\"实现页面内跳转\"></a>实现页面内跳转</h2><p><code>[create an anchor](#anchors-in-markdown)</code></p>\n<p><a href=\"#anchors-in-markdown\">create an anchor</a></p>\n<p>\\===========<br>refwebsite:</p>\n<p><a href=\"https://gist.github.com/asabaylus/3071099\" target=\"_blank\" rel=\"noopener\">Anchors in Markdown</a></p>\n<h3 id=\"anchors-in-markdown\"><a href=\"#anchors-in-markdown\" class=\"headerlink\" title=\"anchors in markdown\"></a>anchors in markdown</h3><pre><code>skip into this title\n</code></pre><h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p><code>~~删除一句~~</code><br><del>删除一句</del></p>\n<p><code>~~删除</code><br><code>多行~~</code><br><del>删除<br>多行</del></p>\n<p><code>~~删除包含语法[mituh’s notes][timtingwei.github.io]~~</code><br><del>删除包含语法[mituh’s notes][timtingwei.github.io]</del></p>\n<p>====<br>不知道还有其他方法否？</p>\n<p>\\==========<br>refwebsite:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Markdown</a></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p><code>![Logo](/images/logo.png)</code><br><img src=\"/images/logo.png\" alt=\"Logo\"></p>\n<p>\\===========<br>refwebsite:</p>\n<p>hexo图片的其他用法：<a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/asset-folders.html</a><br><a href=\"https://webapps.stackexchange.com/questions/29602/markdown-to-insert-and-display-an-image-on-github-repo\" target=\"_blank\" rel=\"noopener\">https://webapps.stackexchange.com/questions/29602/markdown-to-insert-and-display-an-image-on-github-repo</a></p>\n<h2 id=\"标记文本颜色\"><a href=\"#标记文本颜色\" class=\"headerlink\" title=\"标记文本颜色\"></a>标记文本颜色</h2><p><code>&lt;span style=&quot;color:blue&quot;&gt;*This is Blue italic.*&lt;/span&gt;</code><br><span style=\"color:blue\"><em>This is Blue italic.</em></span></p>\n<p><code>&lt;span style=&quot;color:red&quot;&gt;**This is Red Bold.**&lt;/span&gt;</code><br><span style=\"color:red\"><strong>This is Red Bold.</strong></span></p>\n<p>相比之下,<br>italic 给人轻松的感觉，<br>blod有种警告意味。</p>\n<p>\\===========<br>refwebsite:</p>\n<p><a href=\"https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown</a></p>\n<h2 id=\"next-one\"><a href=\"#next-one\" class=\"headerlink\" title=\"next one ?\"></a>next one ?</h2><hr>\n<p>以上是我的个人笔记收录，markdown主要用来写笔记和写博客<br>其他有什么好玩的用法，欢迎指教。<br>timtingwei#hotmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this post, I will focus on use of Markdown and hexo push.</p>\n<blockquote>\n<ol>\n<li>title level</li>\n<li>insert a link</li>\n<li>highlight the code</li>\n<li>three lists of point</li>\n<li>insert a note”[^code]”</li>\n<li>bold fonts</li>\n<li>reference</li>\n<li>edit a formula</li>\n<li>draw a flow picture</li>\n</ol>\n<ul>\n<li><a href=\"#补充\">补充</a></li>\n</ul>\n</blockquote>\n<p>reference website: <a href=\"https://www.zybuluo.com/mdeditor#fn:latex\" target=\"_blank\" rel=\"noopener\">Cmd Markdown reader</a></p>\n<h2 id=\"1-Title-level\"><a href=\"#1-Title-level\" class=\"headerlink\" title=\"1. Title level\"></a>1. Title level</h2><h3 id=\"level-3-0\"><a href=\"#level-3-0\" class=\"headerlink\" title=\"level 3-0\"></a>level 3-0</h3><h4 id=\"level-4-0\"><a href=\"#level-4-0\" class=\"headerlink\" title=\"level 4-0\"></a>level 4-0</h4><h3 id=\"level-3-1\"><a href=\"#level-3-1\" class=\"headerlink\" title=\"level 3-1\"></a>level 3-1</h3><h4 id=\"level-4-1\"><a href=\"#level-4-1\" class=\"headerlink\" title=\"level 4-1\"></a>level 4-1</h4><h4 id=\"level-4-2\"><a href=\"#level-4-2\" class=\"headerlink\" title=\"level 4-2\"></a>level 4-2</h4><h2 id=\"2-Insert-a-link\"><a href=\"#2-Insert-a-link\" class=\"headerlink\" title=\"2. Insert a link.\"></a>2. Insert a link.</h2><h3 id=\"Tim’s-Blog\"><a href=\"#Tim’s-Blog\" class=\"headerlink\" title=\"Tim’s Blog\"></a><a href=\"https://timtingwei.github.io/\">Tim’s Blog</a></h3><h3 id=\"Tim’s-Blog-1\"><a href=\"#Tim’s-Blog-1\" class=\"headerlink\" title=\"Tim’s Blog\"></a><a href=\"https://timtingwei.github.io/\">Tim’s Blog</a></h3><h2 id=\"3-Highlight-the-code\"><a href=\"#3-Highlight-the-code\" class=\"headerlink\" title=\"3. Highlight the code\"></a>3. Highlight the code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@requires_authorization</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># A comment</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-three-lists-of-point\"><a href=\"#4-three-lists-of-point\" class=\"headerlink\" title=\"4. three lists of point\"></a>4. three lists of point</h2><h3 id=\"Bulleted-List\"><a href=\"#Bulleted-List\" class=\"headerlink\" title=\"Bulleted List\"></a>Bulleted List</h3><blockquote>\n<ul>\n<li>first line</li>\n<li>second line</li>\n<li>third line</li>\n</ul>\n</blockquote>\n<h3 id=\"Numbered-List\"><a href=\"#Numbered-List\" class=\"headerlink\" title=\"Numbered List\"></a>Numbered List</h3><blockquote>\n<ol>\n<li>first line</li>\n<li>second line</li>\n<li>third line</li>\n</ol>\n</blockquote>\n<h3 id=\"TODO-list\"><a href=\"#TODO-list\" class=\"headerlink\" title=\"TODO list\"></a>TODO list</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> first todo </li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> second todo</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> third todo -&gt; Done</li>\n</ul>\n<h2 id=\"5-insert-a-note-code\"><a href=\"#5-insert-a-note-code\" class=\"headerlink\" title=\"5. insert a note[^code]\"></a>5. insert a note[^code]</h2><p>LaTex formula support [LaTex][^LaTex]<br>high light code [code][^code]<br>insert a web note <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax</a></p>\n<h2 id=\"6-bold-fonts\"><a href=\"#6-bold-fonts\" class=\"headerlink\" title=\"6. bold fonts\"></a>6. bold fonts</h2><p><strong> bold fonts </strong> by adding two asteriskes *  as prefix and suffix respectively</p>\n<h2 id=\"7-Reference\"><a href=\"#7-Reference\" class=\"headerlink\" title=\"7. Reference\"></a>7. Reference</h2><blockquote>\n<p>You can insert a reference by “&gt;”,<br>and input enter to create a new line,<br>This is the end line. Until the next symbol occur.</p>\n</blockquote>\n<h2 id=\"8-edit-a-formula\"><a href=\"#8-edit-a-formula\" class=\"headerlink\" title=\"8. edit a formula\"></a>8. edit a formula</h2><p>$$E=mc^2$$    use $$</p>\n<h2 id=\"9-draw-a-flow-picture\"><a href=\"#9-draw-a-flow-picture\" class=\"headerlink\" title=\"9.draw a flow picture\"></a>9.draw a flow picture</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: Start</span><br><span class=\"line\">op=&gt;operation: Your Opreation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n<p>[^LaTex]: support <strong>LaTex</strong> edit and display, such as: $\\sum_{i=1}^n a_i=0$, visit <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax</a> for more information.<br>[^code]: include Java, Python, JavaScript etc.</p>\n<hr>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><blockquote>\n<ul>\n<li><a href=\"#背景色灰\">背景色灰</a></li>\n<li><a href=\"#实现页面内跳转\">实现页面内跳转</a></li>\n<li><a href=\"#删除线\">删除线</a></li>\n<li><a href=\"#插入图片\">插入图片</a></li>\n<li><a href=\"#标记文本颜色\">标记文本颜色</a><br>20171224之后补充但未作整理。本来可以将每个语法分成多个博客离散列出，但后来出于对博客页面和知识索引的考虑，还是放在一个post内，也许将来会又变动，但是先不提前优化。</li>\n</ul>\n</blockquote>\n<h2 id=\"背景色灰\"><a href=\"#背景色灰\" class=\"headerlink\" title=\"背景色灰\"></a>背景色灰</h2><p>`gray background`</p>\n<p><code>gray background</code></p>\n<p>背景灰可以代替 反斜杠 \\,去完成注释。这个很好用。原理估计和代码块差不多吧。</p>\n<h2 id=\"实现页面内跳转\"><a href=\"#实现页面内跳转\" class=\"headerlink\" title=\"实现页面内跳转\"></a>实现页面内跳转</h2><p><code>[create an anchor](#anchors-in-markdown)</code></p>\n<p><a href=\"#anchors-in-markdown\">create an anchor</a></p>\n<p>\\===========<br>refwebsite:</p>\n<p><a href=\"https://gist.github.com/asabaylus/3071099\" target=\"_blank\" rel=\"noopener\">Anchors in Markdown</a></p>\n<h3 id=\"anchors-in-markdown\"><a href=\"#anchors-in-markdown\" class=\"headerlink\" title=\"anchors in markdown\"></a>anchors in markdown</h3><pre><code>skip into this title\n</code></pre><h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p><code>~~删除一句~~</code><br><del>删除一句</del></p>\n<p><code>~~删除</code><br><code>多行~~</code><br><del>删除<br>多行</del></p>\n<p><code>~~删除包含语法[mituh’s notes][timtingwei.github.io]~~</code><br><del>删除包含语法[mituh’s notes][timtingwei.github.io]</del></p>\n<p>====<br>不知道还有其他方法否？</p>\n<p>\\==========<br>refwebsite:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Markdown</a></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p><code>![Logo](/images/logo.png)</code><br><img src=\"/images/logo.png\" alt=\"Logo\"></p>\n<p>\\===========<br>refwebsite:</p>\n<p>hexo图片的其他用法：<a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/asset-folders.html</a><br><a href=\"https://webapps.stackexchange.com/questions/29602/markdown-to-insert-and-display-an-image-on-github-repo\" target=\"_blank\" rel=\"noopener\">https://webapps.stackexchange.com/questions/29602/markdown-to-insert-and-display-an-image-on-github-repo</a></p>\n<h2 id=\"标记文本颜色\"><a href=\"#标记文本颜色\" class=\"headerlink\" title=\"标记文本颜色\"></a>标记文本颜色</h2><p><code>&lt;span style=&quot;color:blue&quot;&gt;*This is Blue italic.*&lt;/span&gt;</code><br><span style=\"color:blue\"><em>This is Blue italic.</em></span></p>\n<p><code>&lt;span style=&quot;color:red&quot;&gt;**This is Red Bold.**&lt;/span&gt;</code><br><span style=\"color:red\"><strong>This is Red Bold.</strong></span></p>\n<p>相比之下,<br>italic 给人轻松的感觉，<br>blod有种警告意味。</p>\n<p>\\===========<br>refwebsite:</p>\n<p><a href=\"https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown</a></p>\n<h2 id=\"next-one\"><a href=\"#next-one\" class=\"headerlink\" title=\"next one ?\"></a>next one ?</h2><hr>\n<p>以上是我的个人笔记收录，markdown主要用来写笔记和写博客<br>其他有什么好玩的用法，欢迎指教。<br>timtingwei#hotmail.com</p>\n"},{"title":"冬至的一点光亮","date":"2017-12-22T15:30:00.000Z","_content":"\n今日冬至，晒太阳翻了翻<<鸟哥的Linux入门>>，通读了一遍，了解结构为后续学习挑出主次。中午找S交谈OpenGL相关问题，当然不止于此。有几点收获:\n1, 学习底层知识，少学习容易过时的知识。我引用Quora上得到的回答，对自己目前的状态做一个反思:\"Are you good at object-oriented programming? C? The Unix tools? Have you taken discrete math? A course in computer systems?\"\n2, 不轻易做一个计划，做一个计划不轻易放弃。我对什么事情都感兴趣，什么都想玩一玩，但是如果不把一项技术学精，虎头蛇尾，是一种空言壮志的表现。S举例了我从GH, Python, 计算几何, C++, Flask, OpenGL等计划, 当然我知道还有其他, 说明我容易循着一条轨迹向下寻溯。但时未兴，我无法准确判断计划的可靠性。\n3, 不把当下决定看得太重。对于那些无所事事的人，他们要减少对时间的浪费;对于我，浪费的时间反而有意义的。浪费与否，学习哪条方向, 都是一种经历。不能陷入到对未知的结果的忧虑当中去，要承认对未知的复杂性。\n4, 捡最近的镜子。满地镜子看花眼睛时候，找最近的镜子。对S来说，数字化的最近镜子是学生；他如此提醒我，想必是要说，我最近的镜子，应该是我的同学和S。但是什么是技术的最近的镜子呢？数据结构，图形，游戏。也许。\n\n冬至夜， 按照去年留下的习俗， 和朋友约一起煮火锅下水饺和汤圆。吃得也饱，聊得也欢快。\n\n其他人陆陆续续的去忙别的事情，只剩下X，H和我。话题的起因是老生常谈，女孩。我看上去是个优胜者，他们两个向我请教。给出了一些符合xu逻辑的方法,\n1, 列出关于学校集体活动的一个list;\n2, 将每个活动的具体形式考量一遍;\n3, 加入该活动的方式;\n4, 可能会出现的几个状况;\n5, 综合考量后排序挑选前5个活动参加。\n因为，前前后后也跟X讲了好多次，没有什么实际行动，我想，问题可能出在，我总是讲具体跟女孩的交流方式，其实这是因人而异的，刻意的追求结果未必是好。但作为前馈数据，需要的大概是接触到更多人的环境，让他自己在这个环境中摸爬。希望这大概能够好些。\n\n聊完这个，便聊第二个老生常谈，但并未透彻的话题，体制。重新思考话题展开的原因相对来说比较有意义，是探索一种启蒙的模型。这个话题能够展开，总得来讲，出于对当下以及未来的困惑，我尝试分开来讲几点原因，\n1, 计算机科学自下而上的思维模式，撼动原有的自上而下的体系。这其中差异，看上去是从技术角度出发，却渗透到经济，结构，体制，文化，人性等各个方面。\n2, 怀有对资社的不充分理解和想要探求的心理状态。\n3, 评论和试图解决遇到的问题，寻求一种生活的模型。\n\nX先提出了对该体制是否会倒塌的质疑，我觉得这个问题好回答，但也不好回答，确实凭借我的认知还无法解释清楚，能够解释清楚的人大多也都别有用心。我但是从我的数据库中索引出来一些，但凌晨四点睡去醒来后，又作了些思考。\n\n人一般走上畸路的过程分成几个阶段，先是犯错误，错误带来不良后果，判断他没救的依据是，依旧不改正错误，后果没得到解决。道理是相同的。\n\n错误性体现在，社会主义相对于资本主义的乌托邦本质。共产主义，当财富是大家共有的时候，谁来决定财富的分配？能够决定分配的人，势必会有权力。如果该掌权者是一个大公无私的，理性智慧的人，大家能够得到平等的分配。这看上去很对，能够实现。但却忽略了一个关键的事实，人性是有阴暗面的，是有私心的。这种私心若是顺其自然的发展，以共同利益为由，是能够孕育出灿烂果实的；有趣的是，但若想消除这种私心，这种私心就被放大了，因为看上去大家都不存在私心了，但消除别人私心的行为本身就是一种私心，说这是私心温和了些，应该说是恶，然而这种恶会被不断的累积和放大，因此，在最高位置上的伟大领袖，或许并非那么伟大。\n\n那么后果是什么？总体上讲是系统内耗造成的资源短缺。这种框架下，势必一切会向权力看。人们会为了生存而追求利益，而追求利益的竞争在这个情况下，又转变成了为追逐权力而努力竞争。值得一提的是，生存是第一要义。竞争是必要的，但除了竞争之外还有合作；利益是必要的，但除了利益之外还有共同利益；追逐地位是必要的，但地位的来源不是唯一的来自于权力和财富。\n\n这种追求利益的方式，产生了第一种后果，其实就是系统内耗。拿我熟悉的高等教育举例子，真正想做科研的教授，他势必不想将时间浪费在这一内耗上，但是不进行这种内耗他便得不到科研经费，科研没有开始就已经结束。然而，也许有人会说，教授你只要忍受一下，便可以开始真正的科研，但事实情况是这样:1, 一旦进行了一次这样的内耗，他会找你第二次; 2, 要记住，这是在进行权力的斗争，如果你做的研究是你的上一级无法控制的，他会对你起疑心；如果你的研究是上一级可以控制的，他会把你的研究为他所用作为自己权力斗争的筹码。也就是说，在这种机制的情况下，他是逆向淘汰的，有科研能力的人，被最终的边缘化。\n\n第二种后果便是，内耗之后，是对系统资源的严重浪费。这个问题在各行各业各个单位普遍都是存在，且按照中共逻辑来说是正常的。权力的斗争中，可不像我在计算机上写代码一样，他有很多区别，但仍然可以用计算机的角度来解释。\n\n1, 区别在于，建立一个模型，跑一跑数据资源，出错了；重新建立一个模型，再跑一跑。但现实世界中，没人会给我们这个机会。地下水就是地下水，矿产就是矿产，森林就是森林，不多不少就放在这里，终究竭尽。\n\n2, 用计算机的角度解释就是说， 上述所说的权力斗争，导致创新能力低下，经济对重工业的依赖性强，资源的消耗速度快。也就是，没有优秀的算法，数据结构选择又不合理，内存管理又不做，建立模型后，冗余运算大，结果是消耗了很多资源，却写了个破程序，还要把时间花在无止尽的debug上。之后也会相应解释。\n\n\n那么，错误是否被改正？这其实是个相对较伪命题，这个问题上我们翻过很多次跟斗，共党把他们最信任的，工人骗了，学生骗了，农民也骗了。只要认识到乌托邦的本质，就能够得出结论，他不无法被改正的。如果说要从计划经济走向市场经济，原因是有了权力之后就要用权力去换取财富。十年寒窗是为了什么？更何况12年苦读之后，换来的是更鲜艳的红旗。拿建筑学的建模软件来说，如果sketchUp开源底层代码了，那它还是sketchUp吗？还是叫sketchDown?\n\n后果是否得到解决呢？对应的，当我写错一个程序的时候，我可能会把他扔掉，甚至说从一开始我就应该谨慎设计一个程序，那样就不至于后面一大堆麻烦。 政府官员需要权力斗争的筹码，这些筹码要从白手套，也就是商人那里得到，企业发展势会消耗资源，在资本主义中这种消耗是良性的，因为商人为了自身利益出发，要考虑一种相对长远的发展，商人就会去选择新的技术，投资新的研发，考虑如何合理分配现有资源，因为他们的资本决定了他们的相对自由。然而，在天朝，权力斗争是激烈的，对筹码的欲望是贪婪的，商人是被迫无奈如妓女似的，环境？资源？这种考虑是可能只会是在某个失眠的夜晚发问内心，然而事实上却是不会存在的，而这种对内心的发问，又会用另外一种形式去完成对内心的救赎。只有这种发展不可持续，才会提出可持续发展观。同理，只有在素质低下的国家，才会提出乐于助人般的口号，提出共识，就先不展开了。\n\n天朝统治者和民众一起，在追求结果的平等的过程中，必然造成了过程的不平等，而统治者享受到了不平等的高点，低点留给民众享受。然而他们真的是在高点了吗？领袖足够了吗？常委们幸福吗？首富们的日子好过吗？共产主义马克思是cancer, 把白的黑的都卷入了这场漩涡中，无法脱身。但是cancer现在有医治手段了吗？上帝会像看着一个犯错的孩子一样看着我们，他终究还是宽容的吧，他会“给岁月以文明，而不是给文明以岁月”的吧，中华民族还要在时间中被消耗迭代，但他终归还是坚强的吧。即使，有的人选择在别人将他逼疯之前先逼疯了自己，但他们还是坚强无比的吧。\n\n\n我们很多人不承认，但事实上不得不承认：我们习惯于将现在当作是过去历史的结果，用历史去解释未来，但事实上，现在就是未来的原因。\n","source":"_posts/a-little-light.md","raw":"---\ntitle: 冬至的一点光亮\ndate: 2017-12-22 23:30:00\ntags: 随笔\n---\n\n今日冬至，晒太阳翻了翻<<鸟哥的Linux入门>>，通读了一遍，了解结构为后续学习挑出主次。中午找S交谈OpenGL相关问题，当然不止于此。有几点收获:\n1, 学习底层知识，少学习容易过时的知识。我引用Quora上得到的回答，对自己目前的状态做一个反思:\"Are you good at object-oriented programming? C? The Unix tools? Have you taken discrete math? A course in computer systems?\"\n2, 不轻易做一个计划，做一个计划不轻易放弃。我对什么事情都感兴趣，什么都想玩一玩，但是如果不把一项技术学精，虎头蛇尾，是一种空言壮志的表现。S举例了我从GH, Python, 计算几何, C++, Flask, OpenGL等计划, 当然我知道还有其他, 说明我容易循着一条轨迹向下寻溯。但时未兴，我无法准确判断计划的可靠性。\n3, 不把当下决定看得太重。对于那些无所事事的人，他们要减少对时间的浪费;对于我，浪费的时间反而有意义的。浪费与否，学习哪条方向, 都是一种经历。不能陷入到对未知的结果的忧虑当中去，要承认对未知的复杂性。\n4, 捡最近的镜子。满地镜子看花眼睛时候，找最近的镜子。对S来说，数字化的最近镜子是学生；他如此提醒我，想必是要说，我最近的镜子，应该是我的同学和S。但是什么是技术的最近的镜子呢？数据结构，图形，游戏。也许。\n\n冬至夜， 按照去年留下的习俗， 和朋友约一起煮火锅下水饺和汤圆。吃得也饱，聊得也欢快。\n\n其他人陆陆续续的去忙别的事情，只剩下X，H和我。话题的起因是老生常谈，女孩。我看上去是个优胜者，他们两个向我请教。给出了一些符合xu逻辑的方法,\n1, 列出关于学校集体活动的一个list;\n2, 将每个活动的具体形式考量一遍;\n3, 加入该活动的方式;\n4, 可能会出现的几个状况;\n5, 综合考量后排序挑选前5个活动参加。\n因为，前前后后也跟X讲了好多次，没有什么实际行动，我想，问题可能出在，我总是讲具体跟女孩的交流方式，其实这是因人而异的，刻意的追求结果未必是好。但作为前馈数据，需要的大概是接触到更多人的环境，让他自己在这个环境中摸爬。希望这大概能够好些。\n\n聊完这个，便聊第二个老生常谈，但并未透彻的话题，体制。重新思考话题展开的原因相对来说比较有意义，是探索一种启蒙的模型。这个话题能够展开，总得来讲，出于对当下以及未来的困惑，我尝试分开来讲几点原因，\n1, 计算机科学自下而上的思维模式，撼动原有的自上而下的体系。这其中差异，看上去是从技术角度出发，却渗透到经济，结构，体制，文化，人性等各个方面。\n2, 怀有对资社的不充分理解和想要探求的心理状态。\n3, 评论和试图解决遇到的问题，寻求一种生活的模型。\n\nX先提出了对该体制是否会倒塌的质疑，我觉得这个问题好回答，但也不好回答，确实凭借我的认知还无法解释清楚，能够解释清楚的人大多也都别有用心。我但是从我的数据库中索引出来一些，但凌晨四点睡去醒来后，又作了些思考。\n\n人一般走上畸路的过程分成几个阶段，先是犯错误，错误带来不良后果，判断他没救的依据是，依旧不改正错误，后果没得到解决。道理是相同的。\n\n错误性体现在，社会主义相对于资本主义的乌托邦本质。共产主义，当财富是大家共有的时候，谁来决定财富的分配？能够决定分配的人，势必会有权力。如果该掌权者是一个大公无私的，理性智慧的人，大家能够得到平等的分配。这看上去很对，能够实现。但却忽略了一个关键的事实，人性是有阴暗面的，是有私心的。这种私心若是顺其自然的发展，以共同利益为由，是能够孕育出灿烂果实的；有趣的是，但若想消除这种私心，这种私心就被放大了，因为看上去大家都不存在私心了，但消除别人私心的行为本身就是一种私心，说这是私心温和了些，应该说是恶，然而这种恶会被不断的累积和放大，因此，在最高位置上的伟大领袖，或许并非那么伟大。\n\n那么后果是什么？总体上讲是系统内耗造成的资源短缺。这种框架下，势必一切会向权力看。人们会为了生存而追求利益，而追求利益的竞争在这个情况下，又转变成了为追逐权力而努力竞争。值得一提的是，生存是第一要义。竞争是必要的，但除了竞争之外还有合作；利益是必要的，但除了利益之外还有共同利益；追逐地位是必要的，但地位的来源不是唯一的来自于权力和财富。\n\n这种追求利益的方式，产生了第一种后果，其实就是系统内耗。拿我熟悉的高等教育举例子，真正想做科研的教授，他势必不想将时间浪费在这一内耗上，但是不进行这种内耗他便得不到科研经费，科研没有开始就已经结束。然而，也许有人会说，教授你只要忍受一下，便可以开始真正的科研，但事实情况是这样:1, 一旦进行了一次这样的内耗，他会找你第二次; 2, 要记住，这是在进行权力的斗争，如果你做的研究是你的上一级无法控制的，他会对你起疑心；如果你的研究是上一级可以控制的，他会把你的研究为他所用作为自己权力斗争的筹码。也就是说，在这种机制的情况下，他是逆向淘汰的，有科研能力的人，被最终的边缘化。\n\n第二种后果便是，内耗之后，是对系统资源的严重浪费。这个问题在各行各业各个单位普遍都是存在，且按照中共逻辑来说是正常的。权力的斗争中，可不像我在计算机上写代码一样，他有很多区别，但仍然可以用计算机的角度来解释。\n\n1, 区别在于，建立一个模型，跑一跑数据资源，出错了；重新建立一个模型，再跑一跑。但现实世界中，没人会给我们这个机会。地下水就是地下水，矿产就是矿产，森林就是森林，不多不少就放在这里，终究竭尽。\n\n2, 用计算机的角度解释就是说， 上述所说的权力斗争，导致创新能力低下，经济对重工业的依赖性强，资源的消耗速度快。也就是，没有优秀的算法，数据结构选择又不合理，内存管理又不做，建立模型后，冗余运算大，结果是消耗了很多资源，却写了个破程序，还要把时间花在无止尽的debug上。之后也会相应解释。\n\n\n那么，错误是否被改正？这其实是个相对较伪命题，这个问题上我们翻过很多次跟斗，共党把他们最信任的，工人骗了，学生骗了，农民也骗了。只要认识到乌托邦的本质，就能够得出结论，他不无法被改正的。如果说要从计划经济走向市场经济，原因是有了权力之后就要用权力去换取财富。十年寒窗是为了什么？更何况12年苦读之后，换来的是更鲜艳的红旗。拿建筑学的建模软件来说，如果sketchUp开源底层代码了，那它还是sketchUp吗？还是叫sketchDown?\n\n后果是否得到解决呢？对应的，当我写错一个程序的时候，我可能会把他扔掉，甚至说从一开始我就应该谨慎设计一个程序，那样就不至于后面一大堆麻烦。 政府官员需要权力斗争的筹码，这些筹码要从白手套，也就是商人那里得到，企业发展势会消耗资源，在资本主义中这种消耗是良性的，因为商人为了自身利益出发，要考虑一种相对长远的发展，商人就会去选择新的技术，投资新的研发，考虑如何合理分配现有资源，因为他们的资本决定了他们的相对自由。然而，在天朝，权力斗争是激烈的，对筹码的欲望是贪婪的，商人是被迫无奈如妓女似的，环境？资源？这种考虑是可能只会是在某个失眠的夜晚发问内心，然而事实上却是不会存在的，而这种对内心的发问，又会用另外一种形式去完成对内心的救赎。只有这种发展不可持续，才会提出可持续发展观。同理，只有在素质低下的国家，才会提出乐于助人般的口号，提出共识，就先不展开了。\n\n天朝统治者和民众一起，在追求结果的平等的过程中，必然造成了过程的不平等，而统治者享受到了不平等的高点，低点留给民众享受。然而他们真的是在高点了吗？领袖足够了吗？常委们幸福吗？首富们的日子好过吗？共产主义马克思是cancer, 把白的黑的都卷入了这场漩涡中，无法脱身。但是cancer现在有医治手段了吗？上帝会像看着一个犯错的孩子一样看着我们，他终究还是宽容的吧，他会“给岁月以文明，而不是给文明以岁月”的吧，中华民族还要在时间中被消耗迭代，但他终归还是坚强的吧。即使，有的人选择在别人将他逼疯之前先逼疯了自己，但他们还是坚强无比的吧。\n\n\n我们很多人不承认，但事实上不得不承认：我们习惯于将现在当作是过去历史的结果，用历史去解释未来，但事实上，现在就是未来的原因。\n","slug":"a-little-light","published":1,"updated":"2017-12-23T15:00:37.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukur20002fadrj15cwqv8","content":"<p>今日冬至，晒太阳翻了翻&lt;&lt;鸟哥的Linux入门&gt;&gt;，通读了一遍，了解结构为后续学习挑出主次。中午找S交谈OpenGL相关问题，当然不止于此。有几点收获:<br>1, 学习底层知识，少学习容易过时的知识。我引用Quora上得到的回答，对自己目前的状态做一个反思:”Are you good at object-oriented programming? C? The Unix tools? Have you taken discrete math? A course in computer systems?”<br>2, 不轻易做一个计划，做一个计划不轻易放弃。我对什么事情都感兴趣，什么都想玩一玩，但是如果不把一项技术学精，虎头蛇尾，是一种空言壮志的表现。S举例了我从GH, Python, 计算几何, C++, Flask, OpenGL等计划, 当然我知道还有其他, 说明我容易循着一条轨迹向下寻溯。但时未兴，我无法准确判断计划的可靠性。<br>3, 不把当下决定看得太重。对于那些无所事事的人，他们要减少对时间的浪费;对于我，浪费的时间反而有意义的。浪费与否，学习哪条方向, 都是一种经历。不能陷入到对未知的结果的忧虑当中去，要承认对未知的复杂性。<br>4, 捡最近的镜子。满地镜子看花眼睛时候，找最近的镜子。对S来说，数字化的最近镜子是学生；他如此提醒我，想必是要说，我最近的镜子，应该是我的同学和S。但是什么是技术的最近的镜子呢？数据结构，图形，游戏。也许。</p>\n<p>冬至夜， 按照去年留下的习俗， 和朋友约一起煮火锅下水饺和汤圆。吃得也饱，聊得也欢快。</p>\n<p>其他人陆陆续续的去忙别的事情，只剩下X，H和我。话题的起因是老生常谈，女孩。我看上去是个优胜者，他们两个向我请教。给出了一些符合xu逻辑的方法,<br>1, 列出关于学校集体活动的一个list;<br>2, 将每个活动的具体形式考量一遍;<br>3, 加入该活动的方式;<br>4, 可能会出现的几个状况;<br>5, 综合考量后排序挑选前5个活动参加。<br>因为，前前后后也跟X讲了好多次，没有什么实际行动，我想，问题可能出在，我总是讲具体跟女孩的交流方式，其实这是因人而异的，刻意的追求结果未必是好。但作为前馈数据，需要的大概是接触到更多人的环境，让他自己在这个环境中摸爬。希望这大概能够好些。</p>\n<p>聊完这个，便聊第二个老生常谈，但并未透彻的话题，体制。重新思考话题展开的原因相对来说比较有意义，是探索一种启蒙的模型。这个话题能够展开，总得来讲，出于对当下以及未来的困惑，我尝试分开来讲几点原因，<br>1, 计算机科学自下而上的思维模式，撼动原有的自上而下的体系。这其中差异，看上去是从技术角度出发，却渗透到经济，结构，体制，文化，人性等各个方面。<br>2, 怀有对资社的不充分理解和想要探求的心理状态。<br>3, 评论和试图解决遇到的问题，寻求一种生活的模型。</p>\n<p>X先提出了对该体制是否会倒塌的质疑，我觉得这个问题好回答，但也不好回答，确实凭借我的认知还无法解释清楚，能够解释清楚的人大多也都别有用心。我但是从我的数据库中索引出来一些，但凌晨四点睡去醒来后，又作了些思考。</p>\n<p>人一般走上畸路的过程分成几个阶段，先是犯错误，错误带来不良后果，判断他没救的依据是，依旧不改正错误，后果没得到解决。道理是相同的。</p>\n<p>错误性体现在，社会主义相对于资本主义的乌托邦本质。共产主义，当财富是大家共有的时候，谁来决定财富的分配？能够决定分配的人，势必会有权力。如果该掌权者是一个大公无私的，理性智慧的人，大家能够得到平等的分配。这看上去很对，能够实现。但却忽略了一个关键的事实，人性是有阴暗面的，是有私心的。这种私心若是顺其自然的发展，以共同利益为由，是能够孕育出灿烂果实的；有趣的是，但若想消除这种私心，这种私心就被放大了，因为看上去大家都不存在私心了，但消除别人私心的行为本身就是一种私心，说这是私心温和了些，应该说是恶，然而这种恶会被不断的累积和放大，因此，在最高位置上的伟大领袖，或许并非那么伟大。</p>\n<p>那么后果是什么？总体上讲是系统内耗造成的资源短缺。这种框架下，势必一切会向权力看。人们会为了生存而追求利益，而追求利益的竞争在这个情况下，又转变成了为追逐权力而努力竞争。值得一提的是，生存是第一要义。竞争是必要的，但除了竞争之外还有合作；利益是必要的，但除了利益之外还有共同利益；追逐地位是必要的，但地位的来源不是唯一的来自于权力和财富。</p>\n<p>这种追求利益的方式，产生了第一种后果，其实就是系统内耗。拿我熟悉的高等教育举例子，真正想做科研的教授，他势必不想将时间浪费在这一内耗上，但是不进行这种内耗他便得不到科研经费，科研没有开始就已经结束。然而，也许有人会说，教授你只要忍受一下，便可以开始真正的科研，但事实情况是这样:1, 一旦进行了一次这样的内耗，他会找你第二次; 2, 要记住，这是在进行权力的斗争，如果你做的研究是你的上一级无法控制的，他会对你起疑心；如果你的研究是上一级可以控制的，他会把你的研究为他所用作为自己权力斗争的筹码。也就是说，在这种机制的情况下，他是逆向淘汰的，有科研能力的人，被最终的边缘化。</p>\n<p>第二种后果便是，内耗之后，是对系统资源的严重浪费。这个问题在各行各业各个单位普遍都是存在，且按照中共逻辑来说是正常的。权力的斗争中，可不像我在计算机上写代码一样，他有很多区别，但仍然可以用计算机的角度来解释。</p>\n<p>1, 区别在于，建立一个模型，跑一跑数据资源，出错了；重新建立一个模型，再跑一跑。但现实世界中，没人会给我们这个机会。地下水就是地下水，矿产就是矿产，森林就是森林，不多不少就放在这里，终究竭尽。</p>\n<p>2, 用计算机的角度解释就是说， 上述所说的权力斗争，导致创新能力低下，经济对重工业的依赖性强，资源的消耗速度快。也就是，没有优秀的算法，数据结构选择又不合理，内存管理又不做，建立模型后，冗余运算大，结果是消耗了很多资源，却写了个破程序，还要把时间花在无止尽的debug上。之后也会相应解释。</p>\n<p>那么，错误是否被改正？这其实是个相对较伪命题，这个问题上我们翻过很多次跟斗，共党把他们最信任的，工人骗了，学生骗了，农民也骗了。只要认识到乌托邦的本质，就能够得出结论，他不无法被改正的。如果说要从计划经济走向市场经济，原因是有了权力之后就要用权力去换取财富。十年寒窗是为了什么？更何况12年苦读之后，换来的是更鲜艳的红旗。拿建筑学的建模软件来说，如果sketchUp开源底层代码了，那它还是sketchUp吗？还是叫sketchDown?</p>\n<p>后果是否得到解决呢？对应的，当我写错一个程序的时候，我可能会把他扔掉，甚至说从一开始我就应该谨慎设计一个程序，那样就不至于后面一大堆麻烦。 政府官员需要权力斗争的筹码，这些筹码要从白手套，也就是商人那里得到，企业发展势会消耗资源，在资本主义中这种消耗是良性的，因为商人为了自身利益出发，要考虑一种相对长远的发展，商人就会去选择新的技术，投资新的研发，考虑如何合理分配现有资源，因为他们的资本决定了他们的相对自由。然而，在天朝，权力斗争是激烈的，对筹码的欲望是贪婪的，商人是被迫无奈如妓女似的，环境？资源？这种考虑是可能只会是在某个失眠的夜晚发问内心，然而事实上却是不会存在的，而这种对内心的发问，又会用另外一种形式去完成对内心的救赎。只有这种发展不可持续，才会提出可持续发展观。同理，只有在素质低下的国家，才会提出乐于助人般的口号，提出共识，就先不展开了。</p>\n<p>天朝统治者和民众一起，在追求结果的平等的过程中，必然造成了过程的不平等，而统治者享受到了不平等的高点，低点留给民众享受。然而他们真的是在高点了吗？领袖足够了吗？常委们幸福吗？首富们的日子好过吗？共产主义马克思是cancer, 把白的黑的都卷入了这场漩涡中，无法脱身。但是cancer现在有医治手段了吗？上帝会像看着一个犯错的孩子一样看着我们，他终究还是宽容的吧，他会“给岁月以文明，而不是给文明以岁月”的吧，中华民族还要在时间中被消耗迭代，但他终归还是坚强的吧。即使，有的人选择在别人将他逼疯之前先逼疯了自己，但他们还是坚强无比的吧。</p>\n<p>我们很多人不承认，但事实上不得不承认：我们习惯于将现在当作是过去历史的结果，用历史去解释未来，但事实上，现在就是未来的原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今日冬至，晒太阳翻了翻&lt;&lt;鸟哥的Linux入门&gt;&gt;，通读了一遍，了解结构为后续学习挑出主次。中午找S交谈OpenGL相关问题，当然不止于此。有几点收获:<br>1, 学习底层知识，少学习容易过时的知识。我引用Quora上得到的回答，对自己目前的状态做一个反思:”Are you good at object-oriented programming? C? The Unix tools? Have you taken discrete math? A course in computer systems?”<br>2, 不轻易做一个计划，做一个计划不轻易放弃。我对什么事情都感兴趣，什么都想玩一玩，但是如果不把一项技术学精，虎头蛇尾，是一种空言壮志的表现。S举例了我从GH, Python, 计算几何, C++, Flask, OpenGL等计划, 当然我知道还有其他, 说明我容易循着一条轨迹向下寻溯。但时未兴，我无法准确判断计划的可靠性。<br>3, 不把当下决定看得太重。对于那些无所事事的人，他们要减少对时间的浪费;对于我，浪费的时间反而有意义的。浪费与否，学习哪条方向, 都是一种经历。不能陷入到对未知的结果的忧虑当中去，要承认对未知的复杂性。<br>4, 捡最近的镜子。满地镜子看花眼睛时候，找最近的镜子。对S来说，数字化的最近镜子是学生；他如此提醒我，想必是要说，我最近的镜子，应该是我的同学和S。但是什么是技术的最近的镜子呢？数据结构，图形，游戏。也许。</p>\n<p>冬至夜， 按照去年留下的习俗， 和朋友约一起煮火锅下水饺和汤圆。吃得也饱，聊得也欢快。</p>\n<p>其他人陆陆续续的去忙别的事情，只剩下X，H和我。话题的起因是老生常谈，女孩。我看上去是个优胜者，他们两个向我请教。给出了一些符合xu逻辑的方法,<br>1, 列出关于学校集体活动的一个list;<br>2, 将每个活动的具体形式考量一遍;<br>3, 加入该活动的方式;<br>4, 可能会出现的几个状况;<br>5, 综合考量后排序挑选前5个活动参加。<br>因为，前前后后也跟X讲了好多次，没有什么实际行动，我想，问题可能出在，我总是讲具体跟女孩的交流方式，其实这是因人而异的，刻意的追求结果未必是好。但作为前馈数据，需要的大概是接触到更多人的环境，让他自己在这个环境中摸爬。希望这大概能够好些。</p>\n<p>聊完这个，便聊第二个老生常谈，但并未透彻的话题，体制。重新思考话题展开的原因相对来说比较有意义，是探索一种启蒙的模型。这个话题能够展开，总得来讲，出于对当下以及未来的困惑，我尝试分开来讲几点原因，<br>1, 计算机科学自下而上的思维模式，撼动原有的自上而下的体系。这其中差异，看上去是从技术角度出发，却渗透到经济，结构，体制，文化，人性等各个方面。<br>2, 怀有对资社的不充分理解和想要探求的心理状态。<br>3, 评论和试图解决遇到的问题，寻求一种生活的模型。</p>\n<p>X先提出了对该体制是否会倒塌的质疑，我觉得这个问题好回答，但也不好回答，确实凭借我的认知还无法解释清楚，能够解释清楚的人大多也都别有用心。我但是从我的数据库中索引出来一些，但凌晨四点睡去醒来后，又作了些思考。</p>\n<p>人一般走上畸路的过程分成几个阶段，先是犯错误，错误带来不良后果，判断他没救的依据是，依旧不改正错误，后果没得到解决。道理是相同的。</p>\n<p>错误性体现在，社会主义相对于资本主义的乌托邦本质。共产主义，当财富是大家共有的时候，谁来决定财富的分配？能够决定分配的人，势必会有权力。如果该掌权者是一个大公无私的，理性智慧的人，大家能够得到平等的分配。这看上去很对，能够实现。但却忽略了一个关键的事实，人性是有阴暗面的，是有私心的。这种私心若是顺其自然的发展，以共同利益为由，是能够孕育出灿烂果实的；有趣的是，但若想消除这种私心，这种私心就被放大了，因为看上去大家都不存在私心了，但消除别人私心的行为本身就是一种私心，说这是私心温和了些，应该说是恶，然而这种恶会被不断的累积和放大，因此，在最高位置上的伟大领袖，或许并非那么伟大。</p>\n<p>那么后果是什么？总体上讲是系统内耗造成的资源短缺。这种框架下，势必一切会向权力看。人们会为了生存而追求利益，而追求利益的竞争在这个情况下，又转变成了为追逐权力而努力竞争。值得一提的是，生存是第一要义。竞争是必要的，但除了竞争之外还有合作；利益是必要的，但除了利益之外还有共同利益；追逐地位是必要的，但地位的来源不是唯一的来自于权力和财富。</p>\n<p>这种追求利益的方式，产生了第一种后果，其实就是系统内耗。拿我熟悉的高等教育举例子，真正想做科研的教授，他势必不想将时间浪费在这一内耗上，但是不进行这种内耗他便得不到科研经费，科研没有开始就已经结束。然而，也许有人会说，教授你只要忍受一下，便可以开始真正的科研，但事实情况是这样:1, 一旦进行了一次这样的内耗，他会找你第二次; 2, 要记住，这是在进行权力的斗争，如果你做的研究是你的上一级无法控制的，他会对你起疑心；如果你的研究是上一级可以控制的，他会把你的研究为他所用作为自己权力斗争的筹码。也就是说，在这种机制的情况下，他是逆向淘汰的，有科研能力的人，被最终的边缘化。</p>\n<p>第二种后果便是，内耗之后，是对系统资源的严重浪费。这个问题在各行各业各个单位普遍都是存在，且按照中共逻辑来说是正常的。权力的斗争中，可不像我在计算机上写代码一样，他有很多区别，但仍然可以用计算机的角度来解释。</p>\n<p>1, 区别在于，建立一个模型，跑一跑数据资源，出错了；重新建立一个模型，再跑一跑。但现实世界中，没人会给我们这个机会。地下水就是地下水，矿产就是矿产，森林就是森林，不多不少就放在这里，终究竭尽。</p>\n<p>2, 用计算机的角度解释就是说， 上述所说的权力斗争，导致创新能力低下，经济对重工业的依赖性强，资源的消耗速度快。也就是，没有优秀的算法，数据结构选择又不合理，内存管理又不做，建立模型后，冗余运算大，结果是消耗了很多资源，却写了个破程序，还要把时间花在无止尽的debug上。之后也会相应解释。</p>\n<p>那么，错误是否被改正？这其实是个相对较伪命题，这个问题上我们翻过很多次跟斗，共党把他们最信任的，工人骗了，学生骗了，农民也骗了。只要认识到乌托邦的本质，就能够得出结论，他不无法被改正的。如果说要从计划经济走向市场经济，原因是有了权力之后就要用权力去换取财富。十年寒窗是为了什么？更何况12年苦读之后，换来的是更鲜艳的红旗。拿建筑学的建模软件来说，如果sketchUp开源底层代码了，那它还是sketchUp吗？还是叫sketchDown?</p>\n<p>后果是否得到解决呢？对应的，当我写错一个程序的时候，我可能会把他扔掉，甚至说从一开始我就应该谨慎设计一个程序，那样就不至于后面一大堆麻烦。 政府官员需要权力斗争的筹码，这些筹码要从白手套，也就是商人那里得到，企业发展势会消耗资源，在资本主义中这种消耗是良性的，因为商人为了自身利益出发，要考虑一种相对长远的发展，商人就会去选择新的技术，投资新的研发，考虑如何合理分配现有资源，因为他们的资本决定了他们的相对自由。然而，在天朝，权力斗争是激烈的，对筹码的欲望是贪婪的，商人是被迫无奈如妓女似的，环境？资源？这种考虑是可能只会是在某个失眠的夜晚发问内心，然而事实上却是不会存在的，而这种对内心的发问，又会用另外一种形式去完成对内心的救赎。只有这种发展不可持续，才会提出可持续发展观。同理，只有在素质低下的国家，才会提出乐于助人般的口号，提出共识，就先不展开了。</p>\n<p>天朝统治者和民众一起，在追求结果的平等的过程中，必然造成了过程的不平等，而统治者享受到了不平等的高点，低点留给民众享受。然而他们真的是在高点了吗？领袖足够了吗？常委们幸福吗？首富们的日子好过吗？共产主义马克思是cancer, 把白的黑的都卷入了这场漩涡中，无法脱身。但是cancer现在有医治手段了吗？上帝会像看着一个犯错的孩子一样看着我们，他终究还是宽容的吧，他会“给岁月以文明，而不是给文明以岁月”的吧，中华民族还要在时间中被消耗迭代，但他终归还是坚强的吧。即使，有的人选择在别人将他逼疯之前先逼疯了自己，但他们还是坚强无比的吧。</p>\n<p>我们很多人不承认，但事实上不得不承认：我们习惯于将现在当作是过去历史的结果，用历史去解释未来，但事实上，现在就是未来的原因。</p>\n"},{"title":"添加git bash到右键菜单","date":"2017-11-23T03:52:34.000Z","_content":"\n## issue:\n\n因为.git文件所在的目录如下：\n> C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d\n\n当在bash中cd到该目录时：\n```\n$ cd C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d\nbash: syntax error near unexpected token `('\n```\n试图通过右键进入bash\n\n## hack:\n\n> 1. CMD中输入\"regedit\"\n> 2. 切换到 HKEY_CURRENT_USER\\SOFTWARE\\Classes\\Directory\\Background\\shell\n> 3. 右键点击 \"shell\" 选择 New > Key. 将KEY命名为 \"Bash\"\n> 4. 设置值为 \"open in Bash\" \n> 5. 创建一个新的KEY命名为\"command\". 设置值为git-bash.exe 路径.\n\n此时在文件夹中右键, 出现Open in bash选项.\n\n以上为通过注册表添加bash到右键的方法，但还是建议重装git\n\n------\n\nreference:\n[1]: https://www.zhihu.com/question/48091139 @轩辕Rowboat的回答\n","source":"_posts/add-git-bash-to-right-click-menu.md","raw":"---\ntitle: 添加git bash到右键菜单 \ndate: 2017-11-23 11:52:34\ntags:\n- git\n---\n\n## issue:\n\n因为.git文件所在的目录如下：\n> C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d\n\n当在bash中cd到该目录时：\n```\n$ cd C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d\nbash: syntax error near unexpected token `('\n```\n试图通过右键进入bash\n\n## hack:\n\n> 1. CMD中输入\"regedit\"\n> 2. 切换到 HKEY_CURRENT_USER\\SOFTWARE\\Classes\\Directory\\Background\\shell\n> 3. 右键点击 \"shell\" 选择 New > Key. 将KEY命名为 \"Bash\"\n> 4. 设置值为 \"open in Bash\" \n> 5. 创建一个新的KEY命名为\"command\". 设置值为git-bash.exe 路径.\n\n此时在文件夹中右键, 出现Open in bash选项.\n\n以上为通过注册表添加bash到右键的方法，但还是建议重装git\n\n------\n\nreference:\n[1]: https://www.zhihu.com/question/48091139 @轩辕Rowboat的回答\n","slug":"add-git-bash-to-right-click-menu","published":1,"updated":"2017-12-20T02:49:10.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukure0005fadrtjh1y06z","content":"<h2 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue:\"></a>issue:</h2><p>因为.git文件所在的目录如下：</p>\n<blockquote>\n<p>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d</p>\n</blockquote>\n<p>当在bash中cd到该目录时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d</span><br><span class=\"line\">bash: syntax error near unexpected token `(&apos;</span><br></pre></td></tr></table></figure></p>\n<p>试图通过右键进入bash</p>\n<h2 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack:\"></a>hack:</h2><blockquote>\n<ol>\n<li>CMD中输入”regedit”</li>\n<li>切换到 HKEY_CURRENT_USER\\SOFTWARE\\Classes\\Directory\\Background\\shell</li>\n<li>右键点击 “shell” 选择 New &gt; Key. 将KEY命名为 “Bash”</li>\n<li>设置值为 “open in Bash” </li>\n<li>创建一个新的KEY命名为”command”. 设置值为git-bash.exe 路径.</li>\n</ol>\n</blockquote>\n<p>此时在文件夹中右键, 出现Open in bash选项.</p>\n<p>以上为通过注册表添加bash到右键的方法，但还是建议重装git</p>\n<hr>\n<p>reference:<br>[1]: <a href=\"https://www.zhihu.com/question/48091139\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/48091139</a> @轩辕Rowboat的回答</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue:\"></a>issue:</h2><p>因为.git文件所在的目录如下：</p>\n<blockquote>\n<p>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d</p>\n</blockquote>\n<p>当在bash中cd到该目录时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\d3d</span><br><span class=\"line\">bash: syntax error near unexpected token `(&apos;</span><br></pre></td></tr></table></figure></p>\n<p>试图通过右键进入bash</p>\n<h2 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack:\"></a>hack:</h2><blockquote>\n<ol>\n<li>CMD中输入”regedit”</li>\n<li>切换到 HKEY_CURRENT_USER\\SOFTWARE\\Classes\\Directory\\Background\\shell</li>\n<li>右键点击 “shell” 选择 New &gt; Key. 将KEY命名为 “Bash”</li>\n<li>设置值为 “open in Bash” </li>\n<li>创建一个新的KEY命名为”command”. 设置值为git-bash.exe 路径.</li>\n</ol>\n</blockquote>\n<p>此时在文件夹中右键, 出现Open in bash选项.</p>\n<p>以上为通过注册表添加bash到右键的方法，但还是建议重装git</p>\n<hr>\n<p>reference:<br>[1]: <a href=\"https://www.zhihu.com/question/48091139\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/48091139</a> @轩辕Rowboat的回答</p>\n"},{"title":"DirectX9.0 notes 1.3 预备知识","date":"2017-11-22T13:55:41.000Z","_content":"\n### 深度缓存(depth buffer)\n\n> 定义: 一个含有特定像素的深度信息而不含图像数据的表面。\n  用于计算每个像素而定深度值并进行深度测试: 让处于同一位置的不同像素进行竞争，选出应写入该位置的像素。距离摄像机最近的像素获胜。\n  深度缓存格式决定深度测试精度, 精度度 16位<24位<32位, 一般选择24位满足效果\n\n> * D3DFMT_D32         32位深度缓存\n> * D3DFMT_D23S8       24位深度缓存, 其中8位保留供模板缓存(stencil buffer)[1]使用\n> * D3DFMT_D24X8       24位深度缓存\n> * D3DFMT_D16         16位深度缓存\n\n### 顶点运算(Vertex Processing)\n\n> * 软件顶点运算(software vertex process)\n> * 硬件顶点运算(harfware ...)\n\n软件顶点运算 ** 总是会被支持 ** , 硬件只有得到图形卡的支持才可使用。\n\n优先考虑硬件顶点运算方式，理由：\n> 1. 使用的硬件可能有加速功能\n> 2. 可以不占用CPU， CPU可被解放出来进行其他运算\n\n### 设备性能(Device Capabilities)\n\nDeCaps 表示\"Device Capabilities\"\nD3DCAP9::DevCaps的D3DDEVCAPS_HWTYRANSFORMANDLIGHT 可用来表示设备是否支持变换和光照的硬件计算。\n多查阅D3DCAP9相关的SDK文档, 继续研究一下Directt3D所提供能够设备性能的完整列表。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] : 18章论述\n","source":"_posts/d3d-preparation.md","raw":"---\ntitle: DirectX9.0 notes 1.3 预备知识\ndate: 2017-11-22 21:55:41\ntags:\n- DirectX\n- Games\n\n---\n\n### 深度缓存(depth buffer)\n\n> 定义: 一个含有特定像素的深度信息而不含图像数据的表面。\n  用于计算每个像素而定深度值并进行深度测试: 让处于同一位置的不同像素进行竞争，选出应写入该位置的像素。距离摄像机最近的像素获胜。\n  深度缓存格式决定深度测试精度, 精度度 16位<24位<32位, 一般选择24位满足效果\n\n> * D3DFMT_D32         32位深度缓存\n> * D3DFMT_D23S8       24位深度缓存, 其中8位保留供模板缓存(stencil buffer)[1]使用\n> * D3DFMT_D24X8       24位深度缓存\n> * D3DFMT_D16         16位深度缓存\n\n### 顶点运算(Vertex Processing)\n\n> * 软件顶点运算(software vertex process)\n> * 硬件顶点运算(harfware ...)\n\n软件顶点运算 ** 总是会被支持 ** , 硬件只有得到图形卡的支持才可使用。\n\n优先考虑硬件顶点运算方式，理由：\n> 1. 使用的硬件可能有加速功能\n> 2. 可以不占用CPU， CPU可被解放出来进行其他运算\n\n### 设备性能(Device Capabilities)\n\nDeCaps 表示\"Device Capabilities\"\nD3DCAP9::DevCaps的D3DDEVCAPS_HWTYRANSFORMANDLIGHT 可用来表示设备是否支持变换和光照的硬件计算。\n多查阅D3DCAP9相关的SDK文档, 继续研究一下Directt3D所提供能够设备性能的完整列表。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] : 18章论述\n","slug":"d3d-preparation","published":1,"updated":"2017-12-20T02:49:10.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukurg0006fadr05w98sso","content":"<h3 id=\"深度缓存-depth-buffer\"><a href=\"#深度缓存-depth-buffer\" class=\"headerlink\" title=\"深度缓存(depth buffer)\"></a>深度缓存(depth buffer)</h3><blockquote>\n<p>定义: 一个含有特定像素的深度信息而不含图像数据的表面。<br>  用于计算每个像素而定深度值并进行深度测试: 让处于同一位置的不同像素进行竞争，选出应写入该位置的像素。距离摄像机最近的像素获胜。<br>  深度缓存格式决定深度测试精度, 精度度 16位&lt;24位&lt;32位, 一般选择24位满足效果</p>\n<ul>\n<li>D3DFMT_D32         32位深度缓存</li>\n<li>D3DFMT_D23S8       24位深度缓存, 其中8位保留供模板缓存(stencil buffer)[1]使用</li>\n<li>D3DFMT_D24X8       24位深度缓存</li>\n<li>D3DFMT_D16         16位深度缓存</li>\n</ul>\n</blockquote>\n<h3 id=\"顶点运算-Vertex-Processing\"><a href=\"#顶点运算-Vertex-Processing\" class=\"headerlink\" title=\"顶点运算(Vertex Processing)\"></a>顶点运算(Vertex Processing)</h3><blockquote>\n<ul>\n<li>软件顶点运算(software vertex process)</li>\n<li>硬件顶点运算(harfware …)</li>\n</ul>\n</blockquote>\n<p>软件顶点运算 <strong> 总是会被支持 </strong> , 硬件只有得到图形卡的支持才可使用。</p>\n<p>优先考虑硬件顶点运算方式，理由：</p>\n<blockquote>\n<ol>\n<li>使用的硬件可能有加速功能</li>\n<li>可以不占用CPU， CPU可被解放出来进行其他运算</li>\n</ol>\n</blockquote>\n<h3 id=\"设备性能-Device-Capabilities\"><a href=\"#设备性能-Device-Capabilities\" class=\"headerlink\" title=\"设备性能(Device Capabilities)\"></a>设备性能(Device Capabilities)</h3><p>DeCaps 表示”Device Capabilities”<br>D3DCAP9::DevCaps的D3DDEVCAPS_HWTYRANSFORMANDLIGHT 可用来表示设备是否支持变换和光照的硬件计算。<br>多查阅D3DCAP9相关的SDK文档, 继续研究一下Directt3D所提供能够设备性能的完整列表。</p>\n<p>[1] : 18章论述</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"深度缓存-depth-buffer\"><a href=\"#深度缓存-depth-buffer\" class=\"headerlink\" title=\"深度缓存(depth buffer)\"></a>深度缓存(depth buffer)</h3><blockquote>\n<p>定义: 一个含有特定像素的深度信息而不含图像数据的表面。<br>  用于计算每个像素而定深度值并进行深度测试: 让处于同一位置的不同像素进行竞争，选出应写入该位置的像素。距离摄像机最近的像素获胜。<br>  深度缓存格式决定深度测试精度, 精度度 16位&lt;24位&lt;32位, 一般选择24位满足效果</p>\n<ul>\n<li>D3DFMT_D32         32位深度缓存</li>\n<li>D3DFMT_D23S8       24位深度缓存, 其中8位保留供模板缓存(stencil buffer)[1]使用</li>\n<li>D3DFMT_D24X8       24位深度缓存</li>\n<li>D3DFMT_D16         16位深度缓存</li>\n</ul>\n</blockquote>\n<h3 id=\"顶点运算-Vertex-Processing\"><a href=\"#顶点运算-Vertex-Processing\" class=\"headerlink\" title=\"顶点运算(Vertex Processing)\"></a>顶点运算(Vertex Processing)</h3><blockquote>\n<ul>\n<li>软件顶点运算(software vertex process)</li>\n<li>硬件顶点运算(harfware …)</li>\n</ul>\n</blockquote>\n<p>软件顶点运算 <strong> 总是会被支持 </strong> , 硬件只有得到图形卡的支持才可使用。</p>\n<p>优先考虑硬件顶点运算方式，理由：</p>\n<blockquote>\n<ol>\n<li>使用的硬件可能有加速功能</li>\n<li>可以不占用CPU， CPU可被解放出来进行其他运算</li>\n</ol>\n</blockquote>\n<h3 id=\"设备性能-Device-Capabilities\"><a href=\"#设备性能-Device-Capabilities\" class=\"headerlink\" title=\"设备性能(Device Capabilities)\"></a>设备性能(Device Capabilities)</h3><p>DeCaps 表示”Device Capabilities”<br>D3DCAP9::DevCaps的D3DDEVCAPS_HWTYRANSFORMANDLIGHT 可用来表示设备是否支持变换和光照的硬件计算。<br>多查阅D3DCAP9相关的SDK文档, 继续研究一下Directt3D所提供能够设备性能的完整列表。</p>\n<p>[1] : 18章论述</p>\n"},{"title":"关于文档学习方法和图形学学习的随想","date":"2017-12-28T12:59:50.000Z","_content":"\n上篇笔记[OpenGL绘制三角形附练习](http://timtingwei.github.io/2017/12/25/hello-triangle-three-execises/)来来回回写了三天，当然，除了学习外，我还去练习了网球，还去参加了一次grasshopper草猛歌会；学习openGL之外，我同时在学习dsa, 看了云风的`<<游戏之旅>>`， 查阅了OpenGL与图形引擎的相关资料, \n\n## BLOG整理文档学习方法\n从云风的书中偶得一段话，\n\n`学习新的技术，翻译一本相关的英语著作可以算是捷径。`\n> * 比囫囵吞枣的读一遍英文原文要有效的多。\n> * 因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。\n> * 即使对此有所了解，翻译后也能更上一层楼。\n> * 英语水平也会提高。\n\n`发现产生了一些共鸣。`\n其中之一，是之前学习Grasshooper的一段经历，我学grasshopper已经是0.76版本了, NCF那一批人开始学习也是10左右的事情了，那个时候他们组织学运算器的方式也跟这个很相似，就是翻译Help, 所以有了`<<grasshopper运算器手册>>`一书。不知道是否这种是共通的？还是因为他们中也有程序员，亦或者是因为grasshopper变成了程序爱好者，理解了这种方式？\n\n之二是石老师推荐学生翻译`<<Form Space & Order>>, <<Parten Language>>, <<A New Kind of Science>>`等书来学习数字化技术。\n\n我自己也享受到了这些方法的好处，现在又被云风清晰说出了那种模糊的感觉。便开始尝试在写笔记的时候，结合着文档理解下函数原理，并把它们用心整理好。这也是最近开始写博客来的好处，虽然之前一直用evernote记笔记写日记，但是用一种这是要整理给别人看的心态去做一件事情，效果便也很不同，总之这对于技术学习来说是很好的。\n\n## 图形学学习\n\n另外，这几天在跟着OpenGL的教程学习，开始对OpenGL和图形学有了模糊的认识：\n> * 图形学是研究用计算机如果画出一个图像的学科。\n> * OpenGL教程会教我如何去用封装代码去渲染一个场景，以及背后没展开的图形学原理。\n> * 他的封装性，与我原来想象的能够研究一些与计算几何相关的图形问题算法有较大出入。\n> * 但是学习封装性能够让我先去了解一个大概，以及算法的具体应用性，等到发现其中核心算法的学习路径，开始学习也为时不晚，一是对图形学有了些理解，二是明白各自使用方向，三是dsa的课程也是那些算法实现的前提，四是每天都能够编写C++找到乐趣和问题。\n\n下面是摘自 <span style=\"color:red\">**Milo Yip**</span> 叶神在[知乎](https://www.zhihu.com/question/24786878)上的回答，要借鉴这个学习轨迹, 并以此勉励自己：\n\n`如何开始用 C++ 写一个光栅化渲染器？`\n\n**Milo Yip**\n计算机图形学、编程、C++ 等 7 个话题的优秀回答者\n228 人赞同了该回答\n@空明流转 开发过高大上的SALVIA， @Yong He 则提到了Larrabee。我来提供另一些观点。\n\n首先，如果从学习角度出发，不必一开始完全根据现时GPU的架构及概念，来用软件复制一遍。现时的GPU主要是基于三角形光栅化及z-buffer。\n\n如果我们从图形学的历史进程来学习，可以这样做练习：\n\n2D部分：\n> 1, 光栅化2D点（就是在二维数组上画点，了解色彩基本原理，并解决影像输出问题）\n> 2, 光栅化2D直线（布雷森漢姆直線演算法、吴小林直线算法等）\n> 3, 2D直线的剪切算法（见Line clipping）\n> 4, 光栅化2D三角形（scan conversion）。避免重复光栅化相邻三角形边界的像素（edge equation）。\n> 5, 光栅化简单／复杂多边形\n3D部分：\n> 1, 把顶点从三维世界空间变换至二维屏幕空间，绘画顶点（如银河星系数据），操控摄像机旋转模型。\n> 2, 在剪切空间进行3D直线的剪切算法，把顶点连线（如各种三维正多面体）光栅化成wire frame模型\n> 3, 以多边形来定义三维模型。使用画家算法来光栅化那些多边形。\n> 改为使用深度缓冲。\n> 4, 实现简单的纹理映射，先做屏幕空间的插值，然后实现简单的perspective-correct texture mapping。\n> 5, 实现简单的顶点光照，使用顶点颜色插值实现Gouraud shading。\n> 6, 通过顶点法线插值，实现Phong shading。\n> 7, 实现其他贴图技术，如mipmapping（也可试Summed area table）、bilinear/trilinear filtering、bump mapping、normal mapping、environment mapping等。\n\n","source":"_posts/doc-computer-graphic-learn.md","raw":"---\ntitle: 关于文档学习方法和图形学学习的随想\ndate: 2017-12-28 20:59:50\ntags: [图形学, OpenGL, 读书, 随想, 方法论, 引擎]\n---\n\n上篇笔记[OpenGL绘制三角形附练习](http://timtingwei.github.io/2017/12/25/hello-triangle-three-execises/)来来回回写了三天，当然，除了学习外，我还去练习了网球，还去参加了一次grasshopper草猛歌会；学习openGL之外，我同时在学习dsa, 看了云风的`<<游戏之旅>>`， 查阅了OpenGL与图形引擎的相关资料, \n\n## BLOG整理文档学习方法\n从云风的书中偶得一段话，\n\n`学习新的技术，翻译一本相关的英语著作可以算是捷径。`\n> * 比囫囵吞枣的读一遍英文原文要有效的多。\n> * 因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。\n> * 即使对此有所了解，翻译后也能更上一层楼。\n> * 英语水平也会提高。\n\n`发现产生了一些共鸣。`\n其中之一，是之前学习Grasshooper的一段经历，我学grasshopper已经是0.76版本了, NCF那一批人开始学习也是10左右的事情了，那个时候他们组织学运算器的方式也跟这个很相似，就是翻译Help, 所以有了`<<grasshopper运算器手册>>`一书。不知道是否这种是共通的？还是因为他们中也有程序员，亦或者是因为grasshopper变成了程序爱好者，理解了这种方式？\n\n之二是石老师推荐学生翻译`<<Form Space & Order>>, <<Parten Language>>, <<A New Kind of Science>>`等书来学习数字化技术。\n\n我自己也享受到了这些方法的好处，现在又被云风清晰说出了那种模糊的感觉。便开始尝试在写笔记的时候，结合着文档理解下函数原理，并把它们用心整理好。这也是最近开始写博客来的好处，虽然之前一直用evernote记笔记写日记，但是用一种这是要整理给别人看的心态去做一件事情，效果便也很不同，总之这对于技术学习来说是很好的。\n\n## 图形学学习\n\n另外，这几天在跟着OpenGL的教程学习，开始对OpenGL和图形学有了模糊的认识：\n> * 图形学是研究用计算机如果画出一个图像的学科。\n> * OpenGL教程会教我如何去用封装代码去渲染一个场景，以及背后没展开的图形学原理。\n> * 他的封装性，与我原来想象的能够研究一些与计算几何相关的图形问题算法有较大出入。\n> * 但是学习封装性能够让我先去了解一个大概，以及算法的具体应用性，等到发现其中核心算法的学习路径，开始学习也为时不晚，一是对图形学有了些理解，二是明白各自使用方向，三是dsa的课程也是那些算法实现的前提，四是每天都能够编写C++找到乐趣和问题。\n\n下面是摘自 <span style=\"color:red\">**Milo Yip**</span> 叶神在[知乎](https://www.zhihu.com/question/24786878)上的回答，要借鉴这个学习轨迹, 并以此勉励自己：\n\n`如何开始用 C++ 写一个光栅化渲染器？`\n\n**Milo Yip**\n计算机图形学、编程、C++ 等 7 个话题的优秀回答者\n228 人赞同了该回答\n@空明流转 开发过高大上的SALVIA， @Yong He 则提到了Larrabee。我来提供另一些观点。\n\n首先，如果从学习角度出发，不必一开始完全根据现时GPU的架构及概念，来用软件复制一遍。现时的GPU主要是基于三角形光栅化及z-buffer。\n\n如果我们从图形学的历史进程来学习，可以这样做练习：\n\n2D部分：\n> 1, 光栅化2D点（就是在二维数组上画点，了解色彩基本原理，并解决影像输出问题）\n> 2, 光栅化2D直线（布雷森漢姆直線演算法、吴小林直线算法等）\n> 3, 2D直线的剪切算法（见Line clipping）\n> 4, 光栅化2D三角形（scan conversion）。避免重复光栅化相邻三角形边界的像素（edge equation）。\n> 5, 光栅化简单／复杂多边形\n3D部分：\n> 1, 把顶点从三维世界空间变换至二维屏幕空间，绘画顶点（如银河星系数据），操控摄像机旋转模型。\n> 2, 在剪切空间进行3D直线的剪切算法，把顶点连线（如各种三维正多面体）光栅化成wire frame模型\n> 3, 以多边形来定义三维模型。使用画家算法来光栅化那些多边形。\n> 改为使用深度缓冲。\n> 4, 实现简单的纹理映射，先做屏幕空间的插值，然后实现简单的perspective-correct texture mapping。\n> 5, 实现简单的顶点光照，使用顶点颜色插值实现Gouraud shading。\n> 6, 通过顶点法线插值，实现Phong shading。\n> 7, 实现其他贴图技术，如mipmapping（也可试Summed area table）、bilinear/trilinear filtering、bump mapping、normal mapping、environment mapping等。\n\n","slug":"doc-computer-graphic-learn","published":1,"updated":"2017-12-28T13:05:39.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukuri0007fadr30rr7drh","content":"<p>上篇笔记<a href=\"http://timtingwei.github.io/2017/12/25/hello-triangle-three-execises/\">OpenGL绘制三角形附练习</a>来来回回写了三天，当然，除了学习外，我还去练习了网球，还去参加了一次grasshopper草猛歌会；学习openGL之外，我同时在学习dsa, 看了云风的<code>&lt;&lt;游戏之旅&gt;&gt;</code>， 查阅了OpenGL与图形引擎的相关资料, </p>\n<h2 id=\"BLOG整理文档学习方法\"><a href=\"#BLOG整理文档学习方法\" class=\"headerlink\" title=\"BLOG整理文档学习方法\"></a>BLOG整理文档学习方法</h2><p>从云风的书中偶得一段话，</p>\n<p><code>学习新的技术，翻译一本相关的英语著作可以算是捷径。</code></p>\n<blockquote>\n<ul>\n<li>比囫囵吞枣的读一遍英文原文要有效的多。</li>\n<li>因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。</li>\n<li>即使对此有所了解，翻译后也能更上一层楼。</li>\n<li>英语水平也会提高。</li>\n</ul>\n</blockquote>\n<p><code>发现产生了一些共鸣。</code><br>其中之一，是之前学习Grasshooper的一段经历，我学grasshopper已经是0.76版本了, NCF那一批人开始学习也是10左右的事情了，那个时候他们组织学运算器的方式也跟这个很相似，就是翻译Help, 所以有了<code>&lt;&lt;grasshopper运算器手册&gt;&gt;</code>一书。不知道是否这种是共通的？还是因为他们中也有程序员，亦或者是因为grasshopper变成了程序爱好者，理解了这种方式？</p>\n<p>之二是石老师推荐学生翻译<code>&lt;&lt;Form Space &amp; Order&gt;&gt;, &lt;&lt;Parten Language&gt;&gt;, &lt;&lt;A New Kind of Science&gt;&gt;</code>等书来学习数字化技术。</p>\n<p>我自己也享受到了这些方法的好处，现在又被云风清晰说出了那种模糊的感觉。便开始尝试在写笔记的时候，结合着文档理解下函数原理，并把它们用心整理好。这也是最近开始写博客来的好处，虽然之前一直用evernote记笔记写日记，但是用一种这是要整理给别人看的心态去做一件事情，效果便也很不同，总之这对于技术学习来说是很好的。</p>\n<h2 id=\"图形学学习\"><a href=\"#图形学学习\" class=\"headerlink\" title=\"图形学学习\"></a>图形学学习</h2><p>另外，这几天在跟着OpenGL的教程学习，开始对OpenGL和图形学有了模糊的认识：</p>\n<blockquote>\n<ul>\n<li>图形学是研究用计算机如果画出一个图像的学科。</li>\n<li>OpenGL教程会教我如何去用封装代码去渲染一个场景，以及背后没展开的图形学原理。</li>\n<li>他的封装性，与我原来想象的能够研究一些与计算几何相关的图形问题算法有较大出入。</li>\n<li>但是学习封装性能够让我先去了解一个大概，以及算法的具体应用性，等到发现其中核心算法的学习路径，开始学习也为时不晚，一是对图形学有了些理解，二是明白各自使用方向，三是dsa的课程也是那些算法实现的前提，四是每天都能够编写C++找到乐趣和问题。</li>\n</ul>\n</blockquote>\n<p>下面是摘自 <span style=\"color:red\"><strong>Milo Yip</strong></span> 叶神在<a href=\"https://www.zhihu.com/question/24786878\" target=\"_blank\" rel=\"noopener\">知乎</a>上的回答，要借鉴这个学习轨迹, 并以此勉励自己：</p>\n<p><code>如何开始用 C++ 写一个光栅化渲染器？</code></p>\n<p><strong>Milo Yip</strong><br>计算机图形学、编程、C++ 等 7 个话题的优秀回答者<br>228 人赞同了该回答<br>@空明流转 开发过高大上的SALVIA， @Yong He 则提到了Larrabee。我来提供另一些观点。</p>\n<p>首先，如果从学习角度出发，不必一开始完全根据现时GPU的架构及概念，来用软件复制一遍。现时的GPU主要是基于三角形光栅化及z-buffer。</p>\n<p>如果我们从图形学的历史进程来学习，可以这样做练习：</p>\n<p>2D部分：</p>\n<blockquote>\n<p>1, 光栅化2D点（就是在二维数组上画点，了解色彩基本原理，并解决影像输出问题）<br>2, 光栅化2D直线（布雷森漢姆直線演算法、吴小林直线算法等）<br>3, 2D直线的剪切算法（见Line clipping）<br>4, 光栅化2D三角形（scan conversion）。避免重复光栅化相邻三角形边界的像素（edge equation）。<br>5, 光栅化简单／复杂多边形<br>3D部分：<br>1, 把顶点从三维世界空间变换至二维屏幕空间，绘画顶点（如银河星系数据），操控摄像机旋转模型。<br>2, 在剪切空间进行3D直线的剪切算法，把顶点连线（如各种三维正多面体）光栅化成wire frame模型<br>3, 以多边形来定义三维模型。使用画家算法来光栅化那些多边形。<br>改为使用深度缓冲。<br>4, 实现简单的纹理映射，先做屏幕空间的插值，然后实现简单的perspective-correct texture mapping。<br>5, 实现简单的顶点光照，使用顶点颜色插值实现Gouraud shading。<br>6, 通过顶点法线插值，实现Phong shading。<br>7, 实现其他贴图技术，如mipmapping（也可试Summed area table）、bilinear/trilinear filtering、bump mapping、normal mapping、environment mapping等。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>上篇笔记<a href=\"http://timtingwei.github.io/2017/12/25/hello-triangle-three-execises/\">OpenGL绘制三角形附练习</a>来来回回写了三天，当然，除了学习外，我还去练习了网球，还去参加了一次grasshopper草猛歌会；学习openGL之外，我同时在学习dsa, 看了云风的<code>&lt;&lt;游戏之旅&gt;&gt;</code>， 查阅了OpenGL与图形引擎的相关资料, </p>\n<h2 id=\"BLOG整理文档学习方法\"><a href=\"#BLOG整理文档学习方法\" class=\"headerlink\" title=\"BLOG整理文档学习方法\"></a>BLOG整理文档学习方法</h2><p>从云风的书中偶得一段话，</p>\n<p><code>学习新的技术，翻译一本相关的英语著作可以算是捷径。</code></p>\n<blockquote>\n<ul>\n<li>比囫囵吞枣的读一遍英文原文要有效的多。</li>\n<li>因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。</li>\n<li>即使对此有所了解，翻译后也能更上一层楼。</li>\n<li>英语水平也会提高。</li>\n</ul>\n</blockquote>\n<p><code>发现产生了一些共鸣。</code><br>其中之一，是之前学习Grasshooper的一段经历，我学grasshopper已经是0.76版本了, NCF那一批人开始学习也是10左右的事情了，那个时候他们组织学运算器的方式也跟这个很相似，就是翻译Help, 所以有了<code>&lt;&lt;grasshopper运算器手册&gt;&gt;</code>一书。不知道是否这种是共通的？还是因为他们中也有程序员，亦或者是因为grasshopper变成了程序爱好者，理解了这种方式？</p>\n<p>之二是石老师推荐学生翻译<code>&lt;&lt;Form Space &amp; Order&gt;&gt;, &lt;&lt;Parten Language&gt;&gt;, &lt;&lt;A New Kind of Science&gt;&gt;</code>等书来学习数字化技术。</p>\n<p>我自己也享受到了这些方法的好处，现在又被云风清晰说出了那种模糊的感觉。便开始尝试在写笔记的时候，结合着文档理解下函数原理，并把它们用心整理好。这也是最近开始写博客来的好处，虽然之前一直用evernote记笔记写日记，但是用一种这是要整理给别人看的心态去做一件事情，效果便也很不同，总之这对于技术学习来说是很好的。</p>\n<h2 id=\"图形学学习\"><a href=\"#图形学学习\" class=\"headerlink\" title=\"图形学学习\"></a>图形学学习</h2><p>另外，这几天在跟着OpenGL的教程学习，开始对OpenGL和图形学有了模糊的认识：</p>\n<blockquote>\n<ul>\n<li>图形学是研究用计算机如果画出一个图像的学科。</li>\n<li>OpenGL教程会教我如何去用封装代码去渲染一个场景，以及背后没展开的图形学原理。</li>\n<li>他的封装性，与我原来想象的能够研究一些与计算几何相关的图形问题算法有较大出入。</li>\n<li>但是学习封装性能够让我先去了解一个大概，以及算法的具体应用性，等到发现其中核心算法的学习路径，开始学习也为时不晚，一是对图形学有了些理解，二是明白各自使用方向，三是dsa的课程也是那些算法实现的前提，四是每天都能够编写C++找到乐趣和问题。</li>\n</ul>\n</blockquote>\n<p>下面是摘自 <span style=\"color:red\"><strong>Milo Yip</strong></span> 叶神在<a href=\"https://www.zhihu.com/question/24786878\" target=\"_blank\" rel=\"noopener\">知乎</a>上的回答，要借鉴这个学习轨迹, 并以此勉励自己：</p>\n<p><code>如何开始用 C++ 写一个光栅化渲染器？</code></p>\n<p><strong>Milo Yip</strong><br>计算机图形学、编程、C++ 等 7 个话题的优秀回答者<br>228 人赞同了该回答<br>@空明流转 开发过高大上的SALVIA， @Yong He 则提到了Larrabee。我来提供另一些观点。</p>\n<p>首先，如果从学习角度出发，不必一开始完全根据现时GPU的架构及概念，来用软件复制一遍。现时的GPU主要是基于三角形光栅化及z-buffer。</p>\n<p>如果我们从图形学的历史进程来学习，可以这样做练习：</p>\n<p>2D部分：</p>\n<blockquote>\n<p>1, 光栅化2D点（就是在二维数组上画点，了解色彩基本原理，并解决影像输出问题）<br>2, 光栅化2D直线（布雷森漢姆直線演算法、吴小林直线算法等）<br>3, 2D直线的剪切算法（见Line clipping）<br>4, 光栅化2D三角形（scan conversion）。避免重复光栅化相邻三角形边界的像素（edge equation）。<br>5, 光栅化简单／复杂多边形<br>3D部分：<br>1, 把顶点从三维世界空间变换至二维屏幕空间，绘画顶点（如银河星系数据），操控摄像机旋转模型。<br>2, 在剪切空间进行3D直线的剪切算法，把顶点连线（如各种三维正多面体）光栅化成wire frame模型<br>3, 以多边形来定义三维模型。使用画家算法来光栅化那些多边形。<br>改为使用深度缓冲。<br>4, 实现简单的纹理映射，先做屏幕空间的插值，然后实现简单的perspective-correct texture mapping。<br>5, 实现简单的顶点光照，使用顶点颜色插值实现Gouraud shading。<br>6, 通过顶点法线插值，实现Phong shading。<br>7, 实现其他贴图技术，如mipmapping（也可试Summed area table）、bilinear/trilinear filtering、bump mapping、normal mapping、environment mapping等。</p>\n</blockquote>\n"},{"title":"Git Push免密码设置","date":"2017-12-22T00:02:48.000Z","_content":"\n## **使用.git-credentials保存验证**\n\n```sh\n$ cd\n$ touch .git-credentials\n$ emacs .git-credentials\nhttps://{timting***}:{********}@github.com\n```\n\n```sh\n$ cd ~/.emacs.d/\n$ git push -u origin master\nUsername for 'https://github.com':   C-c C-c\n```\n\n**去掉{}**\n\n```sh\n$ emacs ~/.git-credentials\nhttps://timting***:********@github.com\n$ git config --global credential.helper store\n\n$ cd\n$ cat ~/.gitconfig\n[user]\n\temail = timtingwei@hotmail.com\n\tname = timtingwei\n[credential]\n\thelper = store\n```\n\n现在push不再需要验证。\n\n**但我不希望用文件保存我的密码**\n\n```sh\n$ ls -ld .git-credentials\n-rw------- 1 tim tim 42 12月 22 15:00 .git-credentials\ntim@htwt:~$ sudo chmod 200 .git-credentials\n[sudo] password for tim: \ntim@htwt:~$ ls -ld .git-credentials\n--w------- 1 tim tim 42 12月 22 15:00 .git-credentials\ntim@htwt:~$ git config --global credential.helper store\n```\n\n重启bash\n\n```sh\ntim@htwt:~/.emacs.d$ git push origin master\nfatal: unable to open /home/tim/.git-credentials: Permission denied\n```\n\n=> 修改权限的方法没用, 别人看不到, git也看不到。\n\n======\n\n## **安全性存疑，因此改用设置cache**\n```sh\n$ rm ~/.git-credentials\n```\n通过设置git的cache的话可以让它记住密码之后自己设置一个cache有效时间 这样也一定程度保证了一些安全性。\n\n```sh\n$ git config --global credential.helper cache\n\\# Set git to use the credential memory cache\n```\n\n```sh\n$ git config --global credential.helper 'cache --timeout=3600'\n\\# Set the cache to timeout after 1 hour (setting is in seconds)\n```\n======\n\nrefwebsite:\n[1], https://www.zhihu.com/question/31836445\n[2], http://www.jianshu.com/p/f54053afecf2\n[3], https://help.github.com/articles/caching-your-github-password-in-git/\n","source":"_posts/git-push-credential.md","raw":"---\ntitle: Git Push免密码设置\ndate: 2017-12-22 08:02:48\ntags: git\n---\n\n## **使用.git-credentials保存验证**\n\n```sh\n$ cd\n$ touch .git-credentials\n$ emacs .git-credentials\nhttps://{timting***}:{********}@github.com\n```\n\n```sh\n$ cd ~/.emacs.d/\n$ git push -u origin master\nUsername for 'https://github.com':   C-c C-c\n```\n\n**去掉{}**\n\n```sh\n$ emacs ~/.git-credentials\nhttps://timting***:********@github.com\n$ git config --global credential.helper store\n\n$ cd\n$ cat ~/.gitconfig\n[user]\n\temail = timtingwei@hotmail.com\n\tname = timtingwei\n[credential]\n\thelper = store\n```\n\n现在push不再需要验证。\n\n**但我不希望用文件保存我的密码**\n\n```sh\n$ ls -ld .git-credentials\n-rw------- 1 tim tim 42 12月 22 15:00 .git-credentials\ntim@htwt:~$ sudo chmod 200 .git-credentials\n[sudo] password for tim: \ntim@htwt:~$ ls -ld .git-credentials\n--w------- 1 tim tim 42 12月 22 15:00 .git-credentials\ntim@htwt:~$ git config --global credential.helper store\n```\n\n重启bash\n\n```sh\ntim@htwt:~/.emacs.d$ git push origin master\nfatal: unable to open /home/tim/.git-credentials: Permission denied\n```\n\n=> 修改权限的方法没用, 别人看不到, git也看不到。\n\n======\n\n## **安全性存疑，因此改用设置cache**\n```sh\n$ rm ~/.git-credentials\n```\n通过设置git的cache的话可以让它记住密码之后自己设置一个cache有效时间 这样也一定程度保证了一些安全性。\n\n```sh\n$ git config --global credential.helper cache\n\\# Set git to use the credential memory cache\n```\n\n```sh\n$ git config --global credential.helper 'cache --timeout=3600'\n\\# Set the cache to timeout after 1 hour (setting is in seconds)\n```\n======\n\nrefwebsite:\n[1], https://www.zhihu.com/question/31836445\n[2], http://www.jianshu.com/p/f54053afecf2\n[3], https://help.github.com/articles/caching-your-github-password-in-git/\n","slug":"git-push-credential","published":1,"updated":"2017-12-22T07:40:59.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukurl000afadr1byw6ywe","content":"<h2 id=\"使用-git-credentials保存验证\"><a href=\"#使用-git-credentials保存验证\" class=\"headerlink\" title=\"使用.git-credentials保存验证\"></a><strong>使用.git-credentials保存验证</strong></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span></span><br><span class=\"line\">$ touch .git-credentials</span><br><span class=\"line\">$ emacs .git-credentials</span><br><span class=\"line\">https://&#123;timting***&#125;:&#123;********&#125;@github.com</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.emacs.d/</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>:   C-c C-c</span><br></pre></td></tr></table></figure>\n<p><strong>去掉{}</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ emacs ~/.git-credentials</span><br><span class=\"line\">https://timting***:********@github.com</span><br><span class=\"line\">$ git config --global credential.helper store</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span></span><br><span class=\"line\">$ cat ~/.gitconfig</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = timtingwei@hotmail.com</span><br><span class=\"line\">\tname = timtingwei</span><br><span class=\"line\">[credential]</span><br><span class=\"line\">\thelper = store</span><br></pre></td></tr></table></figure>\n<p>现在push不再需要验证。</p>\n<p><strong>但我不希望用文件保存我的密码</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -ld .git-credentials</span><br><span class=\"line\">-rw------- 1 tim tim 42 12月 22 15:00 .git-credentials</span><br><span class=\"line\">tim@htwt:~$ sudo chmod 200 .git-credentials</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> tim: </span><br><span class=\"line\">tim@htwt:~$ ls -ld .git-credentials</span><br><span class=\"line\">--w------- 1 tim tim 42 12月 22 15:00 .git-credentials</span><br><span class=\"line\">tim@htwt:~$ git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n<p>重启bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tim@htwt:~/.emacs.d$ git push origin master</span><br><span class=\"line\">fatal: unable to open /home/tim/.git-credentials: Permission denied</span><br></pre></td></tr></table></figure>\n<p>=&gt; 修改权限的方法没用, 别人看不到, git也看不到。</p>\n<p>======</p>\n<h2 id=\"安全性存疑，因此改用设置cache\"><a href=\"#安全性存疑，因此改用设置cache\" class=\"headerlink\" title=\"安全性存疑，因此改用设置cache\"></a><strong>安全性存疑，因此改用设置cache</strong></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm ~/.git-credentials</span><br></pre></td></tr></table></figure>\n<p>通过设置git的cache的话可以让它记住密码之后自己设置一个cache有效时间 这样也一定程度保证了一些安全性。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential.helper cache</span><br><span class=\"line\">\\<span class=\"comment\"># Set git to use the credential memory cache</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential.helper <span class=\"string\">'cache --timeout=3600'</span></span><br><span class=\"line\">\\<span class=\"comment\"># Set the cache to timeout after 1 hour (setting is in seconds)</span></span><br></pre></td></tr></table></figure>\n<p>======</p>\n<p>refwebsite:<br>[1], <a href=\"https://www.zhihu.com/question/31836445\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31836445</a><br>[2], <a href=\"http://www.jianshu.com/p/f54053afecf2\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/f54053afecf2</a><br>[3], <a href=\"https://help.github.com/articles/caching-your-github-password-in-git/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/caching-your-github-password-in-git/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-git-credentials保存验证\"><a href=\"#使用-git-credentials保存验证\" class=\"headerlink\" title=\"使用.git-credentials保存验证\"></a><strong>使用.git-credentials保存验证</strong></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span></span><br><span class=\"line\">$ touch .git-credentials</span><br><span class=\"line\">$ emacs .git-credentials</span><br><span class=\"line\">https://&#123;timting***&#125;:&#123;********&#125;@github.com</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.emacs.d/</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>:   C-c C-c</span><br></pre></td></tr></table></figure>\n<p><strong>去掉{}</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ emacs ~/.git-credentials</span><br><span class=\"line\">https://timting***:********@github.com</span><br><span class=\"line\">$ git config --global credential.helper store</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span></span><br><span class=\"line\">$ cat ~/.gitconfig</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = timtingwei@hotmail.com</span><br><span class=\"line\">\tname = timtingwei</span><br><span class=\"line\">[credential]</span><br><span class=\"line\">\thelper = store</span><br></pre></td></tr></table></figure>\n<p>现在push不再需要验证。</p>\n<p><strong>但我不希望用文件保存我的密码</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -ld .git-credentials</span><br><span class=\"line\">-rw------- 1 tim tim 42 12月 22 15:00 .git-credentials</span><br><span class=\"line\">tim@htwt:~$ sudo chmod 200 .git-credentials</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> tim: </span><br><span class=\"line\">tim@htwt:~$ ls -ld .git-credentials</span><br><span class=\"line\">--w------- 1 tim tim 42 12月 22 15:00 .git-credentials</span><br><span class=\"line\">tim@htwt:~$ git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n<p>重启bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tim@htwt:~/.emacs.d$ git push origin master</span><br><span class=\"line\">fatal: unable to open /home/tim/.git-credentials: Permission denied</span><br></pre></td></tr></table></figure>\n<p>=&gt; 修改权限的方法没用, 别人看不到, git也看不到。</p>\n<p>======</p>\n<h2 id=\"安全性存疑，因此改用设置cache\"><a href=\"#安全性存疑，因此改用设置cache\" class=\"headerlink\" title=\"安全性存疑，因此改用设置cache\"></a><strong>安全性存疑，因此改用设置cache</strong></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm ~/.git-credentials</span><br></pre></td></tr></table></figure>\n<p>通过设置git的cache的话可以让它记住密码之后自己设置一个cache有效时间 这样也一定程度保证了一些安全性。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential.helper cache</span><br><span class=\"line\">\\<span class=\"comment\"># Set git to use the credential memory cache</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global credential.helper <span class=\"string\">'cache --timeout=3600'</span></span><br><span class=\"line\">\\<span class=\"comment\"># Set the cache to timeout after 1 hour (setting is in seconds)</span></span><br></pre></td></tr></table></figure>\n<p>======</p>\n<p>refwebsite:<br>[1], <a href=\"https://www.zhihu.com/question/31836445\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31836445</a><br>[2], <a href=\"http://www.jianshu.com/p/f54053afecf2\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/f54053afecf2</a><br>[3], <a href=\"https://help.github.com/articles/caching-your-github-password-in-git/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/caching-your-github-password-in-git/</a></p>\n"},{"title":"gitignore-invalid","date":"2017-12-27T00:55:27.000Z","_content":"","source":"_posts/gitignore-invalid.md","raw":"---\ntitle: gitignore-invalid\ndate: 2017-12-27 08:55:27\ntags:\n---\n","slug":"gitignore-invalid","published":1,"updated":"2017-12-27T00:55:27.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukuro000bfadremrbbf6r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"OpenGL绘制三角形附练习","date":"2017-12-25T06:56:13.000Z","_content":"\n代码已托管在[/timtingwei/LearnOpenGL](https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started)\n\n# 图形管线渲染有哪几个阶段？\n\n顶点数据(Vertex data[])  ->\n> 1, **顶点着色器**(Vertex Shader) ->\n> 2, 形状(图元)装配(Shape Assembly) ->\n> 3, **几何着色器**(Geometry Shader) ->\n> 4, 光栅化(Rasterization) ->\n> 5, **片段着色器**(Fragment Shader) ->\n> 6, 测试与混合(Test And Blending)\n\n三个着色器可以自己定义。\n\n**顶点数据(Vertex data)：**\n> * Vertex是一个3D坐标的集合\n> * Vertex Data是用顶点属性(Vertex Attribute), 如位置Position, 颜色Color\n\n\n**顶点着色器(Vertex Shader)：**\n> * 把3D坐标转换成另外一种3D坐标\n> * 允许对Vertex Attribute做基本处理\n\n**片段着色器(Fragment Shader)：**\n> * 计算一个像素最终的颜色\n> * 着色器包含3D场景数据(光照，阴影，光的颜色)\n\n**Alpha测试和混合(Blending):**\n> * 测试深度，反应前后。\n> * 检查Alpha并混合，(同个片段着色器，渲染多个三角形时候的颜色可能不同)\n\n\n补充: 图元(Primitive):\n> * 任何一个绘制指令的调用，都把图元传递给OpenGL。\n> * 如GL\\_POINTS、GL\\_TRIANGLES、GL\\_LINE_STRIP。\n\n\n# 绘制绘制三角形\n\t\n## 顶点着色器\n使用GLSL(OpenGL Shading Language)编写顶点着色器\n```c\n#version 330 core          // 每个着色器起始于版本声明, core代表核心模式\n\nlayout (location=0) in vec3 aPos;      // 设定输入变量的位置值\n\nvoid main() {\n  gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n\n```\n\n为什么需要**layout (location=0)**设定位置值？\n> * **glVertexAttributPointer**函数第一个参数指定配置顶点属性，而**layout (location=0) 定义了顶点某变量的position属性。\n\n\n相关内容in, out, uniform, type类型, 向量组合, main函数，会在下一节，[着色器中](https://timtingwei.github.io)讲解\n\n## 编译顶点着色器\n\n编写着色器源码后，\n> 1, 先创建着色器对象;\n> 2, 再把源码附加到着色器对象上;\n> 3, 编译并检查\n\n**1, 创建顶点着色器对象**\n```cpp\nunsigned int vertexShader;                         // ID引用\nvertexShader = glCreateShader(GL_VERTEX_SHADER);   // 传递着色器类型参数\n```\n\n**2, 附源码**\n```cpp\nglShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\n```\n\n**glShaderSource**函数的几个参数：\n> 0, 着色器对象\n> 1, 传递的源码字符数量\n> 2, 顶点着色器的真正源码\n> 3, 先设置为NULL\n\n**3, 编译**\n```cpp\nglCompileShader(vertexShader);\n// 检查编译是否成功\nint success;\nchar infoLog[512];\nglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n// 如果不成功，用glGetShaderInfoLog获取信息, 存储再InfoLog中，打印\nif {!success} {\n  glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n  std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n}\n```\n\n## 片段着色器\n同理顶点着色器，编写着色器源码\n\n```c\n#version 330 core\n\nout vec4 FragColor;\n\nvoid main() {\n  FragColor =  vec4(1.0f, 0.5f, 0.2f, 1.0f);\n}\n```\n\n片段着色器只有一个vec4作为out, 表示最终的输出颜色, 最后一个值是alpha量\n\n## 编译片段着色器\n1, 创建对象\n2, 附加源码\n3, 编译并检查\n\n自己重新写一遍, 并检查错误\n1, 创建对象尝试\n```cpp\nunsigned int fragmentShader;\nglCreateShader(fragmentShader, GL_FRAGMENT_SHADER);   // ERROR\n```\n\n<span style=\"color:red\"> *改正* </span>\n```cpp\nunsigned int fragmentShader;\nglCreateShader(GL_FRAGMENT_SHADER);     // DEBUG::不需要用着色器对象作为函数的参数，\n```\n\n查阅[khronos.org - glCreateShader](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glCreateShader.xhtml)\n> * Like buffer and texture objects, the name space for shader objects may be shared across a set of contexts, as long as the server sides of the contexts share the same address space. If the name space is shared across contexts, any attached objects and the data associated with those attached objects are shared as well.\n会绑定上下文中的ID创建object, 而且同一ShaderType会被联系起来。\n\n\n2, 附源码尝试\n```cpp\nglShaderSource(1, fragmentShader, fragmentSource, NULL)   // ERROR\n```\n\n<span style=\"color:red\"> *改正* </span>\n```cpp\nglShaderSource(fragmentShader, 1, fragmentShaderSource, NULL);  // DEBUG::交换参数位置\n```\n\n> 1. 着色器对象\n> 2. 传递源码字符的数量\n\n3, 尝试编译\n```cpp\nbool success;    // ERROR\nglCompileShader(GL_FRAGMENT_SHADER, fragmentShader, success); // ERROR\nunsigned char* infoLog[512];                                // ERROR\nif (!success) {\n  // 失败把报错内容储存再infoLog中输出\n  glGetShaderinfoLog(fragmentShader, &success, &infoLog);   // ERROR\n  std::cout << \"COMPILE::ERROR::FRAGEMENT::SHADER\" \n            << infoLog << std::endl;\n}\n```\n\n<span style=\"color:red\"> *改正* </span>\n```cpp\nglCompileShader(fragmentShader);     // DEBUG::只要着色器对象一个参数\nint success;                         // DEBUG:: success是一个int类型\nchar infoLog[512];                   // DEBUG:: char 并非 unsigned cha*\nglGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);   // DEBUG::获取success在先，才能对success做判断\nif (!success) {\n  // 失败输出\n  std::cout << \"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n}\n```\n\n## 创建着色器程序\n绘制图元时，使用的是glUseProgram(shaderProgram), 因此，先要创建着色器程序\n\n```cpp\nunsigned int shaderProgram;\nshaderProgram = glCreateProgram();\n```\n\n\n## 链接着色器对象\n两个着色器对象要链接。\n```cpp\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n```\n\n## 编译着色程序\n与之前的着色器编译原理相同，只是调用函数和参数变量改变了。\n```cpp\nglGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\nif (!success) {\n  glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n  std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"\n              << infoLog << std::endl;\n}\n```\n\n之后可以glUseProgram函数，激活程序对象。激活后，着色器调用和渲染调用都会使用这个程序对象。\n## 删除着色器\n完成以上几步后不要忘记删除着色器\n```cpp\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n```\n\n## 输入顶点以及索引\n\n```cpp\n// 顶点输入\nGLfloat vertices[] = {\n  0.5f,   0.5f, 0.0f,    // 右上角\n  0.5f,  -0.5f, 0.0f,    // 右下角\n  -0.5f, -0.5f, 0.0f,    // 左下角\n  -0.5f,  0.5f, 0.0f     // 左上角\n};\n```\n\n**赋值array的时候, 不要忘记{};**\n\n```cpp\n// 顶点索引\nGLuint indices[] = {\n  0, 1, 3                // 第一个三角形\n  // ...                 // 可根据vertices数组, 建立多组索引\n};\n```\n\n## **创建和绑定顶点数组对象(VAO)**\nVAO = Vertex Array Object\n\n功能:\n> * 随后的顶点属性调用都会储存在这个VAO之中。\n> * 使得在不同顶点数据和属性设置之间切换变得简单。\n\n**存储内容**:\n> * glEnableVertexAttribArray和glDisableVertexAttribArray的调用。\n> * 通过glVertexAttribPointer设置的顶点属性配置。\n> * 通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。\n\n使用注意:\n> * **先VAO，再绑定和设置VBO, EBO 以及设置顶点属性指针**\n\n```cpp\nGLuint VAO;\nglGenVertexArrays(1, &VAO);   // 创建VAO对象\nglBindVertexArray(VAO);       // 绑定顶点数组对象\n```\n\n\n## **创建和绑定顶点缓冲对象(VBO)**\n\nOpenGL如何解释顶点数据的内存，并指定其如何发送给显卡。\n\n作用:\n> * 通过VBO(Vertex Buffer Object)管理这个内存，它会在GPU内存中存储大量顶点。\n> * 一次性发送大量数据到显卡上，而不是每个顶点发送一次。CPU发到显卡上速度慢，因此，一次发送多个比较好。而发送过去之后顶点着色器又能够立即访问。\n\n<span style=\"color:blue\">*我想这个过程应该是发生图形管线渲染的第一个阶段，是顶点数据和顶点着色器如何对接？就是依靠CPU发送到显卡上* </span>\n```cpp\nGLuint VBO;\nglGenBuffer(1, &VBO);           // 创建\n// 把顶点数组复制到缓存中提供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n```\n\n## **索引缓冲对象(EBO)**\n\n可以创建不同的索引数组，而使用同一个顶点数组。如下：\n```cpp\nunsigned int indices[] = { // 注意索引从0开始! \n    0, 1, 3, // 第一个三角形\n    1, 2, 3  // 第二个三角形\n};\n```\n\n```cpp\nGLuint EBO;\nglGenBuffer(1, &EBO);                // 创建\n// 把顶点索引复制到缓存中提供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n```\n\n\n\t\n## **设置顶点属性**\n\t\n![vertex_attribute_pointer](/images/vertex_attribute_pointer.png)\t\n\n> * 位置数据被储存为32位(4字节)浮点值 => siezeof(flaot) = 4 types = 32bits\n> * 每个位置包含3个这样的值\n> * 没有空隙, 紧密排列。\n> * 数据中的第一个值再缓冲开始位置。\n\n```cpp\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexattribArray(0);    // 开启位置为0的顶点属性\n```\n\n**glVertexAttribPointer参数**\n> 1, 要配置的顶点属性的位置值。输入的参数顶点属性的位置值。还记得之前的 <span style=\"color:red\">**layout (location=0) in vec3 xx**</span> 吗？ \n> 2, 顶点属性的大小。 vec3 => 3个值组成\n> 3, 指定数据类型。 (GLSL中vec*都是由浮点数值组成的)\n> 4, 是否被标准化。 GL_TRUE代表是，所有数据(对有符号数据是-1)映射到0到1之间;\n> 5, 步长，这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节。因为是紧密排列设置成0也可以，OpenGL自己会设置。\n> 6. 偏移量。位置数据在数组开头就设置成0\n\n\n顶点属性默认是禁用的，要用glEnableVertexAttribArray函数开启。\n输入的参数顶点属性的位置值。<span style=\"color:red\">**layout (location=0) in vec3 xx**</span> \n\n## 绘制图元\n\n`在主循环内部绘制图元。`\n\n1, 激活程序对象\n2, 绑定缓存对象\n3, 绘制\n4, 解绑缓存对象\n\n**绘制两种方式：**\nglDrawArrays();\n> * 使用当前绑定的顶点缓存对象进行绘制\nglDrawElements()\n> * 使用当前绑定的索引缓冲对象中的索引进行绘制\n\n第一种，\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\n// 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 使用当前绑定的顶点缓存对象进行绘制\nglDrawArrays(GL_TRIANGLES, 0, 3);\n// 解绑缓存对象\nglBindVertArray(0);\n```\n第二种,\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\n// 绑定顶点数组对象 \nglBindVertexArray(VAO);\n// 使用当前绑定的索引缓冲对象中的索引进行绘制\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n// 解绑缓存对象\nglBindVertArray(0);\n```\n\n<span style=\"color:blue\">*VAO有种结合VBO+EBO的意思*</span>\n**再回顾一遍它的存储内容**:\n> * glEnableVertexAttribArray和glDisableVertexAttribArray的调用。\n> * 通过glVertexAttribPointer设置的顶点属性配置。\n> * 通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。\n\n`退出循环后删除对象，释放缓存`\n```cpp\nglDeleteVertexArray(1, &VAO);\nglDeleteBuffers(1, &VBO);\nglDeleteBuffers(1, &EBO);\n```\n\n-----\n\n# 课后练习\n实现完成一个三角形/矩形的绘制后，对很多问题不是很清楚。如，\n> 1, 索引缓冲对象EBO绘制和顶点缓冲绘制VBO的区别和联系？\n> 2, 顶点着色器和片段着色器之间的关系？\n> 3, 设置顶点属性glVertexAttribPointer();函数的几个参数并不理解？\n\n## **1. 添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形**\n\n\n**glDrawArrays();**\n根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。\n\n\n```cpp\n// 先设置顶点数组\nGLfloat vertices[] = {\n    // 第一个triangle\n    0.5f,   0.5f, 0.0f,    // 右上角\n    0.5f,  -0.5f, 0.0f,    // 右下角\n    0.0f,   0.0f, 0.0f,    // 连接处\n    // 第二个triangle\n    -0.5f, -0.5f, 0.0f,    // 左下角\n    -0.5f,  0.5f, 0.0f,    // 左上角\n    0.0f,   0.0f, 0.0f     // 连接处\n  };\n```\n\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 6);  // 从顶点数组索引0开始依次绘制6个顶点\n\n```\n\n\n**glDrawElements();**\n根据索引的数组数据渲染图元，可以指定渲染图元的类型，给定一个数量，索引的类型以及指向索引的指针\n\n\n```cpp\n// 顶点输入\nGLfloat vertices[] = {\n  0.5f,   0.5f, 0.0f,    // 右上角\n  0.5f,  -0.5f, 0.0f,    // 右下角\n  -0.5f, -0.5f, 0.0f,    // 左下角\n  -0.5f,  0.5f, 0.0f     // 左上角\n};\n\nGLuint indices[] = {     // 索引从0开始\n  0, 1, 3,               // 第一个三角形\n  1, 2, 3                // 第二个三角形\n};\n```\n\n还需要在绑定VAO后绑定VBO和EBO\n```cpp\n// ...\n```\n\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0)  // 索引数组绘制6个顶点\n```\n\n<span style=\"color:blue\">*这里并没有给出索引数组的指针，我估计是绑定VAO后，Draw函数调用会从上下文获得这个指针。不知道这个猜想是否正确。*</span>\n\n[练习1源码 - github](https://github.com/timtingwei/LearnOpenGL/blob/master/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp)\n\n-----\n\n## **2. 创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO**\n// 不同VAO和VBO的ID各自放在同一个数组中，可以以数组创建，但需要单独绑定，复制缓存，设置顶点属性，以及单独绘制。\n\n**glGenBuffers**(GLsizei n,\n                GLuint* buffers);\n生成缓存对象的名字，输入缓存名字的数量n以及缓存对象名字存在的数组，返回n个缓存对象名字在**Buffers**中。直到调用glBindBuffer()，生成的缓存名字才和某一缓存对象绑定在一起。\n\n**glGenVertexArrays**(GLsizei n,\n                      GLuint* arrays);\n返回n个顶点数组对象名字，存储到arrays指针中。\n\n**glBindBuffer(GLenum target, \n               GLuint buffer);**\n绑定一个已经命名的缓存对象。\n\n*target*\n`----------------------------------------------------------`\n`GL_ARRAY_BUFFER`            |     顶点属性\n`GL_ELEMENT_ARRAY_BUFFER`    |     顶点数组索引\n`GL_TEXTURE_BUFFER`          |     纹理数据缓存\n`GL_UNIFORM_BUFFER`          |     Uniform块存储\n`----------------------------------------------------------`\n\n*buffer*\n    缓存对象的名字\n\n\n**glBindVertexArray**(GLuint array);\n用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。\n\n\n**glBufferData**(GLenum target\n                 GLsizeiptr size\n\t\t\t\t const GLvoid * data\n\t\t\t\t GLenum usage);\n创建或者初始化一个缓冲对象的数据的储存。\n\n*target*\n     这里是GL_ARRAY_BUFFER\n\n*size*\n   新建的缓冲对象大小，以字节(type)类型表示，可以使用sizeof(data)得到\n\n*data*\n   用于拷贝和初始化新的data对象的，指向data的指针，如果是NULL的话，没有数据被拷贝\n   \n*usage*\n    储存好的数据的使用模式。 `GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY`有这么几种。这里只用于静态绘制\n\n\n**glVertexAttribPointer**(GLuint index,\n                      GLint size,\n \t                  GLenum type,\n \t                  GLboolean normalized,\n \t                  GLsizei stride,\n \t                  const GLvoid * pointer);\n上面有所解释。现在就够用了。\n\n**glEnableVertexAttribArray**(GLuint index);\n启用设置好的顶点属性数组，\n*glDisableVertexAttribArray*(GLuint index);\n关闭\n\n*index* \n   顶点属性的序号，即位置的序号。与顶点着色器的(location=n)相关.\n\n**glBindVertexArray**();\n用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。\n\n**glDrawArrays**(GLenum mode,\n               GLint first,\n\t\t\t   GLsizei count);\n练习1中已经出现过，调用之前先要绑定Array;\n根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。\n\n\n代码实现如下：\n```cpp\n// 输入两个三角形各自的顶点数组\nGLfloat firstTriangleVertices[] = {\n  // 第一个triangle\n  0.5f,   0.5f, 0.0f,    // 右上角\n  0.1f,  -0.5f, 0.0f,    // 右下角\n  -0.5f,  0.3f, 0.0f,    // 左下角\n};\n\nGLfloat secondTriangleVertices[] = {\n  // 第二个triangle\n  -0.5f, -0.5f, 0.0f,    // 左下角\n  -0.1f,  0.5f, 0.0f,    // 左上角\n  0.5f,  -0.3f, 0.0f     // 右下角\n};\n```\n\n\n1, 共同以VAOs和VBOs以数组创建\n```cpp\nGLuint VBOs[2], VAOs[2];\nglGenBuffers(2, VAOs);\nglGenVertexArrays(2, VAOs);\n```\n2, 单独绑定, 复制, 设置顶点属性 \n```cpp\nglBindVertexArray(VAOs[0]);\nglBindBuffer(GL_ARRAY_BUFFER, VBOs[0]);\nglBufferData(GL_GL_ARRAY_BUFFER, sizeof(firstTriangleVertices),\n               firstTriangleVertices, GL_STATIC_DRAW);\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE,\n                        3 * sizeof(GLfloat), (GLvoid*)0);\nglEnableVertexAttribArray(0);\n\n// 同理VAOs[1], VBOs[1]..\nglBindVertexArray(VAOs[1]);\nglBindBuffer(GL_ARRAY_BUFFER, VBOs[1]);\nglBufferData(GL_GL_ARRAY_BUFFER, sizeof(secondTriangleVertices),\n               secondTriangleVertices, GL_STATIC_DRAW);\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE,\n                        3 * sizeof(GLfloat), (GLvoid*)0);\nglEnableVertexAttribArray(0);\n```\n\n\n3, 单独绘制\n```cpp\n// ==========firstTriangle=========\nglUseProgram(shaderProgram);\nglBindVertexArray(VAOs[0]);\nglDrawArrays(GL_TRIANGLES, 0, 3);\n// ==========secondTriangle========\nglBindVertexArray(VAOs[1]);\nglDrawArrays(GL_TRIANGLES, 0, 3);\nglBindVertexArray(0);\n```\n\n\n[练习2源码](https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.4.hello_triangle_exercise2)\n\n## **3.创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色**\n\n之前提出了一个问题，顶点着色器和片段着色器之间的关系？在这个练习中，有所涉及。\n\n// 放在同一个数组中，但需要各自绑定和各自绘制， 也可以匹配不同的顶点数组\n// 注意：片段着色器不能放在数组里。\n// 顶点着色器，片段着色器attach+link成program, 着色器需要创建，绑定源码，编译，检查编译四个步骤。\n\n1, GLSL编写橙色和黄色着色器代码\n2，分别附着，编译，检查着色器，并attach到不同的program\n3, 用不同的program进行draw\n\n\n**1, GLSL编写橙色和黄色着色器代码**\n```cpp\n// 片段着色器0\nconst GLchar* fragmentShaderSource0 = \"#version 330 core\\n\"\n    \"out vec4 color;\\n\"\n    \"void main() {\\n\"\n    \"color = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"   // orange\n    \"}\\n\\0\";\n\n// 片段着色器1\nconst GLchar* fragmentShaderSource1 = \"#version 330 core\\n\"\n    \"out vec4 color;\\n\"\n    \"void main() {\\n\"\n    \"color = vec4(1.0f, 1.0f, 0.0f, 1.0f);\\n\"   // yellow\n    \"}\\n\\0\";\n```\n\n**2，分别附着，编译，检查着色器，并attach到不同的program**\n```cpp\n// 创建片段着色器\n  GLuint fragmentShaderOrange;\n  GLuint fragmentShaderYellow;\n  GLuint shaderProgramOrange;\n  GLuint shaderProgramYellow;\n  fragmentShaderOrange = glCreateShader(GL_FRAGMENT_SHADER);\n  fragmentShaderYellow = glCreateShader(GL_FRAGMENT_SHADER);\n  shaderProgramOrange = glCreateProgram();\n  shaderProgramYellow = glCreateProgram();\n  // ===========编译第一个片段着色器===================\n  // 源码附加到着色器对象上\n  glShaderSource(fragmentShaderOrange, 1, &fragmentShaderSource0, NULL);\n  glCompileShader(fragmentShaderOrange);\n  // 检测glComplieShader是否编译成功\n  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n  if (!success) {\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n\n  // ===========编译第二个片段黄色着色器===================\n  // 源码附加到着色器对象上\n  glShaderSource(fragmentShaderYellow, 1, &fragmentShaderSource1, NULL);\n  glCompileShader(fragmentShaderYellow);\n  // 检测glComplieShader是否编译成功\n  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n  if (!success) {\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n  // 把两个着色器对象链接到用来渲染的两个着色程序中\n  glAttachShader(shaderProgramOrange, vertexShader);\n  // =====连接第一个片段着色器=====\n  glAttachShader(shaderProgramOrange, fragmentShaderOrange);\n  glLinkProgram(shaderProgramOrange);\n  glGetProgramiv(shaderProgramOrange, GL_LINK_STATUS, &success);\n  if (!success) {\n    glGetProgramInfoLog(shaderProgramOrange, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n  // =====连接第二个片段着色器=====\n  glAttachShader(shaderProgramYellow, vertexShader);\n  glAttachShader(shaderProgramYellow, fragmentShaderYellow);\n  glLinkProgram(shaderProgramYellow);\n  glGetProgramiv(shaderProgramYellow, GL_LINK_STATUS, &success);\n  if (!success) {\n    glGetProgramInfoLog(shaderProgramYellow, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n  // 删除着色器\n  glDeleteShader(vertexShader);\n  glDeleteShader(fragmentShaderOrange);\n  glDeleteShader(fragmentShaderYellow);\n```\n\n**3, 用不同的program进行draw**\n```cpp\n// =====激活程序对象绘制第一个triangle======\nglUseProgram(shaderProgramOrange);      // 使用第一个片段着色器连接的program\nglBindVertexArray(VAOs[0]);\nglDrawArrays(GL_TRIANGLES, 0, 3);  // 从索引0开始依次绘制3个顶点\n\n// =====激活程序对象绘制第二个triangle======\nglUseProgram(shaderProgramYellow);      // 使用第二个片段着色器连接的program\nglBindVertexArray(VAOs[1]);\nglDrawArrays(GL_TRIANGLES, 0, 3);  // 从索引0开始依次绘制3个顶点\n```\n\n[练习3源码](https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.5.hello_triangle_exercise3)\n\n=======\n\nrefwebsite:\n[你好三角形 - learnopengl-CN](https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/)\n\n\n","source":"_posts/hello-triangle-three-execises.md","raw":"---\ntitle: OpenGL绘制三角形附练习\ndate: 2017-12-25 14:56:13\ntags: OpenGL\n---\n\n代码已托管在[/timtingwei/LearnOpenGL](https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started)\n\n# 图形管线渲染有哪几个阶段？\n\n顶点数据(Vertex data[])  ->\n> 1, **顶点着色器**(Vertex Shader) ->\n> 2, 形状(图元)装配(Shape Assembly) ->\n> 3, **几何着色器**(Geometry Shader) ->\n> 4, 光栅化(Rasterization) ->\n> 5, **片段着色器**(Fragment Shader) ->\n> 6, 测试与混合(Test And Blending)\n\n三个着色器可以自己定义。\n\n**顶点数据(Vertex data)：**\n> * Vertex是一个3D坐标的集合\n> * Vertex Data是用顶点属性(Vertex Attribute), 如位置Position, 颜色Color\n\n\n**顶点着色器(Vertex Shader)：**\n> * 把3D坐标转换成另外一种3D坐标\n> * 允许对Vertex Attribute做基本处理\n\n**片段着色器(Fragment Shader)：**\n> * 计算一个像素最终的颜色\n> * 着色器包含3D场景数据(光照，阴影，光的颜色)\n\n**Alpha测试和混合(Blending):**\n> * 测试深度，反应前后。\n> * 检查Alpha并混合，(同个片段着色器，渲染多个三角形时候的颜色可能不同)\n\n\n补充: 图元(Primitive):\n> * 任何一个绘制指令的调用，都把图元传递给OpenGL。\n> * 如GL\\_POINTS、GL\\_TRIANGLES、GL\\_LINE_STRIP。\n\n\n# 绘制绘制三角形\n\t\n## 顶点着色器\n使用GLSL(OpenGL Shading Language)编写顶点着色器\n```c\n#version 330 core          // 每个着色器起始于版本声明, core代表核心模式\n\nlayout (location=0) in vec3 aPos;      // 设定输入变量的位置值\n\nvoid main() {\n  gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n\n```\n\n为什么需要**layout (location=0)**设定位置值？\n> * **glVertexAttributPointer**函数第一个参数指定配置顶点属性，而**layout (location=0) 定义了顶点某变量的position属性。\n\n\n相关内容in, out, uniform, type类型, 向量组合, main函数，会在下一节，[着色器中](https://timtingwei.github.io)讲解\n\n## 编译顶点着色器\n\n编写着色器源码后，\n> 1, 先创建着色器对象;\n> 2, 再把源码附加到着色器对象上;\n> 3, 编译并检查\n\n**1, 创建顶点着色器对象**\n```cpp\nunsigned int vertexShader;                         // ID引用\nvertexShader = glCreateShader(GL_VERTEX_SHADER);   // 传递着色器类型参数\n```\n\n**2, 附源码**\n```cpp\nglShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\n```\n\n**glShaderSource**函数的几个参数：\n> 0, 着色器对象\n> 1, 传递的源码字符数量\n> 2, 顶点着色器的真正源码\n> 3, 先设置为NULL\n\n**3, 编译**\n```cpp\nglCompileShader(vertexShader);\n// 检查编译是否成功\nint success;\nchar infoLog[512];\nglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n// 如果不成功，用glGetShaderInfoLog获取信息, 存储再InfoLog中，打印\nif {!success} {\n  glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n  std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n}\n```\n\n## 片段着色器\n同理顶点着色器，编写着色器源码\n\n```c\n#version 330 core\n\nout vec4 FragColor;\n\nvoid main() {\n  FragColor =  vec4(1.0f, 0.5f, 0.2f, 1.0f);\n}\n```\n\n片段着色器只有一个vec4作为out, 表示最终的输出颜色, 最后一个值是alpha量\n\n## 编译片段着色器\n1, 创建对象\n2, 附加源码\n3, 编译并检查\n\n自己重新写一遍, 并检查错误\n1, 创建对象尝试\n```cpp\nunsigned int fragmentShader;\nglCreateShader(fragmentShader, GL_FRAGMENT_SHADER);   // ERROR\n```\n\n<span style=\"color:red\"> *改正* </span>\n```cpp\nunsigned int fragmentShader;\nglCreateShader(GL_FRAGMENT_SHADER);     // DEBUG::不需要用着色器对象作为函数的参数，\n```\n\n查阅[khronos.org - glCreateShader](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glCreateShader.xhtml)\n> * Like buffer and texture objects, the name space for shader objects may be shared across a set of contexts, as long as the server sides of the contexts share the same address space. If the name space is shared across contexts, any attached objects and the data associated with those attached objects are shared as well.\n会绑定上下文中的ID创建object, 而且同一ShaderType会被联系起来。\n\n\n2, 附源码尝试\n```cpp\nglShaderSource(1, fragmentShader, fragmentSource, NULL)   // ERROR\n```\n\n<span style=\"color:red\"> *改正* </span>\n```cpp\nglShaderSource(fragmentShader, 1, fragmentShaderSource, NULL);  // DEBUG::交换参数位置\n```\n\n> 1. 着色器对象\n> 2. 传递源码字符的数量\n\n3, 尝试编译\n```cpp\nbool success;    // ERROR\nglCompileShader(GL_FRAGMENT_SHADER, fragmentShader, success); // ERROR\nunsigned char* infoLog[512];                                // ERROR\nif (!success) {\n  // 失败把报错内容储存再infoLog中输出\n  glGetShaderinfoLog(fragmentShader, &success, &infoLog);   // ERROR\n  std::cout << \"COMPILE::ERROR::FRAGEMENT::SHADER\" \n            << infoLog << std::endl;\n}\n```\n\n<span style=\"color:red\"> *改正* </span>\n```cpp\nglCompileShader(fragmentShader);     // DEBUG::只要着色器对象一个参数\nint success;                         // DEBUG:: success是一个int类型\nchar infoLog[512];                   // DEBUG:: char 并非 unsigned cha*\nglGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);   // DEBUG::获取success在先，才能对success做判断\nif (!success) {\n  // 失败输出\n  std::cout << \"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n}\n```\n\n## 创建着色器程序\n绘制图元时，使用的是glUseProgram(shaderProgram), 因此，先要创建着色器程序\n\n```cpp\nunsigned int shaderProgram;\nshaderProgram = glCreateProgram();\n```\n\n\n## 链接着色器对象\n两个着色器对象要链接。\n```cpp\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n```\n\n## 编译着色程序\n与之前的着色器编译原理相同，只是调用函数和参数变量改变了。\n```cpp\nglGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\nif (!success) {\n  glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n  std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"\n              << infoLog << std::endl;\n}\n```\n\n之后可以glUseProgram函数，激活程序对象。激活后，着色器调用和渲染调用都会使用这个程序对象。\n## 删除着色器\n完成以上几步后不要忘记删除着色器\n```cpp\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n```\n\n## 输入顶点以及索引\n\n```cpp\n// 顶点输入\nGLfloat vertices[] = {\n  0.5f,   0.5f, 0.0f,    // 右上角\n  0.5f,  -0.5f, 0.0f,    // 右下角\n  -0.5f, -0.5f, 0.0f,    // 左下角\n  -0.5f,  0.5f, 0.0f     // 左上角\n};\n```\n\n**赋值array的时候, 不要忘记{};**\n\n```cpp\n// 顶点索引\nGLuint indices[] = {\n  0, 1, 3                // 第一个三角形\n  // ...                 // 可根据vertices数组, 建立多组索引\n};\n```\n\n## **创建和绑定顶点数组对象(VAO)**\nVAO = Vertex Array Object\n\n功能:\n> * 随后的顶点属性调用都会储存在这个VAO之中。\n> * 使得在不同顶点数据和属性设置之间切换变得简单。\n\n**存储内容**:\n> * glEnableVertexAttribArray和glDisableVertexAttribArray的调用。\n> * 通过glVertexAttribPointer设置的顶点属性配置。\n> * 通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。\n\n使用注意:\n> * **先VAO，再绑定和设置VBO, EBO 以及设置顶点属性指针**\n\n```cpp\nGLuint VAO;\nglGenVertexArrays(1, &VAO);   // 创建VAO对象\nglBindVertexArray(VAO);       // 绑定顶点数组对象\n```\n\n\n## **创建和绑定顶点缓冲对象(VBO)**\n\nOpenGL如何解释顶点数据的内存，并指定其如何发送给显卡。\n\n作用:\n> * 通过VBO(Vertex Buffer Object)管理这个内存，它会在GPU内存中存储大量顶点。\n> * 一次性发送大量数据到显卡上，而不是每个顶点发送一次。CPU发到显卡上速度慢，因此，一次发送多个比较好。而发送过去之后顶点着色器又能够立即访问。\n\n<span style=\"color:blue\">*我想这个过程应该是发生图形管线渲染的第一个阶段，是顶点数据和顶点着色器如何对接？就是依靠CPU发送到显卡上* </span>\n```cpp\nGLuint VBO;\nglGenBuffer(1, &VBO);           // 创建\n// 把顶点数组复制到缓存中提供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n```\n\n## **索引缓冲对象(EBO)**\n\n可以创建不同的索引数组，而使用同一个顶点数组。如下：\n```cpp\nunsigned int indices[] = { // 注意索引从0开始! \n    0, 1, 3, // 第一个三角形\n    1, 2, 3  // 第二个三角形\n};\n```\n\n```cpp\nGLuint EBO;\nglGenBuffer(1, &EBO);                // 创建\n// 把顶点索引复制到缓存中提供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n```\n\n\n\t\n## **设置顶点属性**\n\t\n![vertex_attribute_pointer](/images/vertex_attribute_pointer.png)\t\n\n> * 位置数据被储存为32位(4字节)浮点值 => siezeof(flaot) = 4 types = 32bits\n> * 每个位置包含3个这样的值\n> * 没有空隙, 紧密排列。\n> * 数据中的第一个值再缓冲开始位置。\n\n```cpp\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexattribArray(0);    // 开启位置为0的顶点属性\n```\n\n**glVertexAttribPointer参数**\n> 1, 要配置的顶点属性的位置值。输入的参数顶点属性的位置值。还记得之前的 <span style=\"color:red\">**layout (location=0) in vec3 xx**</span> 吗？ \n> 2, 顶点属性的大小。 vec3 => 3个值组成\n> 3, 指定数据类型。 (GLSL中vec*都是由浮点数值组成的)\n> 4, 是否被标准化。 GL_TRUE代表是，所有数据(对有符号数据是-1)映射到0到1之间;\n> 5, 步长，这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节。因为是紧密排列设置成0也可以，OpenGL自己会设置。\n> 6. 偏移量。位置数据在数组开头就设置成0\n\n\n顶点属性默认是禁用的，要用glEnableVertexAttribArray函数开启。\n输入的参数顶点属性的位置值。<span style=\"color:red\">**layout (location=0) in vec3 xx**</span> \n\n## 绘制图元\n\n`在主循环内部绘制图元。`\n\n1, 激活程序对象\n2, 绑定缓存对象\n3, 绘制\n4, 解绑缓存对象\n\n**绘制两种方式：**\nglDrawArrays();\n> * 使用当前绑定的顶点缓存对象进行绘制\nglDrawElements()\n> * 使用当前绑定的索引缓冲对象中的索引进行绘制\n\n第一种，\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\n// 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 使用当前绑定的顶点缓存对象进行绘制\nglDrawArrays(GL_TRIANGLES, 0, 3);\n// 解绑缓存对象\nglBindVertArray(0);\n```\n第二种,\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\n// 绑定顶点数组对象 \nglBindVertexArray(VAO);\n// 使用当前绑定的索引缓冲对象中的索引进行绘制\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n// 解绑缓存对象\nglBindVertArray(0);\n```\n\n<span style=\"color:blue\">*VAO有种结合VBO+EBO的意思*</span>\n**再回顾一遍它的存储内容**:\n> * glEnableVertexAttribArray和glDisableVertexAttribArray的调用。\n> * 通过glVertexAttribPointer设置的顶点属性配置。\n> * 通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。\n\n`退出循环后删除对象，释放缓存`\n```cpp\nglDeleteVertexArray(1, &VAO);\nglDeleteBuffers(1, &VBO);\nglDeleteBuffers(1, &EBO);\n```\n\n-----\n\n# 课后练习\n实现完成一个三角形/矩形的绘制后，对很多问题不是很清楚。如，\n> 1, 索引缓冲对象EBO绘制和顶点缓冲绘制VBO的区别和联系？\n> 2, 顶点着色器和片段着色器之间的关系？\n> 3, 设置顶点属性glVertexAttribPointer();函数的几个参数并不理解？\n\n## **1. 添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形**\n\n\n**glDrawArrays();**\n根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。\n\n\n```cpp\n// 先设置顶点数组\nGLfloat vertices[] = {\n    // 第一个triangle\n    0.5f,   0.5f, 0.0f,    // 右上角\n    0.5f,  -0.5f, 0.0f,    // 右下角\n    0.0f,   0.0f, 0.0f,    // 连接处\n    // 第二个triangle\n    -0.5f, -0.5f, 0.0f,    // 左下角\n    -0.5f,  0.5f, 0.0f,    // 左上角\n    0.0f,   0.0f, 0.0f     // 连接处\n  };\n```\n\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 6);  // 从顶点数组索引0开始依次绘制6个顶点\n\n```\n\n\n**glDrawElements();**\n根据索引的数组数据渲染图元，可以指定渲染图元的类型，给定一个数量，索引的类型以及指向索引的指针\n\n\n```cpp\n// 顶点输入\nGLfloat vertices[] = {\n  0.5f,   0.5f, 0.0f,    // 右上角\n  0.5f,  -0.5f, 0.0f,    // 右下角\n  -0.5f, -0.5f, 0.0f,    // 左下角\n  -0.5f,  0.5f, 0.0f     // 左上角\n};\n\nGLuint indices[] = {     // 索引从0开始\n  0, 1, 3,               // 第一个三角形\n  1, 2, 3                // 第二个三角形\n};\n```\n\n还需要在绑定VAO后绑定VBO和EBO\n```cpp\n// ...\n```\n\n```cpp\n// 激活程序对象\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0)  // 索引数组绘制6个顶点\n```\n\n<span style=\"color:blue\">*这里并没有给出索引数组的指针，我估计是绑定VAO后，Draw函数调用会从上下文获得这个指针。不知道这个猜想是否正确。*</span>\n\n[练习1源码 - github](https://github.com/timtingwei/LearnOpenGL/blob/master/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp)\n\n-----\n\n## **2. 创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO**\n// 不同VAO和VBO的ID各自放在同一个数组中，可以以数组创建，但需要单独绑定，复制缓存，设置顶点属性，以及单独绘制。\n\n**glGenBuffers**(GLsizei n,\n                GLuint* buffers);\n生成缓存对象的名字，输入缓存名字的数量n以及缓存对象名字存在的数组，返回n个缓存对象名字在**Buffers**中。直到调用glBindBuffer()，生成的缓存名字才和某一缓存对象绑定在一起。\n\n**glGenVertexArrays**(GLsizei n,\n                      GLuint* arrays);\n返回n个顶点数组对象名字，存储到arrays指针中。\n\n**glBindBuffer(GLenum target, \n               GLuint buffer);**\n绑定一个已经命名的缓存对象。\n\n*target*\n`----------------------------------------------------------`\n`GL_ARRAY_BUFFER`            |     顶点属性\n`GL_ELEMENT_ARRAY_BUFFER`    |     顶点数组索引\n`GL_TEXTURE_BUFFER`          |     纹理数据缓存\n`GL_UNIFORM_BUFFER`          |     Uniform块存储\n`----------------------------------------------------------`\n\n*buffer*\n    缓存对象的名字\n\n\n**glBindVertexArray**(GLuint array);\n用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。\n\n\n**glBufferData**(GLenum target\n                 GLsizeiptr size\n\t\t\t\t const GLvoid * data\n\t\t\t\t GLenum usage);\n创建或者初始化一个缓冲对象的数据的储存。\n\n*target*\n     这里是GL_ARRAY_BUFFER\n\n*size*\n   新建的缓冲对象大小，以字节(type)类型表示，可以使用sizeof(data)得到\n\n*data*\n   用于拷贝和初始化新的data对象的，指向data的指针，如果是NULL的话，没有数据被拷贝\n   \n*usage*\n    储存好的数据的使用模式。 `GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY`有这么几种。这里只用于静态绘制\n\n\n**glVertexAttribPointer**(GLuint index,\n                      GLint size,\n \t                  GLenum type,\n \t                  GLboolean normalized,\n \t                  GLsizei stride,\n \t                  const GLvoid * pointer);\n上面有所解释。现在就够用了。\n\n**glEnableVertexAttribArray**(GLuint index);\n启用设置好的顶点属性数组，\n*glDisableVertexAttribArray*(GLuint index);\n关闭\n\n*index* \n   顶点属性的序号，即位置的序号。与顶点着色器的(location=n)相关.\n\n**glBindVertexArray**();\n用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。\n\n**glDrawArrays**(GLenum mode,\n               GLint first,\n\t\t\t   GLsizei count);\n练习1中已经出现过，调用之前先要绑定Array;\n根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。\n\n\n代码实现如下：\n```cpp\n// 输入两个三角形各自的顶点数组\nGLfloat firstTriangleVertices[] = {\n  // 第一个triangle\n  0.5f,   0.5f, 0.0f,    // 右上角\n  0.1f,  -0.5f, 0.0f,    // 右下角\n  -0.5f,  0.3f, 0.0f,    // 左下角\n};\n\nGLfloat secondTriangleVertices[] = {\n  // 第二个triangle\n  -0.5f, -0.5f, 0.0f,    // 左下角\n  -0.1f,  0.5f, 0.0f,    // 左上角\n  0.5f,  -0.3f, 0.0f     // 右下角\n};\n```\n\n\n1, 共同以VAOs和VBOs以数组创建\n```cpp\nGLuint VBOs[2], VAOs[2];\nglGenBuffers(2, VAOs);\nglGenVertexArrays(2, VAOs);\n```\n2, 单独绑定, 复制, 设置顶点属性 \n```cpp\nglBindVertexArray(VAOs[0]);\nglBindBuffer(GL_ARRAY_BUFFER, VBOs[0]);\nglBufferData(GL_GL_ARRAY_BUFFER, sizeof(firstTriangleVertices),\n               firstTriangleVertices, GL_STATIC_DRAW);\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE,\n                        3 * sizeof(GLfloat), (GLvoid*)0);\nglEnableVertexAttribArray(0);\n\n// 同理VAOs[1], VBOs[1]..\nglBindVertexArray(VAOs[1]);\nglBindBuffer(GL_ARRAY_BUFFER, VBOs[1]);\nglBufferData(GL_GL_ARRAY_BUFFER, sizeof(secondTriangleVertices),\n               secondTriangleVertices, GL_STATIC_DRAW);\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE,\n                        3 * sizeof(GLfloat), (GLvoid*)0);\nglEnableVertexAttribArray(0);\n```\n\n\n3, 单独绘制\n```cpp\n// ==========firstTriangle=========\nglUseProgram(shaderProgram);\nglBindVertexArray(VAOs[0]);\nglDrawArrays(GL_TRIANGLES, 0, 3);\n// ==========secondTriangle========\nglBindVertexArray(VAOs[1]);\nglDrawArrays(GL_TRIANGLES, 0, 3);\nglBindVertexArray(0);\n```\n\n\n[练习2源码](https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.4.hello_triangle_exercise2)\n\n## **3.创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色**\n\n之前提出了一个问题，顶点着色器和片段着色器之间的关系？在这个练习中，有所涉及。\n\n// 放在同一个数组中，但需要各自绑定和各自绘制， 也可以匹配不同的顶点数组\n// 注意：片段着色器不能放在数组里。\n// 顶点着色器，片段着色器attach+link成program, 着色器需要创建，绑定源码，编译，检查编译四个步骤。\n\n1, GLSL编写橙色和黄色着色器代码\n2，分别附着，编译，检查着色器，并attach到不同的program\n3, 用不同的program进行draw\n\n\n**1, GLSL编写橙色和黄色着色器代码**\n```cpp\n// 片段着色器0\nconst GLchar* fragmentShaderSource0 = \"#version 330 core\\n\"\n    \"out vec4 color;\\n\"\n    \"void main() {\\n\"\n    \"color = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"   // orange\n    \"}\\n\\0\";\n\n// 片段着色器1\nconst GLchar* fragmentShaderSource1 = \"#version 330 core\\n\"\n    \"out vec4 color;\\n\"\n    \"void main() {\\n\"\n    \"color = vec4(1.0f, 1.0f, 0.0f, 1.0f);\\n\"   // yellow\n    \"}\\n\\0\";\n```\n\n**2，分别附着，编译，检查着色器，并attach到不同的program**\n```cpp\n// 创建片段着色器\n  GLuint fragmentShaderOrange;\n  GLuint fragmentShaderYellow;\n  GLuint shaderProgramOrange;\n  GLuint shaderProgramYellow;\n  fragmentShaderOrange = glCreateShader(GL_FRAGMENT_SHADER);\n  fragmentShaderYellow = glCreateShader(GL_FRAGMENT_SHADER);\n  shaderProgramOrange = glCreateProgram();\n  shaderProgramYellow = glCreateProgram();\n  // ===========编译第一个片段着色器===================\n  // 源码附加到着色器对象上\n  glShaderSource(fragmentShaderOrange, 1, &fragmentShaderSource0, NULL);\n  glCompileShader(fragmentShaderOrange);\n  // 检测glComplieShader是否编译成功\n  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n  if (!success) {\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n\n  // ===========编译第二个片段黄色着色器===================\n  // 源码附加到着色器对象上\n  glShaderSource(fragmentShaderYellow, 1, &fragmentShaderSource1, NULL);\n  glCompileShader(fragmentShaderYellow);\n  // 检测glComplieShader是否编译成功\n  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n  if (!success) {\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n  // 把两个着色器对象链接到用来渲染的两个着色程序中\n  glAttachShader(shaderProgramOrange, vertexShader);\n  // =====连接第一个片段着色器=====\n  glAttachShader(shaderProgramOrange, fragmentShaderOrange);\n  glLinkProgram(shaderProgramOrange);\n  glGetProgramiv(shaderProgramOrange, GL_LINK_STATUS, &success);\n  if (!success) {\n    glGetProgramInfoLog(shaderProgramOrange, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n  // =====连接第二个片段着色器=====\n  glAttachShader(shaderProgramYellow, vertexShader);\n  glAttachShader(shaderProgramYellow, fragmentShaderYellow);\n  glLinkProgram(shaderProgramYellow);\n  glGetProgramiv(shaderProgramYellow, GL_LINK_STATUS, &success);\n  if (!success) {\n    glGetProgramInfoLog(shaderProgramYellow, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"\n              << infoLog << std::endl;\n  }\n  // 删除着色器\n  glDeleteShader(vertexShader);\n  glDeleteShader(fragmentShaderOrange);\n  glDeleteShader(fragmentShaderYellow);\n```\n\n**3, 用不同的program进行draw**\n```cpp\n// =====激活程序对象绘制第一个triangle======\nglUseProgram(shaderProgramOrange);      // 使用第一个片段着色器连接的program\nglBindVertexArray(VAOs[0]);\nglDrawArrays(GL_TRIANGLES, 0, 3);  // 从索引0开始依次绘制3个顶点\n\n// =====激活程序对象绘制第二个triangle======\nglUseProgram(shaderProgramYellow);      // 使用第二个片段着色器连接的program\nglBindVertexArray(VAOs[1]);\nglDrawArrays(GL_TRIANGLES, 0, 3);  // 从索引0开始依次绘制3个顶点\n```\n\n[练习3源码](https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.5.hello_triangle_exercise3)\n\n=======\n\nrefwebsite:\n[你好三角形 - learnopengl-CN](https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/)\n\n\n","slug":"hello-triangle-three-execises","published":1,"updated":"2017-12-28T13:04:06.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukurt000dfadrj109y26v","content":"<p>代码已托管在<a href=\"https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started\" target=\"_blank\" rel=\"noopener\">/timtingwei/LearnOpenGL</a></p>\n<h1 id=\"图形管线渲染有哪几个阶段？\"><a href=\"#图形管线渲染有哪几个阶段？\" class=\"headerlink\" title=\"图形管线渲染有哪几个阶段？\"></a>图形管线渲染有哪几个阶段？</h1><p>顶点数据(Vertex data[])  -&gt;</p>\n<blockquote>\n<p>1, <strong>顶点着色器</strong>(Vertex Shader) -&gt;<br>2, 形状(图元)装配(Shape Assembly) -&gt;<br>3, <strong>几何着色器</strong>(Geometry Shader) -&gt;<br>4, 光栅化(Rasterization) -&gt;<br>5, <strong>片段着色器</strong>(Fragment Shader) -&gt;<br>6, 测试与混合(Test And Blending)</p>\n</blockquote>\n<p>三个着色器可以自己定义。</p>\n<p><strong>顶点数据(Vertex data)：</strong></p>\n<blockquote>\n<ul>\n<li>Vertex是一个3D坐标的集合</li>\n<li>Vertex Data是用顶点属性(Vertex Attribute), 如位置Position, 颜色Color</li>\n</ul>\n</blockquote>\n<p><strong>顶点着色器(Vertex Shader)：</strong></p>\n<blockquote>\n<ul>\n<li>把3D坐标转换成另外一种3D坐标</li>\n<li>允许对Vertex Attribute做基本处理</li>\n</ul>\n</blockquote>\n<p><strong>片段着色器(Fragment Shader)：</strong></p>\n<blockquote>\n<ul>\n<li>计算一个像素最终的颜色</li>\n<li>着色器包含3D场景数据(光照，阴影，光的颜色)</li>\n</ul>\n</blockquote>\n<p><strong>Alpha测试和混合(Blending):</strong></p>\n<blockquote>\n<ul>\n<li>测试深度，反应前后。</li>\n<li>检查Alpha并混合，(同个片段着色器，渲染多个三角形时候的颜色可能不同)</li>\n</ul>\n</blockquote>\n<p>补充: 图元(Primitive):</p>\n<blockquote>\n<ul>\n<li>任何一个绘制指令的调用，都把图元传递给OpenGL。</li>\n<li>如GL_POINTS、GL_TRIANGLES、GL_LINE_STRIP。</li>\n</ul>\n</blockquote>\n<h1 id=\"绘制绘制三角形\"><a href=\"#绘制绘制三角形\" class=\"headerlink\" title=\"绘制绘制三角形\"></a>绘制绘制三角形</h1><h2 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h2><p>使用GLSL(OpenGL Shading Language)编写顶点着色器<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core          <span class=\"comment\">// 每个着色器起始于版本声明, core代表核心模式</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">layout (location=<span class=\"number\">0</span>) in vec3 aPos;      <span class=\"comment\">// 设定输入变量的位置值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  gl_Position = vec4(aPos.x, aPos.y, aPos.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为什么需要<strong>layout (location=0)</strong>设定位置值？</p>\n<blockquote>\n<ul>\n<li><strong>glVertexAttributPointer</strong>函数第一个参数指定配置顶点属性，而**layout (location=0) 定义了顶点某变量的position属性。</li>\n</ul>\n</blockquote>\n<p>相关内容in, out, uniform, type类型, 向量组合, main函数，会在下一节，<a href=\"https://timtingwei.github.io\">着色器中</a>讲解</p>\n<h2 id=\"编译顶点着色器\"><a href=\"#编译顶点着色器\" class=\"headerlink\" title=\"编译顶点着色器\"></a>编译顶点着色器</h2><p>编写着色器源码后，</p>\n<blockquote>\n<p>1, 先创建着色器对象;<br>2, 再把源码附加到着色器对象上;<br>3, 编译并检查</p>\n</blockquote>\n<p><strong>1, 创建顶点着色器对象</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> vertexShader;                         <span class=\"comment\">// ID引用</span></span><br><span class=\"line\">vertexShader = glCreateShader(GL_VERTEX_SHADER);   <span class=\"comment\">// 传递着色器类型参数</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>2, 附源码</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glShaderSource(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong>glShaderSource</strong>函数的几个参数：</p>\n<blockquote>\n<p>0, 着色器对象<br>1, 传递的源码字符数量<br>2, 顶点着色器的真正源码<br>3, 先设置为NULL</p>\n</blockquote>\n<p><strong>3, 编译</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glCompileShader(vertexShader);</span><br><span class=\"line\"><span class=\"comment\">// 检查编译是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> success;</span><br><span class=\"line\"><span class=\"keyword\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\">glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"comment\">// 如果不成功，用glGetShaderInfoLog获取信息, 存储再InfoLog中，打印</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> &#123;!success&#125; &#123;</span><br><span class=\"line\">  glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"片段着色器\"><a href=\"#片段着色器\" class=\"headerlink\" title=\"片段着色器\"></a>片段着色器</h2><p>同理顶点着色器，编写着色器源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"></span><br><span class=\"line\">out vec4 FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  FragColor =  vec4(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>片段着色器只有一个vec4作为out, 表示最终的输出颜色, 最后一个值是alpha量</p>\n<h2 id=\"编译片段着色器\"><a href=\"#编译片段着色器\" class=\"headerlink\" title=\"编译片段着色器\"></a>编译片段着色器</h2><p>1, 创建对象<br>2, 附加源码<br>3, 编译并检查</p>\n<p>自己重新写一遍, 并检查错误<br>1, 创建对象尝试<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> fragmentShader;</span><br><span class=\"line\">glCreateShader(fragmentShader, GL_FRAGMENT_SHADER);   <span class=\"comment\">// ERROR</span></span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\"> <em>改正</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> fragmentShader;</span><br><span class=\"line\">glCreateShader(GL_FRAGMENT_SHADER);     <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:不需要用着色器对象作为函数的参数，</span></span><br></pre></td></tr></table></figure></p>\n<p>查阅<a href=\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glCreateShader.xhtml\" target=\"_blank\" rel=\"noopener\">khronos.org - glCreateShader</a></p>\n<blockquote>\n<ul>\n<li>Like buffer and texture objects, the name space for shader objects may be shared across a set of contexts, as long as the server sides of the contexts share the same address space. If the name space is shared across contexts, any attached objects and the data associated with those attached objects are shared as well.<br>会绑定上下文中的ID创建object, 而且同一ShaderType会被联系起来。</li>\n</ul>\n</blockquote>\n<p>2, 附源码尝试<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glShaderSource(<span class=\"number\">1</span>, fragmentShader, fragmentSource, <span class=\"literal\">NULL</span>)   <span class=\"comment\">// ERROR</span></span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\"> <em>改正</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glShaderSource(fragmentShader, <span class=\"number\">1</span>, fragmentShaderSource, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:交换参数位置</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>着色器对象</li>\n<li>传递源码字符的数量</li>\n</ol>\n</blockquote>\n<p>3, 尝试编译<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> success;    <span class=\"comment\">// ERROR</span></span><br><span class=\"line\">glCompileShader(GL_FRAGMENT_SHADER, fragmentShader, success); <span class=\"comment\">// ERROR</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* infoLog[<span class=\"number\">512</span>];                                <span class=\"comment\">// ERROR</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败把报错内容储存再infoLog中输出</span></span><br><span class=\"line\">  glGetShaderinfoLog(fragmentShader, &amp;success, &amp;infoLog);   <span class=\"comment\">// ERROR</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"COMPILE::ERROR::FRAGEMENT::SHADER\"</span> </span><br><span class=\"line\">            &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\"> <em>改正</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glCompileShader(fragmentShader);     <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:只要着色器对象一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> success;                         <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>: success是一个int类型</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> infoLog[<span class=\"number\">512</span>];                   <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>: char 并非 unsigned cha*</span></span><br><span class=\"line\">glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);   <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:获取success在先，才能对success做判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败输出</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建着色器程序\"><a href=\"#创建着色器程序\" class=\"headerlink\" title=\"创建着色器程序\"></a>创建着色器程序</h2><p>绘制图元时，使用的是glUseProgram(shaderProgram), 因此，先要创建着色器程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> shaderProgram;</span><br><span class=\"line\">shaderProgram = glCreateProgram();</span><br></pre></td></tr></table></figure>\n<h2 id=\"链接着色器对象\"><a href=\"#链接着色器对象\" class=\"headerlink\" title=\"链接着色器对象\"></a>链接着色器对象</h2><p>两个着色器对象要链接。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glAttachShader(shaderProgram, vertexShader);</span><br><span class=\"line\">glAttachShader(shaderProgram, fragmentShader);</span><br><span class=\"line\">glLinkProgram(shaderProgram);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译着色程序\"><a href=\"#编译着色程序\" class=\"headerlink\" title=\"编译着色程序\"></a>编译着色程序</h2><p>与之前的着色器编译原理相同，只是调用函数和参数变量改变了。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">  glGetProgramInfoLog(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>之后可以glUseProgram函数，激活程序对象。激活后，着色器调用和渲染调用都会使用这个程序对象。</p>\n<h2 id=\"删除着色器\"><a href=\"#删除着色器\" class=\"headerlink\" title=\"删除着色器\"></a>删除着色器</h2><p>完成以上几步后不要忘记删除着色器<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glDeleteShader(vertexShader);</span><br><span class=\"line\">glDeleteShader(fragmentShader);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输入顶点以及索引\"><a href=\"#输入顶点以及索引\" class=\"headerlink\" title=\"输入顶点以及索引\"></a>输入顶点以及索引</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点输入</span></span><br><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>赋值array的时候, 不要忘记{};</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点索引</span></span><br><span class=\"line\">GLuint indices[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>                <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">  <span class=\"comment\">// ...                 // 可根据vertices数组, 建立多组索引</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建和绑定顶点数组对象-VAO\"><a href=\"#创建和绑定顶点数组对象-VAO\" class=\"headerlink\" title=\"创建和绑定顶点数组对象(VAO)\"></a><strong>创建和绑定顶点数组对象(VAO)</strong></h2><p>VAO = Vertex Array Object</p>\n<p>功能:</p>\n<blockquote>\n<ul>\n<li>随后的顶点属性调用都会储存在这个VAO之中。</li>\n<li>使得在不同顶点数据和属性设置之间切换变得简单。</li>\n</ul>\n</blockquote>\n<p><strong>存储内容</strong>:</p>\n<blockquote>\n<ul>\n<li>glEnableVertexAttribArray和glDisableVertexAttribArray的调用。</li>\n<li>通过glVertexAttribPointer设置的顶点属性配置。</li>\n<li>通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n</blockquote>\n<p>使用注意:</p>\n<blockquote>\n<ul>\n<li><strong>先VAO，再绑定和设置VBO, EBO 以及设置顶点属性指针</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VAO;</span><br><span class=\"line\">glGenVertexArrays(<span class=\"number\">1</span>, &amp;VAO);   <span class=\"comment\">// 创建VAO对象</span></span><br><span class=\"line\">glBindVertexArray(VAO);       <span class=\"comment\">// 绑定顶点数组对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建和绑定顶点缓冲对象-VBO\"><a href=\"#创建和绑定顶点缓冲对象-VBO\" class=\"headerlink\" title=\"创建和绑定顶点缓冲对象(VBO)\"></a><strong>创建和绑定顶点缓冲对象(VBO)</strong></h2><p>OpenGL如何解释顶点数据的内存，并指定其如何发送给显卡。</p>\n<p>作用:</p>\n<blockquote>\n<ul>\n<li>通过VBO(Vertex Buffer Object)管理这个内存，它会在GPU内存中存储大量顶点。</li>\n<li>一次性发送大量数据到显卡上，而不是每个顶点发送一次。CPU发到显卡上速度慢，因此，一次发送多个比较好。而发送过去之后顶点着色器又能够立即访问。</li>\n</ul>\n</blockquote>\n<p><span style=\"color:blue\"><em>我想这个过程应该是发生图形管线渲染的第一个阶段，是顶点数据和顶点着色器如何对接？就是依靠CPU发送到显卡上</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VBO;</span><br><span class=\"line\">glGenBuffer(<span class=\"number\">1</span>, &amp;VBO);           <span class=\"comment\">// 创建</span></span><br><span class=\"line\"><span class=\"comment\">// 把顶点数组复制到缓存中提供OpenGL使用</span></span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"索引缓冲对象-EBO\"><a href=\"#索引缓冲对象-EBO\" class=\"headerlink\" title=\"索引缓冲对象(EBO)\"></a><strong>索引缓冲对象(EBO)</strong></h2><p>可以创建不同的索引数组，而使用同一个顶点数组。如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> indices[] = &#123; <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint EBO;</span><br><span class=\"line\">glGenBuffer(<span class=\"number\">1</span>, &amp;EBO);                <span class=\"comment\">// 创建</span></span><br><span class=\"line\"><span class=\"comment\">// 把顶点索引复制到缓存中提供OpenGL使用</span></span><br><span class=\"line\">glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\">glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置顶点属性\"><a href=\"#设置顶点属性\" class=\"headerlink\" title=\"设置顶点属性\"></a><strong>设置顶点属性</strong></h2><p><img src=\"/images/vertex_attribute_pointer.png\" alt=\"vertex_attribute_pointer\">    </p>\n<blockquote>\n<ul>\n<li>位置数据被储存为32位(4字节)浮点值 =&gt; siezeof(flaot) = 4 types = 32bits</li>\n<li>每个位置包含3个这样的值</li>\n<li>没有空隙, 紧密排列。</li>\n<li>数据中的第一个值再缓冲开始位置。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>), (<span class=\"keyword\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexattribArray(<span class=\"number\">0</span>);    <span class=\"comment\">// 开启位置为0的顶点属性</span></span><br></pre></td></tr></table></figure>\n<p><strong>glVertexAttribPointer参数</strong></p>\n<blockquote>\n<p>1, 要配置的顶点属性的位置值。输入的参数顶点属性的位置值。还记得之前的 <span style=\"color:red\"><strong>layout (location=0) in vec3 xx</strong></span> 吗？<br>2, 顶点属性的大小。 vec3 =&gt; 3个值组成<br>3, 指定数据类型。 (GLSL中vec*都是由浮点数值组成的)<br>4, 是否被标准化。 GL_TRUE代表是，所有数据(对有符号数据是-1)映射到0到1之间;<br>5, 步长，这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节。因为是紧密排列设置成0也可以，OpenGL自己会设置。</p>\n<ol>\n<li>偏移量。位置数据在数组开头就设置成0</li>\n</ol>\n</blockquote>\n<p>顶点属性默认是禁用的，要用glEnableVertexAttribArray函数开启。<br>输入的参数顶点属性的位置值。<span style=\"color:red\"><strong>layout (location=0) in vec3 xx</strong></span> </p>\n<h2 id=\"绘制图元\"><a href=\"#绘制图元\" class=\"headerlink\" title=\"绘制图元\"></a>绘制图元</h2><p><code>在主循环内部绘制图元。</code></p>\n<p>1, 激活程序对象<br>2, 绑定缓存对象<br>3, 绘制<br>4, 解绑缓存对象</p>\n<p><strong>绘制两种方式：</strong><br>glDrawArrays();</p>\n<blockquote>\n<ul>\n<li>使用当前绑定的顶点缓存对象进行绘制<br>glDrawElements()</li>\n<li>使用当前绑定的索引缓冲对象中的索引进行绘制</li>\n</ul>\n</blockquote>\n<p>第一种，<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 绑定顶点数组对象</span></span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 使用当前绑定的顶点缓存对象进行绘制</span></span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解绑缓存对象</span></span><br><span class=\"line\">glBindVertArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第二种,<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 绑定顶点数组对象 </span></span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 使用当前绑定的索引缓冲对象中的索引进行绘制</span></span><br><span class=\"line\">glDrawElements(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解绑缓存对象</span></span><br><span class=\"line\">glBindVertArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:blue\"><em>VAO有种结合VBO+EBO的意思</em></span><br><strong>再回顾一遍它的存储内容</strong>:</p>\n<blockquote>\n<ul>\n<li>glEnableVertexAttribArray和glDisableVertexAttribArray的调用。</li>\n<li>通过glVertexAttribPointer设置的顶点属性配置。</li>\n<li>通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n</blockquote>\n<p><code>退出循环后删除对象，释放缓存</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glDeleteVertexArray(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">glDeleteBuffers(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">glDeleteBuffers(<span class=\"number\">1</span>, &amp;EBO);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><p>实现完成一个三角形/矩形的绘制后，对很多问题不是很清楚。如，</p>\n<blockquote>\n<p>1, 索引缓冲对象EBO绘制和顶点缓冲绘制VBO的区别和联系？<br>2, 顶点着色器和片段着色器之间的关系？<br>3, 设置顶点属性glVertexAttribPointer();函数的几个参数并不理解？</p>\n</blockquote>\n<h2 id=\"1-添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形\"><a href=\"#1-添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形\" class=\"headerlink\" title=\"1. 添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形\"></a><strong>1. 添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形</strong></h2><p><strong>glDrawArrays();</strong><br>根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先设置顶点数组</span></span><br><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个triangle</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">0.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 连接处</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个triangle</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"number\">0.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 连接处</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">6</span>);  <span class=\"comment\">// 从顶点数组索引0开始依次绘制6个顶点</span></span><br></pre></td></tr></table></figure>\n<p><strong>glDrawElements();</strong><br>根据索引的数组数据渲染图元，可以指定渲染图元的类型，给定一个数量，索引的类型以及指向索引的指针</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点输入</span></span><br><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLuint indices[] = &#123;     <span class=\"comment\">// 索引从0开始</span></span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>,               <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>                <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>还需要在绑定VAO后绑定VBO和EBO<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawElements(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>)  <span class=\"comment\">// 索引数组绘制6个顶点</span></span><br></pre></td></tr></table></figure>\n<p><span style=\"color:blue\"><em>这里并没有给出索引数组的指针，我估计是绑定VAO后，Draw函数调用会从上下文获得这个指针。不知道这个猜想是否正确。</em></span></p>\n<p><a href=\"https://github.com/timtingwei/LearnOpenGL/blob/master/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp\" target=\"_blank\" rel=\"noopener\">练习1源码 - github</a></p>\n<hr>\n<h2 id=\"2-创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO\"><a href=\"#2-创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO\" class=\"headerlink\" title=\"2. 创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO\"></a><strong>2. 创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO</strong></h2><p>// 不同VAO和VBO的ID各自放在同一个数组中，可以以数组创建，但需要单独绑定，复制缓存，设置顶点属性，以及单独绘制。</p>\n<p><strong>glGenBuffers</strong>(GLsizei n,<br>                GLuint<em> buffers);<br>生成缓存对象的名字，输入缓存名字的数量n以及缓存对象名字存在的数组，返回n个缓存对象名字在<em>*Buffers</em></em>中。直到调用glBindBuffer()，生成的缓存名字才和某一缓存对象绑定在一起。</p>\n<p><strong>glGenVertexArrays</strong>(GLsizei n,<br>                      GLuint* arrays);<br>返回n个顶点数组对象名字，存储到arrays指针中。</p>\n<p><strong>glBindBuffer(GLenum target,<br>               GLuint buffer);</strong><br>绑定一个已经命名的缓存对象。</p>\n<p><em>target</em><br><code>----------------------------------------------------------</code><br><code>GL_ARRAY_BUFFER</code>            |     顶点属性<br><code>GL_ELEMENT_ARRAY_BUFFER</code>    |     顶点数组索引<br><code>GL_TEXTURE_BUFFER</code>          |     纹理数据缓存<br><code>GL_UNIFORM_BUFFER</code>          |     Uniform块存储<br><code>----------------------------------------------------------</code></p>\n<p><em>buffer</em><br>    缓存对象的名字</p>\n<p><strong>glBindVertexArray</strong>(GLuint array);<br>用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。</p>\n<p><strong>glBufferData</strong>(GLenum target<br>                 GLsizeiptr size<br>                 const GLvoid * data<br>                 GLenum usage);<br>创建或者初始化一个缓冲对象的数据的储存。</p>\n<p><em>target</em><br>     这里是GL_ARRAY_BUFFER</p>\n<p><em>size</em><br>   新建的缓冲对象大小，以字节(type)类型表示，可以使用sizeof(data)得到</p>\n<p><em>data</em><br>   用于拷贝和初始化新的data对象的，指向data的指针，如果是NULL的话，没有数据被拷贝</p>\n<p><em>usage</em><br>    储存好的数据的使用模式。 <code>GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</code>有这么几种。这里只用于静态绘制</p>\n<p><strong>glVertexAttribPointer</strong>(GLuint index,<br>                      GLint size,<br>                       GLenum type,<br>                       GLboolean normalized,<br>                       GLsizei stride,<br>                       const GLvoid * pointer);<br>上面有所解释。现在就够用了。</p>\n<p><strong>glEnableVertexAttribArray</strong>(GLuint index);<br>启用设置好的顶点属性数组，<br><em>glDisableVertexAttribArray</em>(GLuint index);<br>关闭</p>\n<p><em>index</em><br>   顶点属性的序号，即位置的序号。与顶点着色器的(location=n)相关.</p>\n<p><strong>glBindVertexArray</strong>();<br>用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。</p>\n<p><strong>glDrawArrays</strong>(GLenum mode,<br>               GLint first,<br>               GLsizei count);<br>练习1中已经出现过，调用之前先要绑定Array;<br>根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。</p>\n<p>代码实现如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入两个三角形各自的顶点数组</span></span><br><span class=\"line\">GLfloat firstTriangleVertices[] = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第一个triangle</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">  <span class=\"number\">0.1f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.3f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat secondTriangleVertices[] = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第二个triangle</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.1f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.3f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>1, 共同以VAOs和VBOs以数组创建<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VBOs[<span class=\"number\">2</span>], VAOs[<span class=\"number\">2</span>];</span><br><span class=\"line\">glGenBuffers(<span class=\"number\">2</span>, VAOs);</span><br><span class=\"line\">glGenVertexArrays(<span class=\"number\">2</span>, VAOs);</span><br></pre></td></tr></table></figure></p>\n<p>2, 单独绑定, 复制, 设置顶点属性<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glBufferData(GL_GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(firstTriangleVertices),</span><br><span class=\"line\">               firstTriangleVertices, GL_STATIC_DRAW);</span><br><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE,</span><br><span class=\"line\">                        <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同理VAOs[1], VBOs[1]..</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glBufferData(GL_GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(secondTriangleVertices),</span><br><span class=\"line\">               secondTriangleVertices, GL_STATIC_DRAW);</span><br><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE,</span><br><span class=\"line\">                        <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>3, 单独绘制<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ==========firstTriangle=========</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// ==========secondTriangle========</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.4.hello_triangle_exercise2\" target=\"_blank\" rel=\"noopener\">练习2源码</a></p>\n<h2 id=\"3-创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色\"><a href=\"#3-创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色\" class=\"headerlink\" title=\"3.创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色\"></a><strong>3.创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色</strong></h2><p>之前提出了一个问题，顶点着色器和片段着色器之间的关系？在这个练习中，有所涉及。</p>\n<p>// 放在同一个数组中，但需要各自绑定和各自绘制， 也可以匹配不同的顶点数组<br>// 注意：片段着色器不能放在数组里。<br>// 顶点着色器，片段着色器attach+link成program, 着色器需要创建，绑定源码，编译，检查编译四个步骤。</p>\n<p>1, GLSL编写橙色和黄色着色器代码<br>2，分别附着，编译，检查着色器，并attach到不同的program<br>3, 用不同的program进行draw</p>\n<p><strong>1, GLSL编写橙色和黄色着色器代码</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 片段着色器0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLchar* fragmentShaderSource0 = <span class=\"string\">\"#version 330 core\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"out vec4 color;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"void main() &#123;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"color = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"</span>   <span class=\"comment\">// orange</span></span><br><span class=\"line\">    <span class=\"string\">\"&#125;\\n\\0\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 片段着色器1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLchar* fragmentShaderSource1 = <span class=\"string\">\"#version 330 core\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"out vec4 color;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"void main() &#123;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"color = vec4(1.0f, 1.0f, 0.0f, 1.0f);\\n\"</span>   <span class=\"comment\">// yellow</span></span><br><span class=\"line\">    <span class=\"string\">\"&#125;\\n\\0\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2，分别附着，编译，检查着色器，并attach到不同的program</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建片段着色器</span></span><br><span class=\"line\">  GLuint fragmentShaderOrange;</span><br><span class=\"line\">  GLuint fragmentShaderYellow;</span><br><span class=\"line\">  GLuint shaderProgramOrange;</span><br><span class=\"line\">  GLuint shaderProgramYellow;</span><br><span class=\"line\">  fragmentShaderOrange = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">  fragmentShaderYellow = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">  shaderProgramOrange = glCreateProgram();</span><br><span class=\"line\">  shaderProgramYellow = glCreateProgram();</span><br><span class=\"line\">  <span class=\"comment\">// ===========编译第一个片段着色器===================</span></span><br><span class=\"line\">  <span class=\"comment\">// 源码附加到着色器对象上</span></span><br><span class=\"line\">  glShaderSource(fragmentShaderOrange, <span class=\"number\">1</span>, &amp;fragmentShaderSource0, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  glCompileShader(fragmentShaderOrange);</span><br><span class=\"line\">  <span class=\"comment\">// 检测glComplieShader是否编译成功</span></span><br><span class=\"line\">  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ===========编译第二个片段黄色着色器===================</span></span><br><span class=\"line\">  <span class=\"comment\">// 源码附加到着色器对象上</span></span><br><span class=\"line\">  glShaderSource(fragmentShaderYellow, <span class=\"number\">1</span>, &amp;fragmentShaderSource1, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  glCompileShader(fragmentShaderYellow);</span><br><span class=\"line\">  <span class=\"comment\">// 检测glComplieShader是否编译成功</span></span><br><span class=\"line\">  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 把两个着色器对象链接到用来渲染的两个着色程序中</span></span><br><span class=\"line\">  glAttachShader(shaderProgramOrange, vertexShader);</span><br><span class=\"line\">  <span class=\"comment\">// =====连接第一个片段着色器=====</span></span><br><span class=\"line\">  glAttachShader(shaderProgramOrange, fragmentShaderOrange);</span><br><span class=\"line\">  glLinkProgram(shaderProgramOrange);</span><br><span class=\"line\">  glGetProgramiv(shaderProgramOrange, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetProgramInfoLog(shaderProgramOrange, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// =====连接第二个片段着色器=====</span></span><br><span class=\"line\">  glAttachShader(shaderProgramYellow, vertexShader);</span><br><span class=\"line\">  glAttachShader(shaderProgramYellow, fragmentShaderYellow);</span><br><span class=\"line\">  glLinkProgram(shaderProgramYellow);</span><br><span class=\"line\">  glGetProgramiv(shaderProgramYellow, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetProgramInfoLog(shaderProgramYellow, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除着色器</span></span><br><span class=\"line\">  glDeleteShader(vertexShader);</span><br><span class=\"line\">  glDeleteShader(fragmentShaderOrange);</span><br><span class=\"line\">  glDeleteShader(fragmentShaderYellow);</span><br></pre></td></tr></table></figure></p>\n<p><strong>3, 用不同的program进行draw</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// =====激活程序对象绘制第一个triangle======</span></span><br><span class=\"line\">glUseProgram(shaderProgramOrange);      <span class=\"comment\">// 使用第一个片段着色器连接的program</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// 从索引0开始依次绘制3个顶点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =====激活程序对象绘制第二个triangle======</span></span><br><span class=\"line\">glUseProgram(shaderProgramYellow);      <span class=\"comment\">// 使用第二个片段着色器连接的program</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// 从索引0开始依次绘制3个顶点</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.5.hello_triangle_exercise3\" target=\"_blank\" rel=\"noopener\">练习3源码</a></p>\n<p>=======</p>\n<p>refwebsite:<br><a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/\" target=\"_blank\" rel=\"noopener\">你好三角形 - learnopengl-CN</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>代码已托管在<a href=\"https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started\" target=\"_blank\" rel=\"noopener\">/timtingwei/LearnOpenGL</a></p>\n<h1 id=\"图形管线渲染有哪几个阶段？\"><a href=\"#图形管线渲染有哪几个阶段？\" class=\"headerlink\" title=\"图形管线渲染有哪几个阶段？\"></a>图形管线渲染有哪几个阶段？</h1><p>顶点数据(Vertex data[])  -&gt;</p>\n<blockquote>\n<p>1, <strong>顶点着色器</strong>(Vertex Shader) -&gt;<br>2, 形状(图元)装配(Shape Assembly) -&gt;<br>3, <strong>几何着色器</strong>(Geometry Shader) -&gt;<br>4, 光栅化(Rasterization) -&gt;<br>5, <strong>片段着色器</strong>(Fragment Shader) -&gt;<br>6, 测试与混合(Test And Blending)</p>\n</blockquote>\n<p>三个着色器可以自己定义。</p>\n<p><strong>顶点数据(Vertex data)：</strong></p>\n<blockquote>\n<ul>\n<li>Vertex是一个3D坐标的集合</li>\n<li>Vertex Data是用顶点属性(Vertex Attribute), 如位置Position, 颜色Color</li>\n</ul>\n</blockquote>\n<p><strong>顶点着色器(Vertex Shader)：</strong></p>\n<blockquote>\n<ul>\n<li>把3D坐标转换成另外一种3D坐标</li>\n<li>允许对Vertex Attribute做基本处理</li>\n</ul>\n</blockquote>\n<p><strong>片段着色器(Fragment Shader)：</strong></p>\n<blockquote>\n<ul>\n<li>计算一个像素最终的颜色</li>\n<li>着色器包含3D场景数据(光照，阴影，光的颜色)</li>\n</ul>\n</blockquote>\n<p><strong>Alpha测试和混合(Blending):</strong></p>\n<blockquote>\n<ul>\n<li>测试深度，反应前后。</li>\n<li>检查Alpha并混合，(同个片段着色器，渲染多个三角形时候的颜色可能不同)</li>\n</ul>\n</blockquote>\n<p>补充: 图元(Primitive):</p>\n<blockquote>\n<ul>\n<li>任何一个绘制指令的调用，都把图元传递给OpenGL。</li>\n<li>如GL_POINTS、GL_TRIANGLES、GL_LINE_STRIP。</li>\n</ul>\n</blockquote>\n<h1 id=\"绘制绘制三角形\"><a href=\"#绘制绘制三角形\" class=\"headerlink\" title=\"绘制绘制三角形\"></a>绘制绘制三角形</h1><h2 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h2><p>使用GLSL(OpenGL Shading Language)编写顶点着色器<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core          <span class=\"comment\">// 每个着色器起始于版本声明, core代表核心模式</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">layout (location=<span class=\"number\">0</span>) in vec3 aPos;      <span class=\"comment\">// 设定输入变量的位置值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  gl_Position = vec4(aPos.x, aPos.y, aPos.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为什么需要<strong>layout (location=0)</strong>设定位置值？</p>\n<blockquote>\n<ul>\n<li><strong>glVertexAttributPointer</strong>函数第一个参数指定配置顶点属性，而**layout (location=0) 定义了顶点某变量的position属性。</li>\n</ul>\n</blockquote>\n<p>相关内容in, out, uniform, type类型, 向量组合, main函数，会在下一节，<a href=\"https://timtingwei.github.io\">着色器中</a>讲解</p>\n<h2 id=\"编译顶点着色器\"><a href=\"#编译顶点着色器\" class=\"headerlink\" title=\"编译顶点着色器\"></a>编译顶点着色器</h2><p>编写着色器源码后，</p>\n<blockquote>\n<p>1, 先创建着色器对象;<br>2, 再把源码附加到着色器对象上;<br>3, 编译并检查</p>\n</blockquote>\n<p><strong>1, 创建顶点着色器对象</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> vertexShader;                         <span class=\"comment\">// ID引用</span></span><br><span class=\"line\">vertexShader = glCreateShader(GL_VERTEX_SHADER);   <span class=\"comment\">// 传递着色器类型参数</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>2, 附源码</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glShaderSource(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong>glShaderSource</strong>函数的几个参数：</p>\n<blockquote>\n<p>0, 着色器对象<br>1, 传递的源码字符数量<br>2, 顶点着色器的真正源码<br>3, 先设置为NULL</p>\n</blockquote>\n<p><strong>3, 编译</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glCompileShader(vertexShader);</span><br><span class=\"line\"><span class=\"comment\">// 检查编译是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> success;</span><br><span class=\"line\"><span class=\"keyword\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\">glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"comment\">// 如果不成功，用glGetShaderInfoLog获取信息, 存储再InfoLog中，打印</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> &#123;!success&#125; &#123;</span><br><span class=\"line\">  glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"片段着色器\"><a href=\"#片段着色器\" class=\"headerlink\" title=\"片段着色器\"></a>片段着色器</h2><p>同理顶点着色器，编写着色器源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"></span><br><span class=\"line\">out vec4 FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  FragColor =  vec4(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>片段着色器只有一个vec4作为out, 表示最终的输出颜色, 最后一个值是alpha量</p>\n<h2 id=\"编译片段着色器\"><a href=\"#编译片段着色器\" class=\"headerlink\" title=\"编译片段着色器\"></a>编译片段着色器</h2><p>1, 创建对象<br>2, 附加源码<br>3, 编译并检查</p>\n<p>自己重新写一遍, 并检查错误<br>1, 创建对象尝试<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> fragmentShader;</span><br><span class=\"line\">glCreateShader(fragmentShader, GL_FRAGMENT_SHADER);   <span class=\"comment\">// ERROR</span></span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\"> <em>改正</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> fragmentShader;</span><br><span class=\"line\">glCreateShader(GL_FRAGMENT_SHADER);     <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:不需要用着色器对象作为函数的参数，</span></span><br></pre></td></tr></table></figure></p>\n<p>查阅<a href=\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glCreateShader.xhtml\" target=\"_blank\" rel=\"noopener\">khronos.org - glCreateShader</a></p>\n<blockquote>\n<ul>\n<li>Like buffer and texture objects, the name space for shader objects may be shared across a set of contexts, as long as the server sides of the contexts share the same address space. If the name space is shared across contexts, any attached objects and the data associated with those attached objects are shared as well.<br>会绑定上下文中的ID创建object, 而且同一ShaderType会被联系起来。</li>\n</ul>\n</blockquote>\n<p>2, 附源码尝试<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glShaderSource(<span class=\"number\">1</span>, fragmentShader, fragmentSource, <span class=\"literal\">NULL</span>)   <span class=\"comment\">// ERROR</span></span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\"> <em>改正</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glShaderSource(fragmentShader, <span class=\"number\">1</span>, fragmentShaderSource, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:交换参数位置</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>着色器对象</li>\n<li>传递源码字符的数量</li>\n</ol>\n</blockquote>\n<p>3, 尝试编译<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> success;    <span class=\"comment\">// ERROR</span></span><br><span class=\"line\">glCompileShader(GL_FRAGMENT_SHADER, fragmentShader, success); <span class=\"comment\">// ERROR</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* infoLog[<span class=\"number\">512</span>];                                <span class=\"comment\">// ERROR</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败把报错内容储存再infoLog中输出</span></span><br><span class=\"line\">  glGetShaderinfoLog(fragmentShader, &amp;success, &amp;infoLog);   <span class=\"comment\">// ERROR</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"COMPILE::ERROR::FRAGEMENT::SHADER\"</span> </span><br><span class=\"line\">            &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\"> <em>改正</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glCompileShader(fragmentShader);     <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:只要着色器对象一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> success;                         <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>: success是一个int类型</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> infoLog[<span class=\"number\">512</span>];                   <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>: char 并非 unsigned cha*</span></span><br><span class=\"line\">glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);   <span class=\"comment\">// DE<span class=\"doctag\">BUG:</span>:获取success在先，才能对success做判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败输出</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建着色器程序\"><a href=\"#创建着色器程序\" class=\"headerlink\" title=\"创建着色器程序\"></a>创建着色器程序</h2><p>绘制图元时，使用的是glUseProgram(shaderProgram), 因此，先要创建着色器程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> shaderProgram;</span><br><span class=\"line\">shaderProgram = glCreateProgram();</span><br></pre></td></tr></table></figure>\n<h2 id=\"链接着色器对象\"><a href=\"#链接着色器对象\" class=\"headerlink\" title=\"链接着色器对象\"></a>链接着色器对象</h2><p>两个着色器对象要链接。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glAttachShader(shaderProgram, vertexShader);</span><br><span class=\"line\">glAttachShader(shaderProgram, fragmentShader);</span><br><span class=\"line\">glLinkProgram(shaderProgram);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译着色程序\"><a href=\"#编译着色程序\" class=\"headerlink\" title=\"编译着色程序\"></a>编译着色程序</h2><p>与之前的着色器编译原理相同，只是调用函数和参数变量改变了。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">  glGetProgramInfoLog(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>之后可以glUseProgram函数，激活程序对象。激活后，着色器调用和渲染调用都会使用这个程序对象。</p>\n<h2 id=\"删除着色器\"><a href=\"#删除着色器\" class=\"headerlink\" title=\"删除着色器\"></a>删除着色器</h2><p>完成以上几步后不要忘记删除着色器<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glDeleteShader(vertexShader);</span><br><span class=\"line\">glDeleteShader(fragmentShader);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输入顶点以及索引\"><a href=\"#输入顶点以及索引\" class=\"headerlink\" title=\"输入顶点以及索引\"></a>输入顶点以及索引</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点输入</span></span><br><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>赋值array的时候, 不要忘记{};</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点索引</span></span><br><span class=\"line\">GLuint indices[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>                <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">  <span class=\"comment\">// ...                 // 可根据vertices数组, 建立多组索引</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建和绑定顶点数组对象-VAO\"><a href=\"#创建和绑定顶点数组对象-VAO\" class=\"headerlink\" title=\"创建和绑定顶点数组对象(VAO)\"></a><strong>创建和绑定顶点数组对象(VAO)</strong></h2><p>VAO = Vertex Array Object</p>\n<p>功能:</p>\n<blockquote>\n<ul>\n<li>随后的顶点属性调用都会储存在这个VAO之中。</li>\n<li>使得在不同顶点数据和属性设置之间切换变得简单。</li>\n</ul>\n</blockquote>\n<p><strong>存储内容</strong>:</p>\n<blockquote>\n<ul>\n<li>glEnableVertexAttribArray和glDisableVertexAttribArray的调用。</li>\n<li>通过glVertexAttribPointer设置的顶点属性配置。</li>\n<li>通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n</blockquote>\n<p>使用注意:</p>\n<blockquote>\n<ul>\n<li><strong>先VAO，再绑定和设置VBO, EBO 以及设置顶点属性指针</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VAO;</span><br><span class=\"line\">glGenVertexArrays(<span class=\"number\">1</span>, &amp;VAO);   <span class=\"comment\">// 创建VAO对象</span></span><br><span class=\"line\">glBindVertexArray(VAO);       <span class=\"comment\">// 绑定顶点数组对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建和绑定顶点缓冲对象-VBO\"><a href=\"#创建和绑定顶点缓冲对象-VBO\" class=\"headerlink\" title=\"创建和绑定顶点缓冲对象(VBO)\"></a><strong>创建和绑定顶点缓冲对象(VBO)</strong></h2><p>OpenGL如何解释顶点数据的内存，并指定其如何发送给显卡。</p>\n<p>作用:</p>\n<blockquote>\n<ul>\n<li>通过VBO(Vertex Buffer Object)管理这个内存，它会在GPU内存中存储大量顶点。</li>\n<li>一次性发送大量数据到显卡上，而不是每个顶点发送一次。CPU发到显卡上速度慢，因此，一次发送多个比较好。而发送过去之后顶点着色器又能够立即访问。</li>\n</ul>\n</blockquote>\n<p><span style=\"color:blue\"><em>我想这个过程应该是发生图形管线渲染的第一个阶段，是顶点数据和顶点着色器如何对接？就是依靠CPU发送到显卡上</em> </span><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VBO;</span><br><span class=\"line\">glGenBuffer(<span class=\"number\">1</span>, &amp;VBO);           <span class=\"comment\">// 创建</span></span><br><span class=\"line\"><span class=\"comment\">// 把顶点数组复制到缓存中提供OpenGL使用</span></span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"索引缓冲对象-EBO\"><a href=\"#索引缓冲对象-EBO\" class=\"headerlink\" title=\"索引缓冲对象(EBO)\"></a><strong>索引缓冲对象(EBO)</strong></h2><p>可以创建不同的索引数组，而使用同一个顶点数组。如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> indices[] = &#123; <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint EBO;</span><br><span class=\"line\">glGenBuffer(<span class=\"number\">1</span>, &amp;EBO);                <span class=\"comment\">// 创建</span></span><br><span class=\"line\"><span class=\"comment\">// 把顶点索引复制到缓存中提供OpenGL使用</span></span><br><span class=\"line\">glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\">glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置顶点属性\"><a href=\"#设置顶点属性\" class=\"headerlink\" title=\"设置顶点属性\"></a><strong>设置顶点属性</strong></h2><p><img src=\"/images/vertex_attribute_pointer.png\" alt=\"vertex_attribute_pointer\">    </p>\n<blockquote>\n<ul>\n<li>位置数据被储存为32位(4字节)浮点值 =&gt; siezeof(flaot) = 4 types = 32bits</li>\n<li>每个位置包含3个这样的值</li>\n<li>没有空隙, 紧密排列。</li>\n<li>数据中的第一个值再缓冲开始位置。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>), (<span class=\"keyword\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexattribArray(<span class=\"number\">0</span>);    <span class=\"comment\">// 开启位置为0的顶点属性</span></span><br></pre></td></tr></table></figure>\n<p><strong>glVertexAttribPointer参数</strong></p>\n<blockquote>\n<p>1, 要配置的顶点属性的位置值。输入的参数顶点属性的位置值。还记得之前的 <span style=\"color:red\"><strong>layout (location=0) in vec3 xx</strong></span> 吗？<br>2, 顶点属性的大小。 vec3 =&gt; 3个值组成<br>3, 指定数据类型。 (GLSL中vec*都是由浮点数值组成的)<br>4, 是否被标准化。 GL_TRUE代表是，所有数据(对有符号数据是-1)映射到0到1之间;<br>5, 步长，这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节。因为是紧密排列设置成0也可以，OpenGL自己会设置。</p>\n<ol>\n<li>偏移量。位置数据在数组开头就设置成0</li>\n</ol>\n</blockquote>\n<p>顶点属性默认是禁用的，要用glEnableVertexAttribArray函数开启。<br>输入的参数顶点属性的位置值。<span style=\"color:red\"><strong>layout (location=0) in vec3 xx</strong></span> </p>\n<h2 id=\"绘制图元\"><a href=\"#绘制图元\" class=\"headerlink\" title=\"绘制图元\"></a>绘制图元</h2><p><code>在主循环内部绘制图元。</code></p>\n<p>1, 激活程序对象<br>2, 绑定缓存对象<br>3, 绘制<br>4, 解绑缓存对象</p>\n<p><strong>绘制两种方式：</strong><br>glDrawArrays();</p>\n<blockquote>\n<ul>\n<li>使用当前绑定的顶点缓存对象进行绘制<br>glDrawElements()</li>\n<li>使用当前绑定的索引缓冲对象中的索引进行绘制</li>\n</ul>\n</blockquote>\n<p>第一种，<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 绑定顶点数组对象</span></span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 使用当前绑定的顶点缓存对象进行绘制</span></span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解绑缓存对象</span></span><br><span class=\"line\">glBindVertArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第二种,<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 绑定顶点数组对象 </span></span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 使用当前绑定的索引缓冲对象中的索引进行绘制</span></span><br><span class=\"line\">glDrawElements(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解绑缓存对象</span></span><br><span class=\"line\">glBindVertArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:blue\"><em>VAO有种结合VBO+EBO的意思</em></span><br><strong>再回顾一遍它的存储内容</strong>:</p>\n<blockquote>\n<ul>\n<li>glEnableVertexAttribArray和glDisableVertexAttribArray的调用。</li>\n<li>通过glVertexAttribPointer设置的顶点属性配置。</li>\n<li>通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n</blockquote>\n<p><code>退出循环后删除对象，释放缓存</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glDeleteVertexArray(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">glDeleteBuffers(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">glDeleteBuffers(<span class=\"number\">1</span>, &amp;EBO);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><p>实现完成一个三角形/矩形的绘制后，对很多问题不是很清楚。如，</p>\n<blockquote>\n<p>1, 索引缓冲对象EBO绘制和顶点缓冲绘制VBO的区别和联系？<br>2, 顶点着色器和片段着色器之间的关系？<br>3, 设置顶点属性glVertexAttribPointer();函数的几个参数并不理解？</p>\n</blockquote>\n<h2 id=\"1-添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形\"><a href=\"#1-添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形\" class=\"headerlink\" title=\"1. 添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形\"></a><strong>1. 添加加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形</strong></h2><p><strong>glDrawArrays();</strong><br>根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先设置顶点数组</span></span><br><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个triangle</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">0.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 连接处</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个triangle</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"number\">0.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 连接处</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">6</span>);  <span class=\"comment\">// 从顶点数组索引0开始依次绘制6个顶点</span></span><br></pre></td></tr></table></figure>\n<p><strong>glDrawElements();</strong><br>根据索引的数组数据渲染图元，可以指定渲染图元的类型，给定一个数量，索引的类型以及指向索引的指针</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点输入</span></span><br><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLuint indices[] = &#123;     <span class=\"comment\">// 索引从0开始</span></span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>,               <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>                <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>还需要在绑定VAO后绑定VBO和EBO<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活程序对象</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawElements(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>)  <span class=\"comment\">// 索引数组绘制6个顶点</span></span><br></pre></td></tr></table></figure>\n<p><span style=\"color:blue\"><em>这里并没有给出索引数组的指针，我估计是绑定VAO后，Draw函数调用会从上下文获得这个指针。不知道这个猜想是否正确。</em></span></p>\n<p><a href=\"https://github.com/timtingwei/LearnOpenGL/blob/master/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp\" target=\"_blank\" rel=\"noopener\">练习1源码 - github</a></p>\n<hr>\n<h2 id=\"2-创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO\"><a href=\"#2-创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO\" class=\"headerlink\" title=\"2. 创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO\"></a><strong>2. 创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO</strong></h2><p>// 不同VAO和VBO的ID各自放在同一个数组中，可以以数组创建，但需要单独绑定，复制缓存，设置顶点属性，以及单独绘制。</p>\n<p><strong>glGenBuffers</strong>(GLsizei n,<br>                GLuint<em> buffers);<br>生成缓存对象的名字，输入缓存名字的数量n以及缓存对象名字存在的数组，返回n个缓存对象名字在<em>*Buffers</em></em>中。直到调用glBindBuffer()，生成的缓存名字才和某一缓存对象绑定在一起。</p>\n<p><strong>glGenVertexArrays</strong>(GLsizei n,<br>                      GLuint* arrays);<br>返回n个顶点数组对象名字，存储到arrays指针中。</p>\n<p><strong>glBindBuffer(GLenum target,<br>               GLuint buffer);</strong><br>绑定一个已经命名的缓存对象。</p>\n<p><em>target</em><br><code>----------------------------------------------------------</code><br><code>GL_ARRAY_BUFFER</code>            |     顶点属性<br><code>GL_ELEMENT_ARRAY_BUFFER</code>    |     顶点数组索引<br><code>GL_TEXTURE_BUFFER</code>          |     纹理数据缓存<br><code>GL_UNIFORM_BUFFER</code>          |     Uniform块存储<br><code>----------------------------------------------------------</code></p>\n<p><em>buffer</em><br>    缓存对象的名字</p>\n<p><strong>glBindVertexArray</strong>(GLuint array);<br>用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。</p>\n<p><strong>glBufferData</strong>(GLenum target<br>                 GLsizeiptr size<br>                 const GLvoid * data<br>                 GLenum usage);<br>创建或者初始化一个缓冲对象的数据的储存。</p>\n<p><em>target</em><br>     这里是GL_ARRAY_BUFFER</p>\n<p><em>size</em><br>   新建的缓冲对象大小，以字节(type)类型表示，可以使用sizeof(data)得到</p>\n<p><em>data</em><br>   用于拷贝和初始化新的data对象的，指向data的指针，如果是NULL的话，没有数据被拷贝</p>\n<p><em>usage</em><br>    储存好的数据的使用模式。 <code>GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</code>有这么几种。这里只用于静态绘制</p>\n<p><strong>glVertexAttribPointer</strong>(GLuint index,<br>                      GLint size,<br>                       GLenum type,<br>                       GLboolean normalized,<br>                       GLsizei stride,<br>                       const GLvoid * pointer);<br>上面有所解释。现在就够用了。</p>\n<p><strong>glEnableVertexAttribArray</strong>(GLuint index);<br>启用设置好的顶点属性数组，<br><em>glDisableVertexAttribArray</em>(GLuint index);<br>关闭</p>\n<p><em>index</em><br>   顶点属性的序号，即位置的序号。与顶点着色器的(location=n)相关.</p>\n<p><strong>glBindVertexArray</strong>();<br>用名字array绑定一个顶点数组对象。array是从之前glGenVertexArrays()返回的，或者是0意味着接触当前的绑定。</p>\n<p><strong>glDrawArrays</strong>(GLenum mode,<br>               GLint first,<br>               GLsizei count);<br>练习1中已经出现过，调用之前先要绑定Array;<br>根据数组数据中渲染图元,可以指定渲染图元的类型，给定第一个索引和绘制点的个数，从而确定哪些点被绘制。</p>\n<p>代码实现如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入两个三角形各自的顶点数组</span></span><br><span class=\"line\">GLfloat firstTriangleVertices[] = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第一个triangle</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,   <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">  <span class=\"number\">0.1f</span>,  <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.3f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat secondTriangleVertices[] = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第二个triangle</span></span><br><span class=\"line\">  <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">  <span class=\"number\">-0.1f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,    <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">  <span class=\"number\">0.5f</span>,  <span class=\"number\">-0.3f</span>, <span class=\"number\">0.0f</span>     <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>1, 共同以VAOs和VBOs以数组创建<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VBOs[<span class=\"number\">2</span>], VAOs[<span class=\"number\">2</span>];</span><br><span class=\"line\">glGenBuffers(<span class=\"number\">2</span>, VAOs);</span><br><span class=\"line\">glGenVertexArrays(<span class=\"number\">2</span>, VAOs);</span><br></pre></td></tr></table></figure></p>\n<p>2, 单独绑定, 复制, 设置顶点属性<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glBufferData(GL_GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(firstTriangleVertices),</span><br><span class=\"line\">               firstTriangleVertices, GL_STATIC_DRAW);</span><br><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE,</span><br><span class=\"line\">                        <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同理VAOs[1], VBOs[1]..</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glBufferData(GL_GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(secondTriangleVertices),</span><br><span class=\"line\">               secondTriangleVertices, GL_STATIC_DRAW);</span><br><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE,</span><br><span class=\"line\">                        <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>3, 单独绘制<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ==========firstTriangle=========</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// ==========secondTriangle========</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.4.hello_triangle_exercise2\" target=\"_blank\" rel=\"noopener\">练习2源码</a></p>\n<h2 id=\"3-创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色\"><a href=\"#3-创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色\" class=\"headerlink\" title=\"3.创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色\"></a><strong>3.创建两个着色器程序，第二个程序使用一个不同的片段着色器，输出黄色；再次绘制这两个三角形，让其中一个输出为黄色</strong></h2><p>之前提出了一个问题，顶点着色器和片段着色器之间的关系？在这个练习中，有所涉及。</p>\n<p>// 放在同一个数组中，但需要各自绑定和各自绘制， 也可以匹配不同的顶点数组<br>// 注意：片段着色器不能放在数组里。<br>// 顶点着色器，片段着色器attach+link成program, 着色器需要创建，绑定源码，编译，检查编译四个步骤。</p>\n<p>1, GLSL编写橙色和黄色着色器代码<br>2，分别附着，编译，检查着色器，并attach到不同的program<br>3, 用不同的program进行draw</p>\n<p><strong>1, GLSL编写橙色和黄色着色器代码</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 片段着色器0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLchar* fragmentShaderSource0 = <span class=\"string\">\"#version 330 core\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"out vec4 color;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"void main() &#123;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"color = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"</span>   <span class=\"comment\">// orange</span></span><br><span class=\"line\">    <span class=\"string\">\"&#125;\\n\\0\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 片段着色器1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GLchar* fragmentShaderSource1 = <span class=\"string\">\"#version 330 core\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"out vec4 color;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"void main() &#123;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"color = vec4(1.0f, 1.0f, 0.0f, 1.0f);\\n\"</span>   <span class=\"comment\">// yellow</span></span><br><span class=\"line\">    <span class=\"string\">\"&#125;\\n\\0\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2，分别附着，编译，检查着色器，并attach到不同的program</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建片段着色器</span></span><br><span class=\"line\">  GLuint fragmentShaderOrange;</span><br><span class=\"line\">  GLuint fragmentShaderYellow;</span><br><span class=\"line\">  GLuint shaderProgramOrange;</span><br><span class=\"line\">  GLuint shaderProgramYellow;</span><br><span class=\"line\">  fragmentShaderOrange = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">  fragmentShaderYellow = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">  shaderProgramOrange = glCreateProgram();</span><br><span class=\"line\">  shaderProgramYellow = glCreateProgram();</span><br><span class=\"line\">  <span class=\"comment\">// ===========编译第一个片段着色器===================</span></span><br><span class=\"line\">  <span class=\"comment\">// 源码附加到着色器对象上</span></span><br><span class=\"line\">  glShaderSource(fragmentShaderOrange, <span class=\"number\">1</span>, &amp;fragmentShaderSource0, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  glCompileShader(fragmentShaderOrange);</span><br><span class=\"line\">  <span class=\"comment\">// 检测glComplieShader是否编译成功</span></span><br><span class=\"line\">  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ===========编译第二个片段黄色着色器===================</span></span><br><span class=\"line\">  <span class=\"comment\">// 源码附加到着色器对象上</span></span><br><span class=\"line\">  glShaderSource(fragmentShaderYellow, <span class=\"number\">1</span>, &amp;fragmentShaderSource1, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  glCompileShader(fragmentShaderYellow);</span><br><span class=\"line\">  <span class=\"comment\">// 检测glComplieShader是否编译成功</span></span><br><span class=\"line\">  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 把两个着色器对象链接到用来渲染的两个着色程序中</span></span><br><span class=\"line\">  glAttachShader(shaderProgramOrange, vertexShader);</span><br><span class=\"line\">  <span class=\"comment\">// =====连接第一个片段着色器=====</span></span><br><span class=\"line\">  glAttachShader(shaderProgramOrange, fragmentShaderOrange);</span><br><span class=\"line\">  glLinkProgram(shaderProgramOrange);</span><br><span class=\"line\">  glGetProgramiv(shaderProgramOrange, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetProgramInfoLog(shaderProgramOrange, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// =====连接第二个片段着色器=====</span></span><br><span class=\"line\">  glAttachShader(shaderProgramYellow, vertexShader);</span><br><span class=\"line\">  glAttachShader(shaderProgramYellow, fragmentShaderYellow);</span><br><span class=\"line\">  glLinkProgram(shaderProgramYellow);</span><br><span class=\"line\">  glGetProgramiv(shaderProgramYellow, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">    glGetProgramInfoLog(shaderProgramYellow, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span></span><br><span class=\"line\">              &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除着色器</span></span><br><span class=\"line\">  glDeleteShader(vertexShader);</span><br><span class=\"line\">  glDeleteShader(fragmentShaderOrange);</span><br><span class=\"line\">  glDeleteShader(fragmentShaderYellow);</span><br></pre></td></tr></table></figure></p>\n<p><strong>3, 用不同的program进行draw</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// =====激活程序对象绘制第一个triangle======</span></span><br><span class=\"line\">glUseProgram(shaderProgramOrange);      <span class=\"comment\">// 使用第一个片段着色器连接的program</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// 从索引0开始依次绘制3个顶点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =====激活程序对象绘制第二个triangle======</span></span><br><span class=\"line\">glUseProgram(shaderProgramYellow);      <span class=\"comment\">// 使用第二个片段着色器连接的program</span></span><br><span class=\"line\">glBindVertexArray(VAOs[<span class=\"number\">1</span>]);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// 从索引0开始依次绘制3个顶点</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/timtingwei/LearnOpenGL/tree/master/src/1.getting_started/2.5.hello_triangle_exercise3\" target=\"_blank\" rel=\"noopener\">练习3源码</a></p>\n<p>=======</p>\n<p>refwebsite:<br><a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/\" target=\"_blank\" rel=\"noopener\">你好三角形 - learnopengl-CN</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-12-20T02:49:10.258Z","updated":"2017-12-20T02:49:10.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukurw000ffadr4k45yph2","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"在不同机器上配置部署hexo","date":"2017-12-20T02:54:39.000Z","_content":"\n将学习平台从Windows转移到ubuntu上后，需要重新配置hexo，但和重头配置有所区别。虽然，将Windows的磁盘擦干净前，我已经把数据全转移到移动硬盘上，可以用拷贝的方式在ubuntu上重新部署hexo, 但是这种方法相对手动，且既然用了github pages， 就通过实践github来部署。\n\n查阅后得到两种比较通用的hexo发布github的方式，\n> 1. 重新create a repo, 将静态文件push上去。\n> 2. 利用git branch的特性，将静态和部署文件放在一个repo的两个branch中。\n这里我选择了后者。\n\n**检查git：**\n```sh\n$ git --version\n\n$ sudo apt-get install git-core\n```\n**安装npm(node package manager):**\n```\n$ npm --version\n\n$ sudo apt-get install npm\n```\n**安装node-legacy**\n[装node-legacy原因][1]\n```sh\n$ sudo apt-get install nodejs-legacy\n```\n\n**安装nvm**\nnvm和npm一样是node的包的管理工具\n```sh\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\n**安装 Node.js**\n> Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护，并与Linux基金会有合作关系。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。\nvisit [node.js][2] for more information\n```sh\n$ nvm install 4\n```\n\n**安装 hexo**\n```\n$ npm install hexo-cli -g\n\n$ npm install hexo -g\n```\n\n**配置git**\n\n查看:\n```sh\n$ ls -al ~/.ssh\nls: cannot access /home/tim/.ssh: No such file or directory\n```\n\n生成:\n```sh\n$ ssh-keygen -t rsa -b 4096 -C \"timtingwei@hotmail.com\"\n```\n\n确认:\n```sh\n$ ssh-agent -s\n```\n\n添加:\n```sh\n$ ssh-add ~/.ssh/id_rsa\n```\n\n在github中添加SHH KEY\n```\n$ clip < cat ~/.ssh/id_rsa.pub\n```\n并在github setting中添加shh key\n\n```sh\n$ ssh -T git@github.com\nHi timtingwei! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n**利用git branch在不同机器上部署hexo**\n[CrazyMilk的知乎回答][3]\n\n> 1. 创建repo, timtingwei.github.io;\n> 2. 创建master和hexo两个分支，hexo用于存放静态文件, master用于部署;\n> 3. repo setting 中设置hexo为默认分支;\n> 4. git clone git@github.com:timtingwei/timtingwei.github.io.git 拷贝repo;\n> 5. npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;如果在不同机器上不需要hexo init;\n> 6. 修改_config.yml的deploy::branch参数为master;\n> 7. 依次执行 git add., git commit -m \"...\", git push origin hexo 提交相关文件;\n> 8. 执行hexo g -d 生成并部署到github上\n> 9. 日常改动:依次7,8.\n\n以上配置完成后, hexo s没反应\n```sh\n$ hexo server\nINFO  Start processing\n```\n\nhexo 3.0把服务器独立成个别模块，必须安装hexo-server才能使用。\n```sh\n$ npm install hexo-server --save\n\n$ hexo server\n```\n安装后, 仍旧没有反应。\n\n考虑用**静态模式**, 服务器只处理public文件夹内的文件，而不处理文件变动。先要执行hexo generate\n```sh\n$ hexo generate\n$ hexo server -s\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n\nrefweb:\nhttps://zh.wikipedia.org/wiki/Node.js\nhttp://www.jianshu.com/p/24cb74aeb0a3\nhttps://www.zhihu.com/question/21193762\nhttps://hexo.io/zh-cn/docs/server.html\nhttps://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\n\n[1]:https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\n[2]:https://zh.wikipedia.org/wiki/Node.js\n[3]:https://www.zhihu.com/question/21193762\n","source":"_posts/hexo-in-different-computers.md","raw":"---\ntitle: 在不同机器上配置部署hexo\ndate: 2017-12-20 10:54:39\ntags: hexo\n---\n\n将学习平台从Windows转移到ubuntu上后，需要重新配置hexo，但和重头配置有所区别。虽然，将Windows的磁盘擦干净前，我已经把数据全转移到移动硬盘上，可以用拷贝的方式在ubuntu上重新部署hexo, 但是这种方法相对手动，且既然用了github pages， 就通过实践github来部署。\n\n查阅后得到两种比较通用的hexo发布github的方式，\n> 1. 重新create a repo, 将静态文件push上去。\n> 2. 利用git branch的特性，将静态和部署文件放在一个repo的两个branch中。\n这里我选择了后者。\n\n**检查git：**\n```sh\n$ git --version\n\n$ sudo apt-get install git-core\n```\n**安装npm(node package manager):**\n```\n$ npm --version\n\n$ sudo apt-get install npm\n```\n**安装node-legacy**\n[装node-legacy原因][1]\n```sh\n$ sudo apt-get install nodejs-legacy\n```\n\n**安装nvm**\nnvm和npm一样是node的包的管理工具\n```sh\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\n**安装 Node.js**\n> Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护，并与Linux基金会有合作关系。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。\nvisit [node.js][2] for more information\n```sh\n$ nvm install 4\n```\n\n**安装 hexo**\n```\n$ npm install hexo-cli -g\n\n$ npm install hexo -g\n```\n\n**配置git**\n\n查看:\n```sh\n$ ls -al ~/.ssh\nls: cannot access /home/tim/.ssh: No such file or directory\n```\n\n生成:\n```sh\n$ ssh-keygen -t rsa -b 4096 -C \"timtingwei@hotmail.com\"\n```\n\n确认:\n```sh\n$ ssh-agent -s\n```\n\n添加:\n```sh\n$ ssh-add ~/.ssh/id_rsa\n```\n\n在github中添加SHH KEY\n```\n$ clip < cat ~/.ssh/id_rsa.pub\n```\n并在github setting中添加shh key\n\n```sh\n$ ssh -T git@github.com\nHi timtingwei! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n**利用git branch在不同机器上部署hexo**\n[CrazyMilk的知乎回答][3]\n\n> 1. 创建repo, timtingwei.github.io;\n> 2. 创建master和hexo两个分支，hexo用于存放静态文件, master用于部署;\n> 3. repo setting 中设置hexo为默认分支;\n> 4. git clone git@github.com:timtingwei/timtingwei.github.io.git 拷贝repo;\n> 5. npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;如果在不同机器上不需要hexo init;\n> 6. 修改_config.yml的deploy::branch参数为master;\n> 7. 依次执行 git add., git commit -m \"...\", git push origin hexo 提交相关文件;\n> 8. 执行hexo g -d 生成并部署到github上\n> 9. 日常改动:依次7,8.\n\n以上配置完成后, hexo s没反应\n```sh\n$ hexo server\nINFO  Start processing\n```\n\nhexo 3.0把服务器独立成个别模块，必须安装hexo-server才能使用。\n```sh\n$ npm install hexo-server --save\n\n$ hexo server\n```\n安装后, 仍旧没有反应。\n\n考虑用**静态模式**, 服务器只处理public文件夹内的文件，而不处理文件变动。先要执行hexo generate\n```sh\n$ hexo generate\n$ hexo server -s\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n\nrefweb:\nhttps://zh.wikipedia.org/wiki/Node.js\nhttp://www.jianshu.com/p/24cb74aeb0a3\nhttps://www.zhihu.com/question/21193762\nhttps://hexo.io/zh-cn/docs/server.html\nhttps://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\n\n[1]:https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\n[2]:https://zh.wikipedia.org/wiki/Node.js\n[3]:https://www.zhihu.com/question/21193762\n","slug":"hexo-in-different-computers","published":1,"updated":"2017-12-20T04:04:10.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukury000hfadrqdys0m0b","content":"<p>将学习平台从Windows转移到ubuntu上后，需要重新配置hexo，但和重头配置有所区别。虽然，将Windows的磁盘擦干净前，我已经把数据全转移到移动硬盘上，可以用拷贝的方式在ubuntu上重新部署hexo, 但是这种方法相对手动，且既然用了github pages， 就通过实践github来部署。</p>\n<p>查阅后得到两种比较通用的hexo发布github的方式，</p>\n<blockquote>\n<ol>\n<li>重新create a repo, 将静态文件push上去。</li>\n<li>利用git branch的特性，将静态和部署文件放在一个repo的两个branch中。<br>这里我选择了后者。</li>\n</ol>\n</blockquote>\n<p><strong>检查git：</strong><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install git-core</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装npm(node package manager):</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm --version</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install npm</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装node-legacy</strong><br><a href=\"https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\" target=\"_blank\" rel=\"noopener\">装node-legacy原因</a><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install nodejs-legacy</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装nvm</strong><br>nvm和npm一样是node的包的管理工具<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装 Node.js</strong></p>\n<blockquote>\n<p>Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护，并与Linux基金会有合作关系。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。<br>visit <a href=\"https://zh.wikipedia.org/wiki/Node.js\" target=\"_blank\" rel=\"noopener\">node.js</a> for more information<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install 4</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><strong>安装 hexo</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install hexo -g</span><br></pre></td></tr></table></figure></p>\n<p><strong>配置git</strong></p>\n<p>查看:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al ~/.ssh</span><br><span class=\"line\">ls: cannot access /home/tim/.ssh: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>生成:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"timtingwei@hotmail.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>确认:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent -s</span><br></pre></td></tr></table></figure></p>\n<p>添加:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p>在github中添加SHH KEY<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>并在github setting中添加shh key</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi timtingwei! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p><strong>利用git branch在不同机器上部署hexo</strong><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">CrazyMilk的知乎回答</a></p>\n<blockquote>\n<ol>\n<li>创建repo, timtingwei.github.io;</li>\n<li>创建master和hexo两个分支，hexo用于存放静态文件, master用于部署;</li>\n<li>repo setting 中设置hexo为默认分支;</li>\n<li>git clone git@github.com:timtingwei/timtingwei.github.io.git 拷贝repo;</li>\n<li>npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;如果在不同机器上不需要hexo init;</li>\n<li>修改_config.yml的deploy::branch参数为master;</li>\n<li>依次执行 git add., git commit -m “…”, git push origin hexo 提交相关文件;</li>\n<li>执行hexo g -d 生成并部署到github上</li>\n<li>日常改动:依次7,8.</li>\n</ol>\n</blockquote>\n<p>以上配置完成后, hexo s没反应<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Start processing</span><br></pre></td></tr></table></figure></p>\n<p>hexo 3.0把服务器独立成个别模块，必须安装hexo-server才能使用。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-server --save</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>安装后, 仍旧没有反应。</p>\n<p>考虑用<strong>静态模式</strong>, 服务器只处理public文件夹内的文件，而不处理文件变动。先要执行hexo generate<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server -s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>\n<p>refweb:<br><a href=\"https://zh.wikipedia.org/wiki/Node.js\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/Node.js</a><br><a href=\"http://www.jianshu.com/p/24cb74aeb0a3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/24cb74aeb0a3</a><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21193762</a><br><a href=\"https://hexo.io/zh-cn/docs/server.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/server.html</a><br><a href=\"https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>将学习平台从Windows转移到ubuntu上后，需要重新配置hexo，但和重头配置有所区别。虽然，将Windows的磁盘擦干净前，我已经把数据全转移到移动硬盘上，可以用拷贝的方式在ubuntu上重新部署hexo, 但是这种方法相对手动，且既然用了github pages， 就通过实践github来部署。</p>\n<p>查阅后得到两种比较通用的hexo发布github的方式，</p>\n<blockquote>\n<ol>\n<li>重新create a repo, 将静态文件push上去。</li>\n<li>利用git branch的特性，将静态和部署文件放在一个repo的两个branch中。<br>这里我选择了后者。</li>\n</ol>\n</blockquote>\n<p><strong>检查git：</strong><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install git-core</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装npm(node package manager):</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm --version</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install npm</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装node-legacy</strong><br><a href=\"https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\" target=\"_blank\" rel=\"noopener\">装node-legacy原因</a><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install nodejs-legacy</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装nvm</strong><br>nvm和npm一样是node的包的管理工具<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装 Node.js</strong></p>\n<blockquote>\n<p>Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护，并与Linux基金会有合作关系。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。<br>visit <a href=\"https://zh.wikipedia.org/wiki/Node.js\" target=\"_blank\" rel=\"noopener\">node.js</a> for more information<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install 4</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><strong>安装 hexo</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install hexo -g</span><br></pre></td></tr></table></figure></p>\n<p><strong>配置git</strong></p>\n<p>查看:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al ~/.ssh</span><br><span class=\"line\">ls: cannot access /home/tim/.ssh: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>生成:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"timtingwei@hotmail.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>确认:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent -s</span><br></pre></td></tr></table></figure></p>\n<p>添加:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p>在github中添加SHH KEY<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>并在github setting中添加shh key</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi timtingwei! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p><strong>利用git branch在不同机器上部署hexo</strong><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">CrazyMilk的知乎回答</a></p>\n<blockquote>\n<ol>\n<li>创建repo, timtingwei.github.io;</li>\n<li>创建master和hexo两个分支，hexo用于存放静态文件, master用于部署;</li>\n<li>repo setting 中设置hexo为默认分支;</li>\n<li>git clone git@github.com:timtingwei/timtingwei.github.io.git 拷贝repo;</li>\n<li>npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;如果在不同机器上不需要hexo init;</li>\n<li>修改_config.yml的deploy::branch参数为master;</li>\n<li>依次执行 git add., git commit -m “…”, git push origin hexo 提交相关文件;</li>\n<li>执行hexo g -d 生成并部署到github上</li>\n<li>日常改动:依次7,8.</li>\n</ol>\n</blockquote>\n<p>以上配置完成后, hexo s没反应<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Start processing</span><br></pre></td></tr></table></figure></p>\n<p>hexo 3.0把服务器独立成个别模块，必须安装hexo-server才能使用。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-server --save</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>安装后, 仍旧没有反应。</p>\n<p>考虑用<strong>静态模式</strong>, 服务器只处理public文件夹内的文件，而不处理文件变动。先要执行hexo generate<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server -s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>\n<p>refweb:<br><a href=\"https://zh.wikipedia.org/wiki/Node.js\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/Node.js</a><br><a href=\"http://www.jianshu.com/p/24cb74aeb0a3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/24cb74aeb0a3</a><br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21193762</a><br><a href=\"https://hexo.io/zh-cn/docs/server.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/server.html</a><br><a href=\"https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu</a></p>\n"},{"title":"hexo博客中文乱码","date":"2017-11-23T01:52:42.000Z","_content":"\n## issue:\n\n```\n$ hexo g && hexo s\n```\n\n此时[localhost](http://localhost:4000/)中出现如下中文乱码, 英文部分正常。\n> ��Ȼ���(depth buffer)\n\n此时\\_config.yml中:\n\n```\nlanguage: zh-Hans\n```\n## hack:\n\n> 1. Notepad++打开出现中文的\\*.md, 此时右下角为ANSI格式.\n> 2. 格式->转为UFT-8编码格式\n> 3. 保存\n> 4. $ hexo clean && hexo g && hexo s\n\n此时[localhost](http://localhost:4000/)中\n> 深度缓存(depth buffer)\n\n## issue++:\n\n> * 批量转化post中的md文件\n> * 自动生成UTF-8格式的md文件\n\n------\nreference:\n[1]: \n\n\n\n","source":"_posts/hexo-random-symbol.md","raw":"---\ntitle: hexo博客中文乱码\ndate: 2017-11-23 09:52:42\ntags: \n- hexo\n- UTF-8\n---\n\n## issue:\n\n```\n$ hexo g && hexo s\n```\n\n此时[localhost](http://localhost:4000/)中出现如下中文乱码, 英文部分正常。\n> ��Ȼ���(depth buffer)\n\n此时\\_config.yml中:\n\n```\nlanguage: zh-Hans\n```\n## hack:\n\n> 1. Notepad++打开出现中文的\\*.md, 此时右下角为ANSI格式.\n> 2. 格式->转为UFT-8编码格式\n> 3. 保存\n> 4. $ hexo clean && hexo g && hexo s\n\n此时[localhost](http://localhost:4000/)中\n> 深度缓存(depth buffer)\n\n## issue++:\n\n> * 批量转化post中的md文件\n> * 自动生成UTF-8格式的md文件\n\n------\nreference:\n[1]: \n\n\n\n","slug":"hexo-random-symbol","published":1,"updated":"2017-12-20T02:49:10.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukus0000jfadr5ytcl0vu","content":"<h2 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue:\"></a>issue:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n<p>此时<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">localhost</a>中出现如下中文乱码, 英文部分正常。</p>\n<blockquote>\n<p>��Ȼ���(depth buffer)</p>\n</blockquote>\n<p>此时_config.yml中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-Hans</span><br></pre></td></tr></table></figure>\n<h2 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack:\"></a>hack:</h2><blockquote>\n<ol>\n<li>Notepad++打开出现中文的*.md, 此时右下角为ANSI格式.</li>\n<li>格式-&gt;转为UFT-8编码格式</li>\n<li>保存</li>\n<li>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</li>\n</ol>\n</blockquote>\n<p>此时<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">localhost</a>中</p>\n<blockquote>\n<p>深度缓存(depth buffer)</p>\n</blockquote>\n<h2 id=\"issue-1\"><a href=\"#issue-1\" class=\"headerlink\" title=\"issue++:\"></a>issue++:</h2><blockquote>\n<ul>\n<li>批量转化post中的md文件</li>\n<li>自动生成UTF-8格式的md文件</li>\n</ul>\n</blockquote>\n<hr>\n<p>reference:<br>[1]: </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue:\"></a>issue:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n<p>此时<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">localhost</a>中出现如下中文乱码, 英文部分正常。</p>\n<blockquote>\n<p>��Ȼ���(depth buffer)</p>\n</blockquote>\n<p>此时_config.yml中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-Hans</span><br></pre></td></tr></table></figure>\n<h2 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack:\"></a>hack:</h2><blockquote>\n<ol>\n<li>Notepad++打开出现中文的*.md, 此时右下角为ANSI格式.</li>\n<li>格式-&gt;转为UFT-8编码格式</li>\n<li>保存</li>\n<li>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</li>\n</ol>\n</blockquote>\n<p>此时<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">localhost</a>中</p>\n<blockquote>\n<p>深度缓存(depth buffer)</p>\n</blockquote>\n<h2 id=\"issue-1\"><a href=\"#issue-1\" class=\"headerlink\" title=\"issue++:\"></a>issue++:</h2><blockquote>\n<ul>\n<li>批量转化post中的md文件</li>\n<li>自动生成UTF-8格式的md文件</li>\n</ul>\n</blockquote>\n<hr>\n<p>reference:<br>[1]: </p>\n"},{"title":"(转载)谈编程语言","date":"2017-12-24T05:26:19.000Z","_content":"\n**文章目录**\n[Bruce Eckel：编程生涯](#Bruce-Eckel：编程生涯)\n[Peter Norvig：十年学会编程](#Peter-Norvig：十年学会编程)\n\n\n转载自[编程随想 - program think](https://program-think.blogspot.com/2012/05/weekly-share-5.html)整理的， 关于编程的心态定位和实践方法的文章，比较经典， 对我有所启发的两篇。\n\n----\n\n# Bruce Eckel：编程生涯\n\n作者 Bruce Eckel 是编程界的大牛，著有大名鼎鼎的《Thinking in C++》和《Thinking in Java》。\n本文是他对程序员（尤其是新手）的忠告。\n\n================================\n\n大家总是问一个错误的问题：“我应该学习C++还是Java？”在本文中，我将告诉大伙儿：对于选择编程生涯真正需要关注的是哪些问题。\n\n请注意，这篇文章的目标读者并不是那些已经做出自己选择的人。（对于这些人而言）你会继续自己的编程生涯，而不管别人会怎么说。因为它已经渗透到你的血液中，你已经无法摆脱。你已经知道答案：C++、Java、Shell脚本、Python、还有其它一大堆的语言和技术，你都理所当然地会去学习。甚至有可能你才仅仅14岁，就已经知道好几种不同的语言。\n\n问我这样的问题的人可能来自其他行业，或者来自诸如Web开发之类的领域。他们知道HTML是一种类编程语言，而且想尝试构建某些更大型的应用。但我特别希望，当你在问这个问题时，你已经意识到了想要在计算机领域取得成功，你需要掌握自学能力，而且永不停息。\n\n**在这个领域做得越多，我越觉得软件开发比任何行业都更接近于写作。** 我们从来不知道是什么造就了优秀的作者，我们只知道什么时候我们会喜欢某个人的文字。编程不是一种工程，仅需要把东西从入口倒进去，然后再转动手柄。把软件开发看成确定性的，是一个诱人的想法。因为这个想法，人们总想搞出一些工具来帮我们开发出想要的软件。但是我的经验告诉我，事实并非如此——人的重要性远高于流程。而软件是否运行在一部精确的机器上已经越来越不重要了——这犹如测不准原理对人类的影响。\n\n我的父亲是造房子的，小时候我偶尔会帮忙打下手，放放砖块之类。他和他的木工告诉我，他们是为我好才让我干这些活——这样我就不至于走入这个行业。事实确实是这样。\n\n我们不妨把软件开发比作盖房子。造房子的人当然不可能完全一样。这些人里面有：混凝土工、屋顶工、管道工、电工、砖瓦工、水泥工、瓦片工、搬运工、粗木工、细木工。当然，还有工头。每个工种都需要相应的技能，这些技能都需要花时间和精力去掌握。**跟软件开发一样，造房子也是一个“建立/推翻”的过程。如果你想很快地获得回报，你可能从搬运工和砖瓦工开始做，这样的话，你无需太多的学习曲线就可以获得回报。当需求很多时，你的工作会很稳固，甚至收入也可能提升——如果没有足够的人手的话。但是，一旦行情不妙，木匠甚至工头就可能把砖瓦工一脚踢开。**\n\n当互联网刚刚兴起时，仅仅是花一点时间学习HTML，你就可以得到一份薪水丰厚的工作。但是当形势惨淡时，对于技能的要求更高了——HTML程序员（就像搬运工和砖瓦工一样）第一个被抛弃了，而拥有更高技能的程序员则留了下来。\n\n我想说的是： **除非你准备活到老学到老，不然的话，不要进入这个行业！编程看起来似乎是一个高收入而又稳定的工作。但要做到这一点，唯一的途径是：始终让自己更有价值。**\n\n当然，你总能找到例外。总有那么一些人，仅仅学了一门编程语言，就可以胜任留在一个岗位上，而不需要增长他的技能。但他们只是幸免于难而已，他们最终无疑是很脆弱的。为了不让自己变得脆弱，你需要持续的提高自己，通过阅读、加入用户组、参加研讨会...... 你学得越深入，你就越有价值，也就意味着你有更好的职业前景，可以配得上更高的薪水。\n\n**另一个方法是：先大致了解这个领域，找到最适合你的地方。**打个比方：我的兄弟对软件很感兴趣，也入了这行，只不过他的工作是安装、维修、升级电脑。他总是一丝不苟，所以当他把电脑搞好，一定会很完美——不光是软件，连电线都会被仔细地捆好。他总是生意兴隆，远超出他的精力所能及。他甚至都不用担心 .com 泡沫的崩溃。显然他的饭碗不容易被抢走。\n\n我在高校里待了很久，甚至还在UCLA（加州大学洛杉矶分校）进修博士学位，后来又幸运地终止了。我说“幸运”是因为我不再喜欢呆在学校，而我之前在高校待了那么久，只是因为我很享受它。但我所享受的，基本上是不务正业的东西——艺术和舞蹈课，在校报工作，还有一小撮计算机课程（之所以说计算机课程“不务正业”，是因为我本科是物理专业，研究生才是计算机专业）。虽然我在学术上远谈不上卓越（有意思的是很多当时也许不会接受我这个学生的学校现在却用我的书做教材）。我真的很享受作为学生的日子，当我完成博士课程，也许会以一个教授的身份终老一生。\n\n但就如现在看到的，我在学校里最大的收获恰恰来自我那些“不务正业”的课程，它们拓展了我的思维，使之超越了“我们已经知道的东西”。**在计算机领域中，你总是为某种目标而编程。你对目标了解得越多，你就做得越好。我遇到过一些欧洲的研究生，他们需要结合其它专业领域来搞编程，他们的论文需要解决这个专业领域的特定的问题。**\n\n了解编程之外的领域，将会极大得提高你解决问题的能力 （就如同多学几种编程语言将极大地提高你的编程技能）。很多时候，我发现仅仅学习计算机专业的学生，比那些（除了计算机之外）拥有其它背景的学生，在思维上有更多的局限性。因为后者有着更严谨的思维，也不那么容易想当然。\n\n有一次我组织了一次会议，其中一个议题是：理想的应聘者有哪些特征：\n◇把学习当成生活方式。比如：你应该知道不止一种语言，没有什么比学习一门新语言更能让你开阔眼界了。\n> * 知道如何获取知识\n> * Study prior art\n> * 善用工具\n> * 学会把事情简化\n> * 理解业务\n> * **为自己的错误负责。“我就是这样的”是不能接受的托词。能找到自己的失误。**\n> * 成为一个领导者，善于沟通和激励。\n> * 搞清楚你在为谁服务\n> * **没有绝对正确的答案（更好的方法总是存在的）。展示并讨论你的代码，不要带着感情因素——你的代码并不等于你本人。**\n> * **明白完美是渐进的**\n\n适当尝试一些冒险——尤其是能令人感到害怕的冒险。当你尝试之后，将体会到出乎意料的兴奋。（在冒险的过程中）最好不要刻意去计划某个特定的结果。当你过于注重结果，你往往会错过那些真正有价值的问题。我的冒险往往是这样开始的——“我们先做些试验，看看它会把我们带到什么地方”。\n\n或许某些人会对我的回答感到失望，并回复我说：“是的，这很有趣也很有用。但我到底应该学什么？C++还是Java？” 我再重复一次：并不是所有的问题都有一个唯一的简单的答案。**问题的关键不在于选择某个编程语言，然后掌握之。问题的关键在于：持续学习，并且很多时候，有不止一个选择。** 相信我所说的，你的生活会更精彩！\n\n原文出处：\nhttp://www.artima.com/weblogs/viewpost.jsp?thread=259358\n\n\n------\n\n\n# Peter Norvig：十年学会编程\n\n作者 Peter Norvig 是计算机科学家，Google 的研究总监。\n在本文中，Peter Norvig会告诉你：为什么急功近利地学习软件开发技术是没效果滴？\n\n================================\n\n## 为啥都想速成？\n\n随便逛一下书店，你会看到《7天自学Java》等诸如此类的N天甚至N小时学习Visual Basic、Windows、Internet的书。我用亚马逊网站的搜索功能，出版年份选1992年以后，书名关键词是：“天”、“自学”、“教你”，查到248个结果，前78个是计算机类图书，第79个是《30天学孟加拉语》。我用“天”换成“小时”，结果更惊人，有多达253本书，前77本是计算机图书，第78是《24小时自学语法句式》。在前200名中，96%是计算机的书。\n\n结论就是：要么人们急于学习电脑，要么计算机比其他东西学起来要异常简单。没有任何书是关于几天学习贝多芬或量子物理的，甚至连犬类装扮都没有。费雷森（Felleisen）等人在其著作《如何设计程序》中同意这个趋势，其中提到：“坏设计很简单，笨蛋才用21天学，尽管他们还是真傻。”\n\n让我们看看《三日学会C++》这个书名意味着什么：\n\n◇学习：\n**三天内你可能没有时间写出有意义的程序，或者从中积累经验。**你不可能有时间去跟职业编程者一起去理解在C++环境下的状况。简而言之，你没有充足的时间学很多。所以这本书只能说肤浅的知识。正如亚历山大·波普（Alexander Pope）所言：一知半解是很危险的。\n\n◇C++：\n**三天内你可能学会C++的句法（如果你已经了解其他的语言），但你还不会使用它。**打个比方，假如你是个Basic程序员，你可能写出Basic风格的C++程序，而无法理解C++的真实好处。那要点是什么？艾伦·佩里斯(Alan Perlis)曾经说过：“一门不能影响你编程观点的语言不足学的。”有可能你学了一点点C++（或者诸如Javascript、Flex之类），因为你需要和现成的工具接口以完成手头的任务。这种情况下，你不是在学习如何编程，只是在学习如何完成任务。\n\n◇三日：\n不幸地是，这远远不够，下一部分会详细讲。\n\n## 如何用十年掌握编程\n\n研究人员（Bloom (1985), Bryan & Harter (1899), Hayes (1989), Simmon & Chase (1973)）得出结论：**想要在诸多领域达到职业水平需要十年，比如国际象棋，作曲，电报操作，绘画，弹钢琴，游泳，网球以及神经心理学和拓扑学的研究。关键是精心练习，只是一遍一遍地重复是不够的，必须挑战恰好超越你能限的事情，尝试并思考你的表现，并自我矫正。周而复始。这并无捷径！**4岁的音乐奇才莫扎特用了13年才能创作世界级的音乐。另外，披头士乐队似乎在1964年的埃德·苏利文（ Ed Sullivan show）演出中一炮而红，但是他们自从1957年就在利物浦和汉堡的酒吧演出，在取得广泛关注后，第一部重量级作品《佩珀军士》（Sgt. Peppers）是在1967年发行。马尔科姆·格拉德威尔（Malcolm Gladwell）撰文描述了一项针对柏林音乐学院学生的研究，他们被分为尖子，中等和不足三类，并被问到他们练琴的情况：\n所有三组中的人，开始学琴的年龄大概相差无几，五岁左右。在刚开始的几年，所有人练习量也差不多，一周两三个小时。自八岁开始，实质性变化就有了。那些精英学生开始比其他人练习更多：九岁的时候一周六个小时，十二岁的时候一周八个小时，十四岁的时候一周十六个小时，一直到二十岁的时候一周要超过三十小时。截止到二十岁，在他们的生涯里已经有总计一万小时练琴。仅仅表现可以的那部分学生加起来是八千小时，那些未来的音乐老师有四千小时。\n\n所以，更确切地说，一万小时，而非十年，是个神奇之数。萨缪尔·约翰逊（Samuel Johnson, 1709-1784）认为还需更长时间：“卓越乃一生之追求，而非其它”。 乔叟（Chaucer, 1340-1400）抱怨道\"the lyf so short, the craft so long to lerne.\" （生之有限，学也无涯）。希波克拉底（Hippocrates, c. 400BC）因这句话被世人所知：\"ars longa, vita brevis\"（译注：拉丁语，意为“艺无尽，生有涯”），更长的版本是 \"Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile\"，翻译成英文就是 \"Life is short, (the) craft long, opportunity fleeting, experiment treacherous, judgment difficult.\" （生有涯，艺无尽，机遇瞬逝，践行误导，决断不易）。\n\n## 我的编程成功秘笈是：\n\n> * 首先要对编程感兴趣，能从编程中得到乐趣。一定要让它足够有趣，因为你要保持你的兴趣长达十年。\n\n> * **与别的程序员交流；阅读别人的代码——这比看任何书或参加培训课都重要。**\n\n> * 实践。最好的学习乃实践。俗话说：“编程的至高境界一定要通过充分的实践才能达到，而个人的能力可通过不懈努力获得显著提升。” (p. 366) **“最有效率的学习需要明确的目标，适当的难度，知识回馈，并容许重复或修正错误。”** (p. 20-21) 《实践认知：每日的思维、数学及文化》（Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life） 在这方面可做参考。\n\n> * 如果你愿意，花四年学习大学课程（或者再加上读研）。这将给你赢得某些工作机会，并给予你在该领域的深层见解。**但如果你不喜欢学校的学习，你同样可以在工作中获得相似的经验。无论如何，单靠书本是远远不够的。**“学习计算机科学不会让你成为编程专家，如同学习绘画和色彩理论不会让你成为画家一样”。这是埃里克·雷蒙德（Eric Raymond）说的，他是《新黑客字典》（The New Hacker's Dictionary）的作者。我雇用过的最优秀程序员，只有高中文凭。但他开发过许多伟大软件，有自己的新闻组，通过公司认股赚的钱就让他买下了自己的夜店。\n\n> * 和其他程序员一起参与工程项目。在某些项目中担当最优秀程序员，在另一些项目中充当最差劲程序员。**充当领头羊的时候，你要测试你领导一项工程的能力，并用你的视野来激发他人；如果在项目组中垫底，就应该学习其它牛人在做些啥，以及他们不喜欢做的（看他们把哪些活让给你做）。**\n\n> * 继续别人的工程项目。去理解先前程序员写的程序。**学习如何理解并解决先前程序员没有考虑到的问题。思考你的程序该如何设计以便让之后的程序员更容易维护。**\n\n> * 至少学6种程序语言。其中包括一种支持类抽象的（Java和C++），一种支持函数抽象的（如Lisp或ML），一种支持语义抽象的（Lisp），一种支援声明规范的（如Prolog或C++模板），还有一种支援协程的（Icon或Scheme），另外一种支持并发的（Sisal）。\n\n> * 记住，在“计算机科学”里有“计算机”一词。理解计算机执行你的代码的时候花费的时间。比如：从内存中取一个字（考虑有无缓存未命中情形），连续从磁盘读字，或者在磁盘中定位。\n\n> * 参加语言标准化工作。这可能是有关 ANSI C++ 委员会，也可能是决定你编码风格是两格缩进或四格缩进。无论如何，你要知道其他人对语言的喜好程度，有时还要想想他们为什么喜欢这样。\n\n> * 知道自己应该在何时脱身于语言标准化\n\n所有上述这些，很难通过书本的学习来达到。我头一个孩子出生时，我读了所有的“如何做”（How To）系列的书籍，却依然对育婴毫无头绪。30个月后，我第二个孩子出生，我还需要温习一下那些书吗？绝对不！相反，我完全可以参照个人经验，而结果相当有效。这更让我确信：我的经验胜过那些专家们写的上千页文字。\n\n弗雷德·布鲁克斯（Fred Brooks）在《没有银弹》（No Silver Bullet）一书给出了寻找顶级设计师的三条建议：\n> * 尽早系统地识别出顶级设计师。\n> * 分配一个人作为其职业规划的导师。\n> * **给予机遇让成长中的设计师互相磨砺。**\n\n此处假定有部分人已经有成为伟大设计师的潜质，你所需的就是要诱导他们。艾伦·佩里斯（Alan Perlis）一针见血地指出：**\"假如人人都可以学雕刻，那就得教米开朗基罗如何不去干雕刻。对于伟大程序员，也是如此。”**\n\n所以，简单地买一本Java书，你或许能找到些有用的东西，但绝不会让你在24小时内甚至24天抑或24月内，成为行家里手。\n\n原文出处：\nhttp://norvig.com/21-days.html\n","source":"_posts/how-to-learn-program.md","raw":"---\ntitle: (转载)谈编程语言\ndate: 2017-12-24 13:26:19\ntags: \n- program\n- learn \n---\n\n**文章目录**\n[Bruce Eckel：编程生涯](#Bruce-Eckel：编程生涯)\n[Peter Norvig：十年学会编程](#Peter-Norvig：十年学会编程)\n\n\n转载自[编程随想 - program think](https://program-think.blogspot.com/2012/05/weekly-share-5.html)整理的， 关于编程的心态定位和实践方法的文章，比较经典， 对我有所启发的两篇。\n\n----\n\n# Bruce Eckel：编程生涯\n\n作者 Bruce Eckel 是编程界的大牛，著有大名鼎鼎的《Thinking in C++》和《Thinking in Java》。\n本文是他对程序员（尤其是新手）的忠告。\n\n================================\n\n大家总是问一个错误的问题：“我应该学习C++还是Java？”在本文中，我将告诉大伙儿：对于选择编程生涯真正需要关注的是哪些问题。\n\n请注意，这篇文章的目标读者并不是那些已经做出自己选择的人。（对于这些人而言）你会继续自己的编程生涯，而不管别人会怎么说。因为它已经渗透到你的血液中，你已经无法摆脱。你已经知道答案：C++、Java、Shell脚本、Python、还有其它一大堆的语言和技术，你都理所当然地会去学习。甚至有可能你才仅仅14岁，就已经知道好几种不同的语言。\n\n问我这样的问题的人可能来自其他行业，或者来自诸如Web开发之类的领域。他们知道HTML是一种类编程语言，而且想尝试构建某些更大型的应用。但我特别希望，当你在问这个问题时，你已经意识到了想要在计算机领域取得成功，你需要掌握自学能力，而且永不停息。\n\n**在这个领域做得越多，我越觉得软件开发比任何行业都更接近于写作。** 我们从来不知道是什么造就了优秀的作者，我们只知道什么时候我们会喜欢某个人的文字。编程不是一种工程，仅需要把东西从入口倒进去，然后再转动手柄。把软件开发看成确定性的，是一个诱人的想法。因为这个想法，人们总想搞出一些工具来帮我们开发出想要的软件。但是我的经验告诉我，事实并非如此——人的重要性远高于流程。而软件是否运行在一部精确的机器上已经越来越不重要了——这犹如测不准原理对人类的影响。\n\n我的父亲是造房子的，小时候我偶尔会帮忙打下手，放放砖块之类。他和他的木工告诉我，他们是为我好才让我干这些活——这样我就不至于走入这个行业。事实确实是这样。\n\n我们不妨把软件开发比作盖房子。造房子的人当然不可能完全一样。这些人里面有：混凝土工、屋顶工、管道工、电工、砖瓦工、水泥工、瓦片工、搬运工、粗木工、细木工。当然，还有工头。每个工种都需要相应的技能，这些技能都需要花时间和精力去掌握。**跟软件开发一样，造房子也是一个“建立/推翻”的过程。如果你想很快地获得回报，你可能从搬运工和砖瓦工开始做，这样的话，你无需太多的学习曲线就可以获得回报。当需求很多时，你的工作会很稳固，甚至收入也可能提升——如果没有足够的人手的话。但是，一旦行情不妙，木匠甚至工头就可能把砖瓦工一脚踢开。**\n\n当互联网刚刚兴起时，仅仅是花一点时间学习HTML，你就可以得到一份薪水丰厚的工作。但是当形势惨淡时，对于技能的要求更高了——HTML程序员（就像搬运工和砖瓦工一样）第一个被抛弃了，而拥有更高技能的程序员则留了下来。\n\n我想说的是： **除非你准备活到老学到老，不然的话，不要进入这个行业！编程看起来似乎是一个高收入而又稳定的工作。但要做到这一点，唯一的途径是：始终让自己更有价值。**\n\n当然，你总能找到例外。总有那么一些人，仅仅学了一门编程语言，就可以胜任留在一个岗位上，而不需要增长他的技能。但他们只是幸免于难而已，他们最终无疑是很脆弱的。为了不让自己变得脆弱，你需要持续的提高自己，通过阅读、加入用户组、参加研讨会...... 你学得越深入，你就越有价值，也就意味着你有更好的职业前景，可以配得上更高的薪水。\n\n**另一个方法是：先大致了解这个领域，找到最适合你的地方。**打个比方：我的兄弟对软件很感兴趣，也入了这行，只不过他的工作是安装、维修、升级电脑。他总是一丝不苟，所以当他把电脑搞好，一定会很完美——不光是软件，连电线都会被仔细地捆好。他总是生意兴隆，远超出他的精力所能及。他甚至都不用担心 .com 泡沫的崩溃。显然他的饭碗不容易被抢走。\n\n我在高校里待了很久，甚至还在UCLA（加州大学洛杉矶分校）进修博士学位，后来又幸运地终止了。我说“幸运”是因为我不再喜欢呆在学校，而我之前在高校待了那么久，只是因为我很享受它。但我所享受的，基本上是不务正业的东西——艺术和舞蹈课，在校报工作，还有一小撮计算机课程（之所以说计算机课程“不务正业”，是因为我本科是物理专业，研究生才是计算机专业）。虽然我在学术上远谈不上卓越（有意思的是很多当时也许不会接受我这个学生的学校现在却用我的书做教材）。我真的很享受作为学生的日子，当我完成博士课程，也许会以一个教授的身份终老一生。\n\n但就如现在看到的，我在学校里最大的收获恰恰来自我那些“不务正业”的课程，它们拓展了我的思维，使之超越了“我们已经知道的东西”。**在计算机领域中，你总是为某种目标而编程。你对目标了解得越多，你就做得越好。我遇到过一些欧洲的研究生，他们需要结合其它专业领域来搞编程，他们的论文需要解决这个专业领域的特定的问题。**\n\n了解编程之外的领域，将会极大得提高你解决问题的能力 （就如同多学几种编程语言将极大地提高你的编程技能）。很多时候，我发现仅仅学习计算机专业的学生，比那些（除了计算机之外）拥有其它背景的学生，在思维上有更多的局限性。因为后者有着更严谨的思维，也不那么容易想当然。\n\n有一次我组织了一次会议，其中一个议题是：理想的应聘者有哪些特征：\n◇把学习当成生活方式。比如：你应该知道不止一种语言，没有什么比学习一门新语言更能让你开阔眼界了。\n> * 知道如何获取知识\n> * Study prior art\n> * 善用工具\n> * 学会把事情简化\n> * 理解业务\n> * **为自己的错误负责。“我就是这样的”是不能接受的托词。能找到自己的失误。**\n> * 成为一个领导者，善于沟通和激励。\n> * 搞清楚你在为谁服务\n> * **没有绝对正确的答案（更好的方法总是存在的）。展示并讨论你的代码，不要带着感情因素——你的代码并不等于你本人。**\n> * **明白完美是渐进的**\n\n适当尝试一些冒险——尤其是能令人感到害怕的冒险。当你尝试之后，将体会到出乎意料的兴奋。（在冒险的过程中）最好不要刻意去计划某个特定的结果。当你过于注重结果，你往往会错过那些真正有价值的问题。我的冒险往往是这样开始的——“我们先做些试验，看看它会把我们带到什么地方”。\n\n或许某些人会对我的回答感到失望，并回复我说：“是的，这很有趣也很有用。但我到底应该学什么？C++还是Java？” 我再重复一次：并不是所有的问题都有一个唯一的简单的答案。**问题的关键不在于选择某个编程语言，然后掌握之。问题的关键在于：持续学习，并且很多时候，有不止一个选择。** 相信我所说的，你的生活会更精彩！\n\n原文出处：\nhttp://www.artima.com/weblogs/viewpost.jsp?thread=259358\n\n\n------\n\n\n# Peter Norvig：十年学会编程\n\n作者 Peter Norvig 是计算机科学家，Google 的研究总监。\n在本文中，Peter Norvig会告诉你：为什么急功近利地学习软件开发技术是没效果滴？\n\n================================\n\n## 为啥都想速成？\n\n随便逛一下书店，你会看到《7天自学Java》等诸如此类的N天甚至N小时学习Visual Basic、Windows、Internet的书。我用亚马逊网站的搜索功能，出版年份选1992年以后，书名关键词是：“天”、“自学”、“教你”，查到248个结果，前78个是计算机类图书，第79个是《30天学孟加拉语》。我用“天”换成“小时”，结果更惊人，有多达253本书，前77本是计算机图书，第78是《24小时自学语法句式》。在前200名中，96%是计算机的书。\n\n结论就是：要么人们急于学习电脑，要么计算机比其他东西学起来要异常简单。没有任何书是关于几天学习贝多芬或量子物理的，甚至连犬类装扮都没有。费雷森（Felleisen）等人在其著作《如何设计程序》中同意这个趋势，其中提到：“坏设计很简单，笨蛋才用21天学，尽管他们还是真傻。”\n\n让我们看看《三日学会C++》这个书名意味着什么：\n\n◇学习：\n**三天内你可能没有时间写出有意义的程序，或者从中积累经验。**你不可能有时间去跟职业编程者一起去理解在C++环境下的状况。简而言之，你没有充足的时间学很多。所以这本书只能说肤浅的知识。正如亚历山大·波普（Alexander Pope）所言：一知半解是很危险的。\n\n◇C++：\n**三天内你可能学会C++的句法（如果你已经了解其他的语言），但你还不会使用它。**打个比方，假如你是个Basic程序员，你可能写出Basic风格的C++程序，而无法理解C++的真实好处。那要点是什么？艾伦·佩里斯(Alan Perlis)曾经说过：“一门不能影响你编程观点的语言不足学的。”有可能你学了一点点C++（或者诸如Javascript、Flex之类），因为你需要和现成的工具接口以完成手头的任务。这种情况下，你不是在学习如何编程，只是在学习如何完成任务。\n\n◇三日：\n不幸地是，这远远不够，下一部分会详细讲。\n\n## 如何用十年掌握编程\n\n研究人员（Bloom (1985), Bryan & Harter (1899), Hayes (1989), Simmon & Chase (1973)）得出结论：**想要在诸多领域达到职业水平需要十年，比如国际象棋，作曲，电报操作，绘画，弹钢琴，游泳，网球以及神经心理学和拓扑学的研究。关键是精心练习，只是一遍一遍地重复是不够的，必须挑战恰好超越你能限的事情，尝试并思考你的表现，并自我矫正。周而复始。这并无捷径！**4岁的音乐奇才莫扎特用了13年才能创作世界级的音乐。另外，披头士乐队似乎在1964年的埃德·苏利文（ Ed Sullivan show）演出中一炮而红，但是他们自从1957年就在利物浦和汉堡的酒吧演出，在取得广泛关注后，第一部重量级作品《佩珀军士》（Sgt. Peppers）是在1967年发行。马尔科姆·格拉德威尔（Malcolm Gladwell）撰文描述了一项针对柏林音乐学院学生的研究，他们被分为尖子，中等和不足三类，并被问到他们练琴的情况：\n所有三组中的人，开始学琴的年龄大概相差无几，五岁左右。在刚开始的几年，所有人练习量也差不多，一周两三个小时。自八岁开始，实质性变化就有了。那些精英学生开始比其他人练习更多：九岁的时候一周六个小时，十二岁的时候一周八个小时，十四岁的时候一周十六个小时，一直到二十岁的时候一周要超过三十小时。截止到二十岁，在他们的生涯里已经有总计一万小时练琴。仅仅表现可以的那部分学生加起来是八千小时，那些未来的音乐老师有四千小时。\n\n所以，更确切地说，一万小时，而非十年，是个神奇之数。萨缪尔·约翰逊（Samuel Johnson, 1709-1784）认为还需更长时间：“卓越乃一生之追求，而非其它”。 乔叟（Chaucer, 1340-1400）抱怨道\"the lyf so short, the craft so long to lerne.\" （生之有限，学也无涯）。希波克拉底（Hippocrates, c. 400BC）因这句话被世人所知：\"ars longa, vita brevis\"（译注：拉丁语，意为“艺无尽，生有涯”），更长的版本是 \"Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile\"，翻译成英文就是 \"Life is short, (the) craft long, opportunity fleeting, experiment treacherous, judgment difficult.\" （生有涯，艺无尽，机遇瞬逝，践行误导，决断不易）。\n\n## 我的编程成功秘笈是：\n\n> * 首先要对编程感兴趣，能从编程中得到乐趣。一定要让它足够有趣，因为你要保持你的兴趣长达十年。\n\n> * **与别的程序员交流；阅读别人的代码——这比看任何书或参加培训课都重要。**\n\n> * 实践。最好的学习乃实践。俗话说：“编程的至高境界一定要通过充分的实践才能达到，而个人的能力可通过不懈努力获得显著提升。” (p. 366) **“最有效率的学习需要明确的目标，适当的难度，知识回馈，并容许重复或修正错误。”** (p. 20-21) 《实践认知：每日的思维、数学及文化》（Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life） 在这方面可做参考。\n\n> * 如果你愿意，花四年学习大学课程（或者再加上读研）。这将给你赢得某些工作机会，并给予你在该领域的深层见解。**但如果你不喜欢学校的学习，你同样可以在工作中获得相似的经验。无论如何，单靠书本是远远不够的。**“学习计算机科学不会让你成为编程专家，如同学习绘画和色彩理论不会让你成为画家一样”。这是埃里克·雷蒙德（Eric Raymond）说的，他是《新黑客字典》（The New Hacker's Dictionary）的作者。我雇用过的最优秀程序员，只有高中文凭。但他开发过许多伟大软件，有自己的新闻组，通过公司认股赚的钱就让他买下了自己的夜店。\n\n> * 和其他程序员一起参与工程项目。在某些项目中担当最优秀程序员，在另一些项目中充当最差劲程序员。**充当领头羊的时候，你要测试你领导一项工程的能力，并用你的视野来激发他人；如果在项目组中垫底，就应该学习其它牛人在做些啥，以及他们不喜欢做的（看他们把哪些活让给你做）。**\n\n> * 继续别人的工程项目。去理解先前程序员写的程序。**学习如何理解并解决先前程序员没有考虑到的问题。思考你的程序该如何设计以便让之后的程序员更容易维护。**\n\n> * 至少学6种程序语言。其中包括一种支持类抽象的（Java和C++），一种支持函数抽象的（如Lisp或ML），一种支持语义抽象的（Lisp），一种支援声明规范的（如Prolog或C++模板），还有一种支援协程的（Icon或Scheme），另外一种支持并发的（Sisal）。\n\n> * 记住，在“计算机科学”里有“计算机”一词。理解计算机执行你的代码的时候花费的时间。比如：从内存中取一个字（考虑有无缓存未命中情形），连续从磁盘读字，或者在磁盘中定位。\n\n> * 参加语言标准化工作。这可能是有关 ANSI C++ 委员会，也可能是决定你编码风格是两格缩进或四格缩进。无论如何，你要知道其他人对语言的喜好程度，有时还要想想他们为什么喜欢这样。\n\n> * 知道自己应该在何时脱身于语言标准化\n\n所有上述这些，很难通过书本的学习来达到。我头一个孩子出生时，我读了所有的“如何做”（How To）系列的书籍，却依然对育婴毫无头绪。30个月后，我第二个孩子出生，我还需要温习一下那些书吗？绝对不！相反，我完全可以参照个人经验，而结果相当有效。这更让我确信：我的经验胜过那些专家们写的上千页文字。\n\n弗雷德·布鲁克斯（Fred Brooks）在《没有银弹》（No Silver Bullet）一书给出了寻找顶级设计师的三条建议：\n> * 尽早系统地识别出顶级设计师。\n> * 分配一个人作为其职业规划的导师。\n> * **给予机遇让成长中的设计师互相磨砺。**\n\n此处假定有部分人已经有成为伟大设计师的潜质，你所需的就是要诱导他们。艾伦·佩里斯（Alan Perlis）一针见血地指出：**\"假如人人都可以学雕刻，那就得教米开朗基罗如何不去干雕刻。对于伟大程序员，也是如此。”**\n\n所以，简单地买一本Java书，你或许能找到些有用的东西，但绝不会让你在24小时内甚至24天抑或24月内，成为行家里手。\n\n原文出处：\nhttp://norvig.com/21-days.html\n","slug":"how-to-learn-program","published":1,"updated":"2017-12-24T07:02:58.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukus3000lfadrv337kc4m","content":"<p><strong>文章目录</strong><br><a href=\"#Bruce-Eckel：编程生涯\">Bruce Eckel：编程生涯</a><br><a href=\"#Peter-Norvig：十年学会编程\">Peter Norvig：十年学会编程</a></p>\n<p>转载自<a href=\"https://program-think.blogspot.com/2012/05/weekly-share-5.html\" target=\"_blank\" rel=\"noopener\">编程随想 - program think</a>整理的， 关于编程的心态定位和实践方法的文章，比较经典， 对我有所启发的两篇。</p>\n<hr>\n<h1 id=\"Bruce-Eckel：编程生涯\"><a href=\"#Bruce-Eckel：编程生涯\" class=\"headerlink\" title=\"Bruce Eckel：编程生涯\"></a>Bruce Eckel：编程生涯</h1><p>作者 Bruce Eckel 是编程界的大牛，著有大名鼎鼎的《Thinking in C++》和《Thinking in Java》。<br>本文是他对程序员（尤其是新手）的忠告。</p>\n<p>================================</p>\n<p>大家总是问一个错误的问题：“我应该学习C++还是Java？”在本文中，我将告诉大伙儿：对于选择编程生涯真正需要关注的是哪些问题。</p>\n<p>请注意，这篇文章的目标读者并不是那些已经做出自己选择的人。（对于这些人而言）你会继续自己的编程生涯，而不管别人会怎么说。因为它已经渗透到你的血液中，你已经无法摆脱。你已经知道答案：C++、Java、Shell脚本、Python、还有其它一大堆的语言和技术，你都理所当然地会去学习。甚至有可能你才仅仅14岁，就已经知道好几种不同的语言。</p>\n<p>问我这样的问题的人可能来自其他行业，或者来自诸如Web开发之类的领域。他们知道HTML是一种类编程语言，而且想尝试构建某些更大型的应用。但我特别希望，当你在问这个问题时，你已经意识到了想要在计算机领域取得成功，你需要掌握自学能力，而且永不停息。</p>\n<p><strong>在这个领域做得越多，我越觉得软件开发比任何行业都更接近于写作。</strong> 我们从来不知道是什么造就了优秀的作者，我们只知道什么时候我们会喜欢某个人的文字。编程不是一种工程，仅需要把东西从入口倒进去，然后再转动手柄。把软件开发看成确定性的，是一个诱人的想法。因为这个想法，人们总想搞出一些工具来帮我们开发出想要的软件。但是我的经验告诉我，事实并非如此——人的重要性远高于流程。而软件是否运行在一部精确的机器上已经越来越不重要了——这犹如测不准原理对人类的影响。</p>\n<p>我的父亲是造房子的，小时候我偶尔会帮忙打下手，放放砖块之类。他和他的木工告诉我，他们是为我好才让我干这些活——这样我就不至于走入这个行业。事实确实是这样。</p>\n<p>我们不妨把软件开发比作盖房子。造房子的人当然不可能完全一样。这些人里面有：混凝土工、屋顶工、管道工、电工、砖瓦工、水泥工、瓦片工、搬运工、粗木工、细木工。当然，还有工头。每个工种都需要相应的技能，这些技能都需要花时间和精力去掌握。<strong>跟软件开发一样，造房子也是一个“建立/推翻”的过程。如果你想很快地获得回报，你可能从搬运工和砖瓦工开始做，这样的话，你无需太多的学习曲线就可以获得回报。当需求很多时，你的工作会很稳固，甚至收入也可能提升——如果没有足够的人手的话。但是，一旦行情不妙，木匠甚至工头就可能把砖瓦工一脚踢开。</strong></p>\n<p>当互联网刚刚兴起时，仅仅是花一点时间学习HTML，你就可以得到一份薪水丰厚的工作。但是当形势惨淡时，对于技能的要求更高了——HTML程序员（就像搬运工和砖瓦工一样）第一个被抛弃了，而拥有更高技能的程序员则留了下来。</p>\n<p>我想说的是： <strong>除非你准备活到老学到老，不然的话，不要进入这个行业！编程看起来似乎是一个高收入而又稳定的工作。但要做到这一点，唯一的途径是：始终让自己更有价值。</strong></p>\n<p>当然，你总能找到例外。总有那么一些人，仅仅学了一门编程语言，就可以胜任留在一个岗位上，而不需要增长他的技能。但他们只是幸免于难而已，他们最终无疑是很脆弱的。为了不让自己变得脆弱，你需要持续的提高自己，通过阅读、加入用户组、参加研讨会…… 你学得越深入，你就越有价值，也就意味着你有更好的职业前景，可以配得上更高的薪水。</p>\n<p><strong>另一个方法是：先大致了解这个领域，找到最适合你的地方。</strong>打个比方：我的兄弟对软件很感兴趣，也入了这行，只不过他的工作是安装、维修、升级电脑。他总是一丝不苟，所以当他把电脑搞好，一定会很完美——不光是软件，连电线都会被仔细地捆好。他总是生意兴隆，远超出他的精力所能及。他甚至都不用担心 .com 泡沫的崩溃。显然他的饭碗不容易被抢走。</p>\n<p>我在高校里待了很久，甚至还在UCLA（加州大学洛杉矶分校）进修博士学位，后来又幸运地终止了。我说“幸运”是因为我不再喜欢呆在学校，而我之前在高校待了那么久，只是因为我很享受它。但我所享受的，基本上是不务正业的东西——艺术和舞蹈课，在校报工作，还有一小撮计算机课程（之所以说计算机课程“不务正业”，是因为我本科是物理专业，研究生才是计算机专业）。虽然我在学术上远谈不上卓越（有意思的是很多当时也许不会接受我这个学生的学校现在却用我的书做教材）。我真的很享受作为学生的日子，当我完成博士课程，也许会以一个教授的身份终老一生。</p>\n<p>但就如现在看到的，我在学校里最大的收获恰恰来自我那些“不务正业”的课程，它们拓展了我的思维，使之超越了“我们已经知道的东西”。<strong>在计算机领域中，你总是为某种目标而编程。你对目标了解得越多，你就做得越好。我遇到过一些欧洲的研究生，他们需要结合其它专业领域来搞编程，他们的论文需要解决这个专业领域的特定的问题。</strong></p>\n<p>了解编程之外的领域，将会极大得提高你解决问题的能力 （就如同多学几种编程语言将极大地提高你的编程技能）。很多时候，我发现仅仅学习计算机专业的学生，比那些（除了计算机之外）拥有其它背景的学生，在思维上有更多的局限性。因为后者有着更严谨的思维，也不那么容易想当然。</p>\n<p>有一次我组织了一次会议，其中一个议题是：理想的应聘者有哪些特征：<br>◇把学习当成生活方式。比如：你应该知道不止一种语言，没有什么比学习一门新语言更能让你开阔眼界了。</p>\n<blockquote>\n<ul>\n<li>知道如何获取知识</li>\n<li>Study prior art</li>\n<li>善用工具</li>\n<li>学会把事情简化</li>\n<li>理解业务</li>\n<li><strong>为自己的错误负责。“我就是这样的”是不能接受的托词。能找到自己的失误。</strong></li>\n<li>成为一个领导者，善于沟通和激励。</li>\n<li>搞清楚你在为谁服务</li>\n<li><strong>没有绝对正确的答案（更好的方法总是存在的）。展示并讨论你的代码，不要带着感情因素——你的代码并不等于你本人。</strong></li>\n<li><strong>明白完美是渐进的</strong></li>\n</ul>\n</blockquote>\n<p>适当尝试一些冒险——尤其是能令人感到害怕的冒险。当你尝试之后，将体会到出乎意料的兴奋。（在冒险的过程中）最好不要刻意去计划某个特定的结果。当你过于注重结果，你往往会错过那些真正有价值的问题。我的冒险往往是这样开始的——“我们先做些试验，看看它会把我们带到什么地方”。</p>\n<p>或许某些人会对我的回答感到失望，并回复我说：“是的，这很有趣也很有用。但我到底应该学什么？C++还是Java？” 我再重复一次：并不是所有的问题都有一个唯一的简单的答案。<strong>问题的关键不在于选择某个编程语言，然后掌握之。问题的关键在于：持续学习，并且很多时候，有不止一个选择。</strong> 相信我所说的，你的生活会更精彩！</p>\n<p>原文出处：<br><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=259358\" target=\"_blank\" rel=\"noopener\">http://www.artima.com/weblogs/viewpost.jsp?thread=259358</a></p>\n<hr>\n<h1 id=\"Peter-Norvig：十年学会编程\"><a href=\"#Peter-Norvig：十年学会编程\" class=\"headerlink\" title=\"Peter Norvig：十年学会编程\"></a>Peter Norvig：十年学会编程</h1><p>作者 Peter Norvig 是计算机科学家，Google 的研究总监。<br>在本文中，Peter Norvig会告诉你：为什么急功近利地学习软件开发技术是没效果滴？</p>\n<p>================================</p>\n<h2 id=\"为啥都想速成？\"><a href=\"#为啥都想速成？\" class=\"headerlink\" title=\"为啥都想速成？\"></a>为啥都想速成？</h2><p>随便逛一下书店，你会看到《7天自学Java》等诸如此类的N天甚至N小时学习Visual Basic、Windows、Internet的书。我用亚马逊网站的搜索功能，出版年份选1992年以后，书名关键词是：“天”、“自学”、“教你”，查到248个结果，前78个是计算机类图书，第79个是《30天学孟加拉语》。我用“天”换成“小时”，结果更惊人，有多达253本书，前77本是计算机图书，第78是《24小时自学语法句式》。在前200名中，96%是计算机的书。</p>\n<p>结论就是：要么人们急于学习电脑，要么计算机比其他东西学起来要异常简单。没有任何书是关于几天学习贝多芬或量子物理的，甚至连犬类装扮都没有。费雷森（Felleisen）等人在其著作《如何设计程序》中同意这个趋势，其中提到：“坏设计很简单，笨蛋才用21天学，尽管他们还是真傻。”</p>\n<p>让我们看看《三日学会C++》这个书名意味着什么：</p>\n<p>◇学习：<br><strong>三天内你可能没有时间写出有意义的程序，或者从中积累经验。</strong>你不可能有时间去跟职业编程者一起去理解在C++环境下的状况。简而言之，你没有充足的时间学很多。所以这本书只能说肤浅的知识。正如亚历山大·波普（Alexander Pope）所言：一知半解是很危险的。</p>\n<p>◇C++：<br><strong>三天内你可能学会C++的句法（如果你已经了解其他的语言），但你还不会使用它。</strong>打个比方，假如你是个Basic程序员，你可能写出Basic风格的C++程序，而无法理解C++的真实好处。那要点是什么？艾伦·佩里斯(Alan Perlis)曾经说过：“一门不能影响你编程观点的语言不足学的。”有可能你学了一点点C++（或者诸如Javascript、Flex之类），因为你需要和现成的工具接口以完成手头的任务。这种情况下，你不是在学习如何编程，只是在学习如何完成任务。</p>\n<p>◇三日：<br>不幸地是，这远远不够，下一部分会详细讲。</p>\n<h2 id=\"如何用十年掌握编程\"><a href=\"#如何用十年掌握编程\" class=\"headerlink\" title=\"如何用十年掌握编程\"></a>如何用十年掌握编程</h2><p>研究人员（Bloom (1985), Bryan &amp; Harter (1899), Hayes (1989), Simmon &amp; Chase (1973)）得出结论：<strong>想要在诸多领域达到职业水平需要十年，比如国际象棋，作曲，电报操作，绘画，弹钢琴，游泳，网球以及神经心理学和拓扑学的研究。关键是精心练习，只是一遍一遍地重复是不够的，必须挑战恰好超越你能限的事情，尝试并思考你的表现，并自我矫正。周而复始。这并无捷径！</strong>4岁的音乐奇才莫扎特用了13年才能创作世界级的音乐。另外，披头士乐队似乎在1964年的埃德·苏利文（ Ed Sullivan show）演出中一炮而红，但是他们自从1957年就在利物浦和汉堡的酒吧演出，在取得广泛关注后，第一部重量级作品《佩珀军士》（Sgt. Peppers）是在1967年发行。马尔科姆·格拉德威尔（Malcolm Gladwell）撰文描述了一项针对柏林音乐学院学生的研究，他们被分为尖子，中等和不足三类，并被问到他们练琴的情况：<br>所有三组中的人，开始学琴的年龄大概相差无几，五岁左右。在刚开始的几年，所有人练习量也差不多，一周两三个小时。自八岁开始，实质性变化就有了。那些精英学生开始比其他人练习更多：九岁的时候一周六个小时，十二岁的时候一周八个小时，十四岁的时候一周十六个小时，一直到二十岁的时候一周要超过三十小时。截止到二十岁，在他们的生涯里已经有总计一万小时练琴。仅仅表现可以的那部分学生加起来是八千小时，那些未来的音乐老师有四千小时。</p>\n<p>所以，更确切地说，一万小时，而非十年，是个神奇之数。萨缪尔·约翰逊（Samuel Johnson, 1709-1784）认为还需更长时间：“卓越乃一生之追求，而非其它”。 乔叟（Chaucer, 1340-1400）抱怨道”the lyf so short, the craft so long to lerne.” （生之有限，学也无涯）。希波克拉底（Hippocrates, c. 400BC）因这句话被世人所知：”ars longa, vita brevis”（译注：拉丁语，意为“艺无尽，生有涯”），更长的版本是 “Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile”，翻译成英文就是 “Life is short, (the) craft long, opportunity fleeting, experiment treacherous, judgment difficult.” （生有涯，艺无尽，机遇瞬逝，践行误导，决断不易）。</p>\n<h2 id=\"我的编程成功秘笈是：\"><a href=\"#我的编程成功秘笈是：\" class=\"headerlink\" title=\"我的编程成功秘笈是：\"></a>我的编程成功秘笈是：</h2><blockquote>\n<ul>\n<li><p>首先要对编程感兴趣，能从编程中得到乐趣。一定要让它足够有趣，因为你要保持你的兴趣长达十年。</p>\n</li>\n<li><p><strong>与别的程序员交流；阅读别人的代码——这比看任何书或参加培训课都重要。</strong></p>\n</li>\n<li><p>实践。最好的学习乃实践。俗话说：“编程的至高境界一定要通过充分的实践才能达到，而个人的能力可通过不懈努力获得显著提升。” (p. 366) <strong>“最有效率的学习需要明确的目标，适当的难度，知识回馈，并容许重复或修正错误。”</strong> (p. 20-21) 《实践认知：每日的思维、数学及文化》（Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life） 在这方面可做参考。</p>\n</li>\n<li><p>如果你愿意，花四年学习大学课程（或者再加上读研）。这将给你赢得某些工作机会，并给予你在该领域的深层见解。<strong>但如果你不喜欢学校的学习，你同样可以在工作中获得相似的经验。无论如何，单靠书本是远远不够的。</strong>“学习计算机科学不会让你成为编程专家，如同学习绘画和色彩理论不会让你成为画家一样”。这是埃里克·雷蒙德（Eric Raymond）说的，他是《新黑客字典》（The New Hacker’s Dictionary）的作者。我雇用过的最优秀程序员，只有高中文凭。但他开发过许多伟大软件，有自己的新闻组，通过公司认股赚的钱就让他买下了自己的夜店。</p>\n</li>\n<li><p>和其他程序员一起参与工程项目。在某些项目中担当最优秀程序员，在另一些项目中充当最差劲程序员。<strong>充当领头羊的时候，你要测试你领导一项工程的能力，并用你的视野来激发他人；如果在项目组中垫底，就应该学习其它牛人在做些啥，以及他们不喜欢做的（看他们把哪些活让给你做）。</strong></p>\n</li>\n<li><p>继续别人的工程项目。去理解先前程序员写的程序。<strong>学习如何理解并解决先前程序员没有考虑到的问题。思考你的程序该如何设计以便让之后的程序员更容易维护。</strong></p>\n</li>\n<li><p>至少学6种程序语言。其中包括一种支持类抽象的（Java和C++），一种支持函数抽象的（如Lisp或ML），一种支持语义抽象的（Lisp），一种支援声明规范的（如Prolog或C++模板），还有一种支援协程的（Icon或Scheme），另外一种支持并发的（Sisal）。</p>\n</li>\n<li><p>记住，在“计算机科学”里有“计算机”一词。理解计算机执行你的代码的时候花费的时间。比如：从内存中取一个字（考虑有无缓存未命中情形），连续从磁盘读字，或者在磁盘中定位。</p>\n</li>\n<li><p>参加语言标准化工作。这可能是有关 ANSI C++ 委员会，也可能是决定你编码风格是两格缩进或四格缩进。无论如何，你要知道其他人对语言的喜好程度，有时还要想想他们为什么喜欢这样。</p>\n</li>\n<li><p>知道自己应该在何时脱身于语言标准化</p>\n</li>\n</ul>\n</blockquote>\n<p>所有上述这些，很难通过书本的学习来达到。我头一个孩子出生时，我读了所有的“如何做”（How To）系列的书籍，却依然对育婴毫无头绪。30个月后，我第二个孩子出生，我还需要温习一下那些书吗？绝对不！相反，我完全可以参照个人经验，而结果相当有效。这更让我确信：我的经验胜过那些专家们写的上千页文字。</p>\n<p>弗雷德·布鲁克斯（Fred Brooks）在《没有银弹》（No Silver Bullet）一书给出了寻找顶级设计师的三条建议：</p>\n<blockquote>\n<ul>\n<li>尽早系统地识别出顶级设计师。</li>\n<li>分配一个人作为其职业规划的导师。</li>\n<li><strong>给予机遇让成长中的设计师互相磨砺。</strong></li>\n</ul>\n</blockquote>\n<p>此处假定有部分人已经有成为伟大设计师的潜质，你所需的就是要诱导他们。艾伦·佩里斯（Alan Perlis）一针见血地指出：<strong>“假如人人都可以学雕刻，那就得教米开朗基罗如何不去干雕刻。对于伟大程序员，也是如此。”</strong></p>\n<p>所以，简单地买一本Java书，你或许能找到些有用的东西，但绝不会让你在24小时内甚至24天抑或24月内，成为行家里手。</p>\n<p>原文出处：<br><a href=\"http://norvig.com/21-days.html\" target=\"_blank\" rel=\"noopener\">http://norvig.com/21-days.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>文章目录</strong><br><a href=\"#Bruce-Eckel：编程生涯\">Bruce Eckel：编程生涯</a><br><a href=\"#Peter-Norvig：十年学会编程\">Peter Norvig：十年学会编程</a></p>\n<p>转载自<a href=\"https://program-think.blogspot.com/2012/05/weekly-share-5.html\" target=\"_blank\" rel=\"noopener\">编程随想 - program think</a>整理的， 关于编程的心态定位和实践方法的文章，比较经典， 对我有所启发的两篇。</p>\n<hr>\n<h1 id=\"Bruce-Eckel：编程生涯\"><a href=\"#Bruce-Eckel：编程生涯\" class=\"headerlink\" title=\"Bruce Eckel：编程生涯\"></a>Bruce Eckel：编程生涯</h1><p>作者 Bruce Eckel 是编程界的大牛，著有大名鼎鼎的《Thinking in C++》和《Thinking in Java》。<br>本文是他对程序员（尤其是新手）的忠告。</p>\n<p>================================</p>\n<p>大家总是问一个错误的问题：“我应该学习C++还是Java？”在本文中，我将告诉大伙儿：对于选择编程生涯真正需要关注的是哪些问题。</p>\n<p>请注意，这篇文章的目标读者并不是那些已经做出自己选择的人。（对于这些人而言）你会继续自己的编程生涯，而不管别人会怎么说。因为它已经渗透到你的血液中，你已经无法摆脱。你已经知道答案：C++、Java、Shell脚本、Python、还有其它一大堆的语言和技术，你都理所当然地会去学习。甚至有可能你才仅仅14岁，就已经知道好几种不同的语言。</p>\n<p>问我这样的问题的人可能来自其他行业，或者来自诸如Web开发之类的领域。他们知道HTML是一种类编程语言，而且想尝试构建某些更大型的应用。但我特别希望，当你在问这个问题时，你已经意识到了想要在计算机领域取得成功，你需要掌握自学能力，而且永不停息。</p>\n<p><strong>在这个领域做得越多，我越觉得软件开发比任何行业都更接近于写作。</strong> 我们从来不知道是什么造就了优秀的作者，我们只知道什么时候我们会喜欢某个人的文字。编程不是一种工程，仅需要把东西从入口倒进去，然后再转动手柄。把软件开发看成确定性的，是一个诱人的想法。因为这个想法，人们总想搞出一些工具来帮我们开发出想要的软件。但是我的经验告诉我，事实并非如此——人的重要性远高于流程。而软件是否运行在一部精确的机器上已经越来越不重要了——这犹如测不准原理对人类的影响。</p>\n<p>我的父亲是造房子的，小时候我偶尔会帮忙打下手，放放砖块之类。他和他的木工告诉我，他们是为我好才让我干这些活——这样我就不至于走入这个行业。事实确实是这样。</p>\n<p>我们不妨把软件开发比作盖房子。造房子的人当然不可能完全一样。这些人里面有：混凝土工、屋顶工、管道工、电工、砖瓦工、水泥工、瓦片工、搬运工、粗木工、细木工。当然，还有工头。每个工种都需要相应的技能，这些技能都需要花时间和精力去掌握。<strong>跟软件开发一样，造房子也是一个“建立/推翻”的过程。如果你想很快地获得回报，你可能从搬运工和砖瓦工开始做，这样的话，你无需太多的学习曲线就可以获得回报。当需求很多时，你的工作会很稳固，甚至收入也可能提升——如果没有足够的人手的话。但是，一旦行情不妙，木匠甚至工头就可能把砖瓦工一脚踢开。</strong></p>\n<p>当互联网刚刚兴起时，仅仅是花一点时间学习HTML，你就可以得到一份薪水丰厚的工作。但是当形势惨淡时，对于技能的要求更高了——HTML程序员（就像搬运工和砖瓦工一样）第一个被抛弃了，而拥有更高技能的程序员则留了下来。</p>\n<p>我想说的是： <strong>除非你准备活到老学到老，不然的话，不要进入这个行业！编程看起来似乎是一个高收入而又稳定的工作。但要做到这一点，唯一的途径是：始终让自己更有价值。</strong></p>\n<p>当然，你总能找到例外。总有那么一些人，仅仅学了一门编程语言，就可以胜任留在一个岗位上，而不需要增长他的技能。但他们只是幸免于难而已，他们最终无疑是很脆弱的。为了不让自己变得脆弱，你需要持续的提高自己，通过阅读、加入用户组、参加研讨会…… 你学得越深入，你就越有价值，也就意味着你有更好的职业前景，可以配得上更高的薪水。</p>\n<p><strong>另一个方法是：先大致了解这个领域，找到最适合你的地方。</strong>打个比方：我的兄弟对软件很感兴趣，也入了这行，只不过他的工作是安装、维修、升级电脑。他总是一丝不苟，所以当他把电脑搞好，一定会很完美——不光是软件，连电线都会被仔细地捆好。他总是生意兴隆，远超出他的精力所能及。他甚至都不用担心 .com 泡沫的崩溃。显然他的饭碗不容易被抢走。</p>\n<p>我在高校里待了很久，甚至还在UCLA（加州大学洛杉矶分校）进修博士学位，后来又幸运地终止了。我说“幸运”是因为我不再喜欢呆在学校，而我之前在高校待了那么久，只是因为我很享受它。但我所享受的，基本上是不务正业的东西——艺术和舞蹈课，在校报工作，还有一小撮计算机课程（之所以说计算机课程“不务正业”，是因为我本科是物理专业，研究生才是计算机专业）。虽然我在学术上远谈不上卓越（有意思的是很多当时也许不会接受我这个学生的学校现在却用我的书做教材）。我真的很享受作为学生的日子，当我完成博士课程，也许会以一个教授的身份终老一生。</p>\n<p>但就如现在看到的，我在学校里最大的收获恰恰来自我那些“不务正业”的课程，它们拓展了我的思维，使之超越了“我们已经知道的东西”。<strong>在计算机领域中，你总是为某种目标而编程。你对目标了解得越多，你就做得越好。我遇到过一些欧洲的研究生，他们需要结合其它专业领域来搞编程，他们的论文需要解决这个专业领域的特定的问题。</strong></p>\n<p>了解编程之外的领域，将会极大得提高你解决问题的能力 （就如同多学几种编程语言将极大地提高你的编程技能）。很多时候，我发现仅仅学习计算机专业的学生，比那些（除了计算机之外）拥有其它背景的学生，在思维上有更多的局限性。因为后者有着更严谨的思维，也不那么容易想当然。</p>\n<p>有一次我组织了一次会议，其中一个议题是：理想的应聘者有哪些特征：<br>◇把学习当成生活方式。比如：你应该知道不止一种语言，没有什么比学习一门新语言更能让你开阔眼界了。</p>\n<blockquote>\n<ul>\n<li>知道如何获取知识</li>\n<li>Study prior art</li>\n<li>善用工具</li>\n<li>学会把事情简化</li>\n<li>理解业务</li>\n<li><strong>为自己的错误负责。“我就是这样的”是不能接受的托词。能找到自己的失误。</strong></li>\n<li>成为一个领导者，善于沟通和激励。</li>\n<li>搞清楚你在为谁服务</li>\n<li><strong>没有绝对正确的答案（更好的方法总是存在的）。展示并讨论你的代码，不要带着感情因素——你的代码并不等于你本人。</strong></li>\n<li><strong>明白完美是渐进的</strong></li>\n</ul>\n</blockquote>\n<p>适当尝试一些冒险——尤其是能令人感到害怕的冒险。当你尝试之后，将体会到出乎意料的兴奋。（在冒险的过程中）最好不要刻意去计划某个特定的结果。当你过于注重结果，你往往会错过那些真正有价值的问题。我的冒险往往是这样开始的——“我们先做些试验，看看它会把我们带到什么地方”。</p>\n<p>或许某些人会对我的回答感到失望，并回复我说：“是的，这很有趣也很有用。但我到底应该学什么？C++还是Java？” 我再重复一次：并不是所有的问题都有一个唯一的简单的答案。<strong>问题的关键不在于选择某个编程语言，然后掌握之。问题的关键在于：持续学习，并且很多时候，有不止一个选择。</strong> 相信我所说的，你的生活会更精彩！</p>\n<p>原文出处：<br><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=259358\" target=\"_blank\" rel=\"noopener\">http://www.artima.com/weblogs/viewpost.jsp?thread=259358</a></p>\n<hr>\n<h1 id=\"Peter-Norvig：十年学会编程\"><a href=\"#Peter-Norvig：十年学会编程\" class=\"headerlink\" title=\"Peter Norvig：十年学会编程\"></a>Peter Norvig：十年学会编程</h1><p>作者 Peter Norvig 是计算机科学家，Google 的研究总监。<br>在本文中，Peter Norvig会告诉你：为什么急功近利地学习软件开发技术是没效果滴？</p>\n<p>================================</p>\n<h2 id=\"为啥都想速成？\"><a href=\"#为啥都想速成？\" class=\"headerlink\" title=\"为啥都想速成？\"></a>为啥都想速成？</h2><p>随便逛一下书店，你会看到《7天自学Java》等诸如此类的N天甚至N小时学习Visual Basic、Windows、Internet的书。我用亚马逊网站的搜索功能，出版年份选1992年以后，书名关键词是：“天”、“自学”、“教你”，查到248个结果，前78个是计算机类图书，第79个是《30天学孟加拉语》。我用“天”换成“小时”，结果更惊人，有多达253本书，前77本是计算机图书，第78是《24小时自学语法句式》。在前200名中，96%是计算机的书。</p>\n<p>结论就是：要么人们急于学习电脑，要么计算机比其他东西学起来要异常简单。没有任何书是关于几天学习贝多芬或量子物理的，甚至连犬类装扮都没有。费雷森（Felleisen）等人在其著作《如何设计程序》中同意这个趋势，其中提到：“坏设计很简单，笨蛋才用21天学，尽管他们还是真傻。”</p>\n<p>让我们看看《三日学会C++》这个书名意味着什么：</p>\n<p>◇学习：<br><strong>三天内你可能没有时间写出有意义的程序，或者从中积累经验。</strong>你不可能有时间去跟职业编程者一起去理解在C++环境下的状况。简而言之，你没有充足的时间学很多。所以这本书只能说肤浅的知识。正如亚历山大·波普（Alexander Pope）所言：一知半解是很危险的。</p>\n<p>◇C++：<br><strong>三天内你可能学会C++的句法（如果你已经了解其他的语言），但你还不会使用它。</strong>打个比方，假如你是个Basic程序员，你可能写出Basic风格的C++程序，而无法理解C++的真实好处。那要点是什么？艾伦·佩里斯(Alan Perlis)曾经说过：“一门不能影响你编程观点的语言不足学的。”有可能你学了一点点C++（或者诸如Javascript、Flex之类），因为你需要和现成的工具接口以完成手头的任务。这种情况下，你不是在学习如何编程，只是在学习如何完成任务。</p>\n<p>◇三日：<br>不幸地是，这远远不够，下一部分会详细讲。</p>\n<h2 id=\"如何用十年掌握编程\"><a href=\"#如何用十年掌握编程\" class=\"headerlink\" title=\"如何用十年掌握编程\"></a>如何用十年掌握编程</h2><p>研究人员（Bloom (1985), Bryan &amp; Harter (1899), Hayes (1989), Simmon &amp; Chase (1973)）得出结论：<strong>想要在诸多领域达到职业水平需要十年，比如国际象棋，作曲，电报操作，绘画，弹钢琴，游泳，网球以及神经心理学和拓扑学的研究。关键是精心练习，只是一遍一遍地重复是不够的，必须挑战恰好超越你能限的事情，尝试并思考你的表现，并自我矫正。周而复始。这并无捷径！</strong>4岁的音乐奇才莫扎特用了13年才能创作世界级的音乐。另外，披头士乐队似乎在1964年的埃德·苏利文（ Ed Sullivan show）演出中一炮而红，但是他们自从1957年就在利物浦和汉堡的酒吧演出，在取得广泛关注后，第一部重量级作品《佩珀军士》（Sgt. Peppers）是在1967年发行。马尔科姆·格拉德威尔（Malcolm Gladwell）撰文描述了一项针对柏林音乐学院学生的研究，他们被分为尖子，中等和不足三类，并被问到他们练琴的情况：<br>所有三组中的人，开始学琴的年龄大概相差无几，五岁左右。在刚开始的几年，所有人练习量也差不多，一周两三个小时。自八岁开始，实质性变化就有了。那些精英学生开始比其他人练习更多：九岁的时候一周六个小时，十二岁的时候一周八个小时，十四岁的时候一周十六个小时，一直到二十岁的时候一周要超过三十小时。截止到二十岁，在他们的生涯里已经有总计一万小时练琴。仅仅表现可以的那部分学生加起来是八千小时，那些未来的音乐老师有四千小时。</p>\n<p>所以，更确切地说，一万小时，而非十年，是个神奇之数。萨缪尔·约翰逊（Samuel Johnson, 1709-1784）认为还需更长时间：“卓越乃一生之追求，而非其它”。 乔叟（Chaucer, 1340-1400）抱怨道”the lyf so short, the craft so long to lerne.” （生之有限，学也无涯）。希波克拉底（Hippocrates, c. 400BC）因这句话被世人所知：”ars longa, vita brevis”（译注：拉丁语，意为“艺无尽，生有涯”），更长的版本是 “Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile”，翻译成英文就是 “Life is short, (the) craft long, opportunity fleeting, experiment treacherous, judgment difficult.” （生有涯，艺无尽，机遇瞬逝，践行误导，决断不易）。</p>\n<h2 id=\"我的编程成功秘笈是：\"><a href=\"#我的编程成功秘笈是：\" class=\"headerlink\" title=\"我的编程成功秘笈是：\"></a>我的编程成功秘笈是：</h2><blockquote>\n<ul>\n<li><p>首先要对编程感兴趣，能从编程中得到乐趣。一定要让它足够有趣，因为你要保持你的兴趣长达十年。</p>\n</li>\n<li><p><strong>与别的程序员交流；阅读别人的代码——这比看任何书或参加培训课都重要。</strong></p>\n</li>\n<li><p>实践。最好的学习乃实践。俗话说：“编程的至高境界一定要通过充分的实践才能达到，而个人的能力可通过不懈努力获得显著提升。” (p. 366) <strong>“最有效率的学习需要明确的目标，适当的难度，知识回馈，并容许重复或修正错误。”</strong> (p. 20-21) 《实践认知：每日的思维、数学及文化》（Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life） 在这方面可做参考。</p>\n</li>\n<li><p>如果你愿意，花四年学习大学课程（或者再加上读研）。这将给你赢得某些工作机会，并给予你在该领域的深层见解。<strong>但如果你不喜欢学校的学习，你同样可以在工作中获得相似的经验。无论如何，单靠书本是远远不够的。</strong>“学习计算机科学不会让你成为编程专家，如同学习绘画和色彩理论不会让你成为画家一样”。这是埃里克·雷蒙德（Eric Raymond）说的，他是《新黑客字典》（The New Hacker’s Dictionary）的作者。我雇用过的最优秀程序员，只有高中文凭。但他开发过许多伟大软件，有自己的新闻组，通过公司认股赚的钱就让他买下了自己的夜店。</p>\n</li>\n<li><p>和其他程序员一起参与工程项目。在某些项目中担当最优秀程序员，在另一些项目中充当最差劲程序员。<strong>充当领头羊的时候，你要测试你领导一项工程的能力，并用你的视野来激发他人；如果在项目组中垫底，就应该学习其它牛人在做些啥，以及他们不喜欢做的（看他们把哪些活让给你做）。</strong></p>\n</li>\n<li><p>继续别人的工程项目。去理解先前程序员写的程序。<strong>学习如何理解并解决先前程序员没有考虑到的问题。思考你的程序该如何设计以便让之后的程序员更容易维护。</strong></p>\n</li>\n<li><p>至少学6种程序语言。其中包括一种支持类抽象的（Java和C++），一种支持函数抽象的（如Lisp或ML），一种支持语义抽象的（Lisp），一种支援声明规范的（如Prolog或C++模板），还有一种支援协程的（Icon或Scheme），另外一种支持并发的（Sisal）。</p>\n</li>\n<li><p>记住，在“计算机科学”里有“计算机”一词。理解计算机执行你的代码的时候花费的时间。比如：从内存中取一个字（考虑有无缓存未命中情形），连续从磁盘读字，或者在磁盘中定位。</p>\n</li>\n<li><p>参加语言标准化工作。这可能是有关 ANSI C++ 委员会，也可能是决定你编码风格是两格缩进或四格缩进。无论如何，你要知道其他人对语言的喜好程度，有时还要想想他们为什么喜欢这样。</p>\n</li>\n<li><p>知道自己应该在何时脱身于语言标准化</p>\n</li>\n</ul>\n</blockquote>\n<p>所有上述这些，很难通过书本的学习来达到。我头一个孩子出生时，我读了所有的“如何做”（How To）系列的书籍，却依然对育婴毫无头绪。30个月后，我第二个孩子出生，我还需要温习一下那些书吗？绝对不！相反，我完全可以参照个人经验，而结果相当有效。这更让我确信：我的经验胜过那些专家们写的上千页文字。</p>\n<p>弗雷德·布鲁克斯（Fred Brooks）在《没有银弹》（No Silver Bullet）一书给出了寻找顶级设计师的三条建议：</p>\n<blockquote>\n<ul>\n<li>尽早系统地识别出顶级设计师。</li>\n<li>分配一个人作为其职业规划的导师。</li>\n<li><strong>给予机遇让成长中的设计师互相磨砺。</strong></li>\n</ul>\n</blockquote>\n<p>此处假定有部分人已经有成为伟大设计师的潜质，你所需的就是要诱导他们。艾伦·佩里斯（Alan Perlis）一针见血地指出：<strong>“假如人人都可以学雕刻，那就得教米开朗基罗如何不去干雕刻。对于伟大程序员，也是如此。”</strong></p>\n<p>所以，简单地买一本Java书，你或许能找到些有用的东西，但绝不会让你在24小时内甚至24天抑或24月内，成为行家里手。</p>\n<p>原文出处：<br><a href=\"http://norvig.com/21-days.html\" target=\"_blank\" rel=\"noopener\">http://norvig.com/21-days.html</a></p>\n"},{"title":"在ubuntu14.04上建立OpenGL编译环境","date":"2017-12-20T05:58:49.000Z","_content":"\n\n学习教程[LearnOpenGL-CN][1]前先配置学习环境，对照后面编译时链接的函数库，\n\n```sh\n$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor\n```\n\n需要：\n> * GLEW\n> * GLFW/GLFW3\n> * libgl1-mesa\n> * libglu1-mesa\n\n`ps: 不是完全明白这里链接库的对应关系`\n\n==========\n\n参考:[Howto_Install_OpenGL_Development_Environment][2]\n\n**建立基本编译环境**\n首先不可或缺的，就是編譯器與基本的函式庫，如果系統沒有安裝的話，請依照下面的方式安裝：\n```sh\nsudo apt-get install build-essential\n```\n\n**安裝OpenGL Library**\n接下來要把我們會用到的 Library 裝上去，首先安裝 OpenGL Library\n```sh\nsudo apt-get install libgl1-mesa-dev\n```\n\n**安裝OpenGL Utilities**\nOpenGL Utilities 是一組建構於 OpenGL Library 之上的工具組，提供許多很方便的函式，使 OpenGL 更強大且更容易使用。 接下來我們安裝OpenGL Utilities\n\n> 在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，\n\n```sh\nsudo apt-get install libglu1-mesa-dev\n```\n**安裝GLFW/GLFW3**\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。\n\nGLFW可以从它官方网站的[下载页][6]上获取。\n\n参考网站[How to build & install GLFW 3 and use it in a Linux project][3]\n解压后,\n\n```sh\n$ sudo apt-get install cmake\n\n$ cmake -G \"Unix Makefiles\"\n\n$ sudo apt-get build-dep glfw\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n\n$ sudo make\n$ sudo make install\n\nInstall the project...\n-- Install configuration: \"\"\n-- Installing: /usr/local/include/GLFW\n-- Installing: /usr/local/include/GLFW/glfw3.h\n-- Installing: /usr/local/include/GLFW/glfw3native.h\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3Config.cmake\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3ConfigVersion.cmake\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3Targets.cmake\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3Targets-noconfig.cmake\n-- Installing: /usr/local/lib/pkgconfig/glfw3.pc\n-- Installing: /usr/local/lib/libglfw3.a\n```\n\n**从[测试源码网站][4]复制案例代码测试**\n该案例中#include <GLFW/glfw3.h>\n\n\n```sh\n$ g++ -std=c++11 -c main.cpp\n\n$ ./main.o\nbash: ./main.o: cannot execute binary file: Exec format error  &lt;==执行main.o提示不是二进制可执行文件\n\n\n$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi\n/usr/bin/ld: //usr/local/lib/libglfw3.a(vulkan.c.o): undefined reference to symbol 'dlclose@@GLIBC_2.2.5'\n//lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from command line\ncollect2: error: ld returned 1 exit status\n```\n\nYou may also need to add the linker options -ldl -lXinerama -lXcursor to get it to work correctly if you are getting undefined references to **dlclose**\n\n```sh\n$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor\n\n$ ./main.exec\n```\n\n\n-l<Library>  告訴 gcc 去連結指定 Library\n-o<file>     指定執行檔的輸出名字\n\n执行:\n\n$ ./main.exec\n\n\n~~\\**安装glut\\*\\*~~\n\n~~\\`\\`\\`sh\nsudo apt-get install libglut-dev\n\\`\\`\\`~~\n\n~~沒有libglut-dev可以改用\n\\`\\`\\`sh\nsudo apt-get install freeglut3-dev\n\\`\\`\\`~~\n\n~~設定編譯參數與編譯\n在這之前，我們需要一個測試範例，example.c~~ [如下][2]：\n\n~~有了測試範例、基礎編譯環境與各個 OpenGL 相關的函式庫之後，我們所需要做的就是告訴編譯器我們有安裝 OpenGL 函式庫，編譯程式時要連結這些函式庫。~~\n\n~~gcc example.c -o example.out -lGL -lGLU -lglut\n因為我們安裝了 OpenGL Utility Toolkit ，它是建立在 OpenGL Utilities 與 OpenGL Library 之上，因此我們可以簡單連結 OpenGL Utility Toolkit 的函式庫就可以達到我們的目地了。下面的編譯參數跟上面的是同樣效果：~~\n\n~~gcc example.c -o example.out -lglut\n下面簡單說明一下所使用的 gcc 參數~~\n\n~~-l<Library>  告訴 gcc 去連結指定 Library\n-o<file>     指定執行檔的輸出名字~~\n\n~~執行\n接下來我們就可以來看看我們的結果，如果看到右圖，代表成功了!~\n./example.out~~\n\n\n**编译和链接GLEW**\n\n对于用GCC编译的Linux用户建议使用这个命令行选项-lGLEW -lglfw3 -lGL -lX11 -lpthread -lXrandr -lXi。没有正确链接相应的库会产生 undefined reference(未定义的引用) 这个错误。\n\n```sh\n$ sudo apt-get build-dep glew\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n\n$ sudo make\n$ sudo make install\n```\n\n==========\n\n**测试教程中的案例代码**\n\n复制 [代码hello_window.cpp][https://github.com/timtingwei/LearnOpenGL/src/1.getting_started/1.1.hello_window/hello_window.cpp]\n```sh\n$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor\n$ ls\na.out  hello_window.cpp\n$ ./a.out\nStarting GLFW context, OpenGL 3.3\n```\n看到初始化窗口，代表成功。\n\n**编译后窗口透明问题**\n虽然窗口初始化成功, 但不知道我的窗口为什么是透明的, 难道是ubuntu的原因吗？\nRender部分再加入两行代码\n```cpp\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\n```\n\n**编译后libGLEW.so.2.1: No such file or directory 问题**\n\n```sh\n..\n$ ./a.out\n./a.out: error while loading shared libraries: libGLEW.so.2.1: cannot open shared object file: No such file or directory\n```\n查询[stackoverflow libGLEW相关问题][5]\n得到libGLEW在lib64下, 于是便创建软link\n$ sudo ln -s /usr/lib64/libGLEW.so.2.1 /usr/lib/libGLEW.so.2.1\n\n==========\n\nrefwebsite:\nhttps://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\nhttps://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\nhttps://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\nhttp://www.glfw.org/docs/3.0/quick.html\nhttps://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\nhttp://www.glfw.org/download.html\n\n[1]:https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\n[2]:https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\n[3]:https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\n[4]:http://www.glfw.org/docs/3.0/quick.html\n[5]:https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\n[6]:http://www.glfw.org/download.html\n","source":"_posts/install-openGL-in-ubuntu14-04.md","raw":"---\ntitle: 在ubuntu14.04上建立OpenGL编译环境\ndate: 2017-12-20 13:58:49\ntags: OpenGL\n---\n\n\n学习教程[LearnOpenGL-CN][1]前先配置学习环境，对照后面编译时链接的函数库，\n\n```sh\n$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor\n```\n\n需要：\n> * GLEW\n> * GLFW/GLFW3\n> * libgl1-mesa\n> * libglu1-mesa\n\n`ps: 不是完全明白这里链接库的对应关系`\n\n==========\n\n参考:[Howto_Install_OpenGL_Development_Environment][2]\n\n**建立基本编译环境**\n首先不可或缺的，就是編譯器與基本的函式庫，如果系統沒有安裝的話，請依照下面的方式安裝：\n```sh\nsudo apt-get install build-essential\n```\n\n**安裝OpenGL Library**\n接下來要把我們會用到的 Library 裝上去，首先安裝 OpenGL Library\n```sh\nsudo apt-get install libgl1-mesa-dev\n```\n\n**安裝OpenGL Utilities**\nOpenGL Utilities 是一組建構於 OpenGL Library 之上的工具組，提供許多很方便的函式，使 OpenGL 更強大且更容易使用。 接下來我們安裝OpenGL Utilities\n\n> 在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，\n\n```sh\nsudo apt-get install libglu1-mesa-dev\n```\n**安裝GLFW/GLFW3**\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。\n\nGLFW可以从它官方网站的[下载页][6]上获取。\n\n参考网站[How to build & install GLFW 3 and use it in a Linux project][3]\n解压后,\n\n```sh\n$ sudo apt-get install cmake\n\n$ cmake -G \"Unix Makefiles\"\n\n$ sudo apt-get build-dep glfw\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n\n$ sudo make\n$ sudo make install\n\nInstall the project...\n-- Install configuration: \"\"\n-- Installing: /usr/local/include/GLFW\n-- Installing: /usr/local/include/GLFW/glfw3.h\n-- Installing: /usr/local/include/GLFW/glfw3native.h\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3Config.cmake\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3ConfigVersion.cmake\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3Targets.cmake\n-- Installing: /usr/local/lib/cmake/glfw3/glfw3Targets-noconfig.cmake\n-- Installing: /usr/local/lib/pkgconfig/glfw3.pc\n-- Installing: /usr/local/lib/libglfw3.a\n```\n\n**从[测试源码网站][4]复制案例代码测试**\n该案例中#include <GLFW/glfw3.h>\n\n\n```sh\n$ g++ -std=c++11 -c main.cpp\n\n$ ./main.o\nbash: ./main.o: cannot execute binary file: Exec format error  &lt;==执行main.o提示不是二进制可执行文件\n\n\n$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi\n/usr/bin/ld: //usr/local/lib/libglfw3.a(vulkan.c.o): undefined reference to symbol 'dlclose@@GLIBC_2.2.5'\n//lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from command line\ncollect2: error: ld returned 1 exit status\n```\n\nYou may also need to add the linker options -ldl -lXinerama -lXcursor to get it to work correctly if you are getting undefined references to **dlclose**\n\n```sh\n$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor\n\n$ ./main.exec\n```\n\n\n-l<Library>  告訴 gcc 去連結指定 Library\n-o<file>     指定執行檔的輸出名字\n\n执行:\n\n$ ./main.exec\n\n\n~~\\**安装glut\\*\\*~~\n\n~~\\`\\`\\`sh\nsudo apt-get install libglut-dev\n\\`\\`\\`~~\n\n~~沒有libglut-dev可以改用\n\\`\\`\\`sh\nsudo apt-get install freeglut3-dev\n\\`\\`\\`~~\n\n~~設定編譯參數與編譯\n在這之前，我們需要一個測試範例，example.c~~ [如下][2]：\n\n~~有了測試範例、基礎編譯環境與各個 OpenGL 相關的函式庫之後，我們所需要做的就是告訴編譯器我們有安裝 OpenGL 函式庫，編譯程式時要連結這些函式庫。~~\n\n~~gcc example.c -o example.out -lGL -lGLU -lglut\n因為我們安裝了 OpenGL Utility Toolkit ，它是建立在 OpenGL Utilities 與 OpenGL Library 之上，因此我們可以簡單連結 OpenGL Utility Toolkit 的函式庫就可以達到我們的目地了。下面的編譯參數跟上面的是同樣效果：~~\n\n~~gcc example.c -o example.out -lglut\n下面簡單說明一下所使用的 gcc 參數~~\n\n~~-l<Library>  告訴 gcc 去連結指定 Library\n-o<file>     指定執行檔的輸出名字~~\n\n~~執行\n接下來我們就可以來看看我們的結果，如果看到右圖，代表成功了!~\n./example.out~~\n\n\n**编译和链接GLEW**\n\n对于用GCC编译的Linux用户建议使用这个命令行选项-lGLEW -lglfw3 -lGL -lX11 -lpthread -lXrandr -lXi。没有正确链接相应的库会产生 undefined reference(未定义的引用) 这个错误。\n\n```sh\n$ sudo apt-get build-dep glew\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n\n$ sudo make\n$ sudo make install\n```\n\n==========\n\n**测试教程中的案例代码**\n\n复制 [代码hello_window.cpp][https://github.com/timtingwei/LearnOpenGL/src/1.getting_started/1.1.hello_window/hello_window.cpp]\n```sh\n$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor\n$ ls\na.out  hello_window.cpp\n$ ./a.out\nStarting GLFW context, OpenGL 3.3\n```\n看到初始化窗口，代表成功。\n\n**编译后窗口透明问题**\n虽然窗口初始化成功, 但不知道我的窗口为什么是透明的, 难道是ubuntu的原因吗？\nRender部分再加入两行代码\n```cpp\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\n```\n\n**编译后libGLEW.so.2.1: No such file or directory 问题**\n\n```sh\n..\n$ ./a.out\n./a.out: error while loading shared libraries: libGLEW.so.2.1: cannot open shared object file: No such file or directory\n```\n查询[stackoverflow libGLEW相关问题][5]\n得到libGLEW在lib64下, 于是便创建软link\n$ sudo ln -s /usr/lib64/libGLEW.so.2.1 /usr/lib/libGLEW.so.2.1\n\n==========\n\nrefwebsite:\nhttps://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\nhttps://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\nhttps://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\nhttp://www.glfw.org/docs/3.0/quick.html\nhttps://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\nhttp://www.glfw.org/download.html\n\n[1]:https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\n[2]:https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\n[3]:https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\n[4]:http://www.glfw.org/docs/3.0/quick.html\n[5]:https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\n[6]:http://www.glfw.org/download.html\n","slug":"install-openGL-in-ubuntu14-04","published":1,"updated":"2017-12-21T23:46:37.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukus7000mfadrkwtt9pze","content":"<p>学习教程<a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\" target=\"_blank\" rel=\"noopener\">LearnOpenGL-CN</a>前先配置学习环境，对照后面编译时链接的函数库，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor</span><br></pre></td></tr></table></figure>\n<p>需要：</p>\n<blockquote>\n<ul>\n<li>GLEW</li>\n<li>GLFW/GLFW3</li>\n<li>libgl1-mesa</li>\n<li>libglu1-mesa</li>\n</ul>\n</blockquote>\n<p><code>ps: 不是完全明白这里链接库的对应关系</code></p>\n<p>==========</p>\n<p>参考:<a href=\"https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\" target=\"_blank\" rel=\"noopener\">Howto_Install_OpenGL_Development_Environment</a></p>\n<p><strong>建立基本编译环境</strong><br>首先不可或缺的，就是編譯器與基本的函式庫，如果系統沒有安裝的話，請依照下面的方式安裝：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure></p>\n<p><strong>安裝OpenGL Library</strong><br>接下來要把我們會用到的 Library 裝上去，首先安裝 OpenGL Library<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libgl1-mesa-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>安裝OpenGL Utilities</strong><br>OpenGL Utilities 是一組建構於 OpenGL Library 之上的工具組，提供許多很方便的函式，使 OpenGL 更強大且更容易使用。 接下來我們安裝OpenGL Utilities</p>\n<blockquote>\n<p>在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p><strong>安裝GLFW/GLFW3</strong><br>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。</p>\n<p>GLFW可以从它官方网站的<a href=\"http://www.glfw.org/download.html\" target=\"_blank\" rel=\"noopener\">下载页</a>上获取。</p>\n<p>参考网站<a href=\"https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\" target=\"_blank\" rel=\"noopener\">How to build &amp; install GLFW 3 and use it in a Linux project</a><br>解压后,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install cmake</span><br><span class=\"line\"></span><br><span class=\"line\">$ cmake -G <span class=\"string\">\"Unix Makefiles\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get build-dep glfw</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">Install the project...</span><br><span class=\"line\">-- Install configuration: <span class=\"string\">\"\"</span></span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/include/GLFW</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/include/GLFW/glfw3.h</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/include/GLFW/glfw3native.h</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3Config.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3ConfigVersion.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3Targets.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3Targets-noconfig.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/pkgconfig/glfw3.pc</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/libglfw3.a</span><br></pre></td></tr></table></figure>\n<p><strong>从<a href=\"http://www.glfw.org/docs/3.0/quick.html\" target=\"_blank\" rel=\"noopener\">测试源码网站</a>复制案例代码测试</strong><br>该案例中#include <glfw glfw3.h=\"\"></glfw></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -std=c++11 -c main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./main.o</span><br><span class=\"line\">bash: ./main.o: cannot execute binary file: Exec format error  &amp;lt;==执行main.o提示不是二进制可执行文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi</span><br><span class=\"line\">/usr/bin/ld: //usr/<span class=\"built_in\">local</span>/lib/libglfw3.a(vulkan.c.o): undefined reference to symbol <span class=\"string\">'dlclose@@GLIBC_2.2.5'</span></span><br><span class=\"line\">//lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from <span class=\"built_in\">command</span> line</span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br></pre></td></tr></table></figure>\n<p>You may also need to add the linker options -ldl -lXinerama -lXcursor to get it to work correctly if you are getting undefined references to <strong>dlclose</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./main.exec</span><br></pre></td></tr></table></figure>\n<p>-l<library>  告訴 gcc 去連結指定 Library<br>-o<file>     指定執行檔的輸出名字</file></library></p>\n<p>执行:</p>\n<p>$ ./main.exec</p>\n<p><del>*<em>安装glut\\</em>*</del></p>\n<p><del>```sh<br>sudo apt-get install libglut-dev<br>```</del></p>\n<p><del>沒有libglut-dev可以改用<br>```sh<br>sudo apt-get install freeglut3-dev<br>```</del></p>\n<p><del>設定編譯參數與編譯<br>在這之前，我們需要一個測試範例，example.c</del> <a href=\"https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\" target=\"_blank\" rel=\"noopener\">如下</a>：</p>\n<p><del>有了測試範例、基礎編譯環境與各個 OpenGL 相關的函式庫之後，我們所需要做的就是告訴編譯器我們有安裝 OpenGL 函式庫，編譯程式時要連結這些函式庫。</del></p>\n<p><del>gcc example.c -o example.out -lGL -lGLU -lglut<br>因為我們安裝了 OpenGL Utility Toolkit ，它是建立在 OpenGL Utilities 與 OpenGL Library 之上，因此我們可以簡單連結 OpenGL Utility Toolkit 的函式庫就可以達到我們的目地了。下面的編譯參數跟上面的是同樣效果：</del></p>\n<p><del>gcc example.c -o example.out -lglut<br>下面簡單說明一下所使用的 gcc 參數</del></p>\n<p><del>-l<library>  告訴 gcc 去連結指定 Library<br>-o<file>     指定執行檔的輸出名字</file></library></del></p>\n<p><del>執行<br>接下來我們就可以來看看我們的結果，如果看到右圖，代表成功了!~<br>./example.out</del></p>\n<p><strong>编译和链接GLEW</strong></p>\n<p>对于用GCC编译的Linux用户建议使用这个命令行选项-lGLEW -lglfw3 -lGL -lX11 -lpthread -lXrandr -lXi。没有正确链接相应的库会产生 undefined reference(未定义的引用) 这个错误。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get build-dep glew</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n<p>==========</p>\n<p><strong>测试教程中的案例代码</strong></p>\n<p>复制 [代码hello_window.cpp][<a href=\"https://github.com/timtingwei/LearnOpenGL/src/1.getting_started/1.1.hello_window/hello_window.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/timtingwei/LearnOpenGL/src/1.getting_started/1.1.hello_window/hello_window.cpp</a>]<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">a.out  hello_window.cpp</span><br><span class=\"line\">$ ./a.out</span><br><span class=\"line\">Starting GLFW context, OpenGL 3.3</span><br></pre></td></tr></table></figure></p>\n<p>看到初始化窗口，代表成功。</p>\n<p><strong>编译后窗口透明问题</strong><br>虽然窗口初始化成功, 但不知道我的窗口为什么是透明的, 难道是ubuntu的原因吗？<br>Render部分再加入两行代码<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glClearColor(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">glClear(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure></p>\n<p><strong>编译后libGLEW.so.2.1: No such file or directory 问题</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br><span class=\"line\">$ ./a.out</span><br><span class=\"line\">./a.out: error <span class=\"keyword\">while</span> loading shared libraries: libGLEW.so.2.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>查询<a href=\"https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\" target=\"_blank\" rel=\"noopener\">stackoverflow libGLEW相关问题</a><br>得到libGLEW在lib64下, 于是便创建软link<br>$ sudo ln -s /usr/lib64/libGLEW.so.2.1 /usr/lib/libGLEW.so.2.1</p>\n<p>==========</p>\n<p>refwebsite:<br><a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\" target=\"_blank\" rel=\"noopener\">https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/</a><br><a href=\"https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\" target=\"_blank\" rel=\"noopener\">https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment</a><br><a href=\"https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project</a><br><a href=\"http://www.glfw.org/docs/3.0/quick.html\" target=\"_blank\" rel=\"noopener\">http://www.glfw.org/docs/3.0/quick.html</a><br><a href=\"https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew</a><br><a href=\"http://www.glfw.org/download.html\" target=\"_blank\" rel=\"noopener\">http://www.glfw.org/download.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习教程<a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\" target=\"_blank\" rel=\"noopener\">LearnOpenGL-CN</a>前先配置学习环境，对照后面编译时链接的函数库，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor</span><br></pre></td></tr></table></figure>\n<p>需要：</p>\n<blockquote>\n<ul>\n<li>GLEW</li>\n<li>GLFW/GLFW3</li>\n<li>libgl1-mesa</li>\n<li>libglu1-mesa</li>\n</ul>\n</blockquote>\n<p><code>ps: 不是完全明白这里链接库的对应关系</code></p>\n<p>==========</p>\n<p>参考:<a href=\"https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\" target=\"_blank\" rel=\"noopener\">Howto_Install_OpenGL_Development_Environment</a></p>\n<p><strong>建立基本编译环境</strong><br>首先不可或缺的，就是編譯器與基本的函式庫，如果系統沒有安裝的話，請依照下面的方式安裝：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure></p>\n<p><strong>安裝OpenGL Library</strong><br>接下來要把我們會用到的 Library 裝上去，首先安裝 OpenGL Library<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libgl1-mesa-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>安裝OpenGL Utilities</strong><br>OpenGL Utilities 是一組建構於 OpenGL Library 之上的工具組，提供許多很方便的函式，使 OpenGL 更強大且更容易使用。 接下來我們安裝OpenGL Utilities</p>\n<blockquote>\n<p>在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p><strong>安裝GLFW/GLFW3</strong><br>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。</p>\n<p>GLFW可以从它官方网站的<a href=\"http://www.glfw.org/download.html\" target=\"_blank\" rel=\"noopener\">下载页</a>上获取。</p>\n<p>参考网站<a href=\"https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\" target=\"_blank\" rel=\"noopener\">How to build &amp; install GLFW 3 and use it in a Linux project</a><br>解压后,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install cmake</span><br><span class=\"line\"></span><br><span class=\"line\">$ cmake -G <span class=\"string\">\"Unix Makefiles\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get build-dep glfw</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">Install the project...</span><br><span class=\"line\">-- Install configuration: <span class=\"string\">\"\"</span></span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/include/GLFW</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/include/GLFW/glfw3.h</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/include/GLFW/glfw3native.h</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3Config.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3ConfigVersion.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3Targets.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/cmake/glfw3/glfw3Targets-noconfig.cmake</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/pkgconfig/glfw3.pc</span><br><span class=\"line\">-- Installing: /usr/<span class=\"built_in\">local</span>/lib/libglfw3.a</span><br></pre></td></tr></table></figure>\n<p><strong>从<a href=\"http://www.glfw.org/docs/3.0/quick.html\" target=\"_blank\" rel=\"noopener\">测试源码网站</a>复制案例代码测试</strong><br>该案例中#include <glfw glfw3.h=\"\"></glfw></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -std=c++11 -c main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./main.o</span><br><span class=\"line\">bash: ./main.o: cannot execute binary file: Exec format error  &amp;lt;==执行main.o提示不是二进制可执行文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi</span><br><span class=\"line\">/usr/bin/ld: //usr/<span class=\"built_in\">local</span>/lib/libglfw3.a(vulkan.c.o): undefined reference to symbol <span class=\"string\">'dlclose@@GLIBC_2.2.5'</span></span><br><span class=\"line\">//lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from <span class=\"built_in\">command</span> line</span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br></pre></td></tr></table></figure>\n<p>You may also need to add the linker options -ldl -lXinerama -lXcursor to get it to work correctly if you are getting undefined references to <strong>dlclose</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ main.o -o main.exec -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./main.exec</span><br></pre></td></tr></table></figure>\n<p>-l<library>  告訴 gcc 去連結指定 Library<br>-o<file>     指定執行檔的輸出名字</file></library></p>\n<p>执行:</p>\n<p>$ ./main.exec</p>\n<p><del>*<em>安装glut\\</em>*</del></p>\n<p><del>```sh<br>sudo apt-get install libglut-dev<br>```</del></p>\n<p><del>沒有libglut-dev可以改用<br>```sh<br>sudo apt-get install freeglut3-dev<br>```</del></p>\n<p><del>設定編譯參數與編譯<br>在這之前，我們需要一個測試範例，example.c</del> <a href=\"https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\" target=\"_blank\" rel=\"noopener\">如下</a>：</p>\n<p><del>有了測試範例、基礎編譯環境與各個 OpenGL 相關的函式庫之後，我們所需要做的就是告訴編譯器我們有安裝 OpenGL 函式庫，編譯程式時要連結這些函式庫。</del></p>\n<p><del>gcc example.c -o example.out -lGL -lGLU -lglut<br>因為我們安裝了 OpenGL Utility Toolkit ，它是建立在 OpenGL Utilities 與 OpenGL Library 之上，因此我們可以簡單連結 OpenGL Utility Toolkit 的函式庫就可以達到我們的目地了。下面的編譯參數跟上面的是同樣效果：</del></p>\n<p><del>gcc example.c -o example.out -lglut<br>下面簡單說明一下所使用的 gcc 參數</del></p>\n<p><del>-l<library>  告訴 gcc 去連結指定 Library<br>-o<file>     指定執行檔的輸出名字</file></library></del></p>\n<p><del>執行<br>接下來我們就可以來看看我們的結果，如果看到右圖，代表成功了!~<br>./example.out</del></p>\n<p><strong>编译和链接GLEW</strong></p>\n<p>对于用GCC编译的Linux用户建议使用这个命令行选项-lGLEW -lglfw3 -lGL -lX11 -lpthread -lXrandr -lXi。没有正确链接相应的库会产生 undefined reference(未定义的引用) 这个错误。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get build-dep glew</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n<p>==========</p>\n<p><strong>测试教程中的案例代码</strong></p>\n<p>复制 [代码hello_window.cpp][<a href=\"https://github.com/timtingwei/LearnOpenGL/src/1.getting_started/1.1.hello_window/hello_window.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/timtingwei/LearnOpenGL/src/1.getting_started/1.1.hello_window/hello_window.cpp</a>]<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -std=c++11 hello_window.cpp -lGLEW -lGL -lGLU -lglfw3 -lX11 -lXxf86vm -lXrandr -lpthread -lXi -ldl -lXinerama -lXcursor</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">a.out  hello_window.cpp</span><br><span class=\"line\">$ ./a.out</span><br><span class=\"line\">Starting GLFW context, OpenGL 3.3</span><br></pre></td></tr></table></figure></p>\n<p>看到初始化窗口，代表成功。</p>\n<p><strong>编译后窗口透明问题</strong><br>虽然窗口初始化成功, 但不知道我的窗口为什么是透明的, 难道是ubuntu的原因吗？<br>Render部分再加入两行代码<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glClearColor(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">glClear(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure></p>\n<p><strong>编译后libGLEW.so.2.1: No such file or directory 问题</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br><span class=\"line\">$ ./a.out</span><br><span class=\"line\">./a.out: error <span class=\"keyword\">while</span> loading shared libraries: libGLEW.so.2.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>查询<a href=\"https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\" target=\"_blank\" rel=\"noopener\">stackoverflow libGLEW相关问题</a><br>得到libGLEW在lib64下, 于是便创建软link<br>$ sudo ln -s /usr/lib64/libGLEW.so.2.1 /usr/lib/libGLEW.so.2.1</p>\n<p>==========</p>\n<p>refwebsite:<br><a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/\" target=\"_blank\" rel=\"noopener\">https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/02%20Creating%20a%20window/</a><br><a href=\"https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment\" target=\"_blank\" rel=\"noopener\">https://wiki.ubuntu-tw.org/index.php?title=Howto_Install_OpenGL_Development_Environment</a><br><a href=\"https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/17768008/how-to-build-install-glfw-3-and-use-it-in-a-linux-project</a><br><a href=\"http://www.glfw.org/docs/3.0/quick.html\" target=\"_blank\" rel=\"noopener\">http://www.glfw.org/docs/3.0/quick.html</a><br><a href=\"https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/26372359/error-loading-shared-library-glew</a><br><a href=\"http://www.glfw.org/download.html\" target=\"_blank\" rel=\"noopener\">http://www.glfw.org/download.html</a></p>\n"},{"title":"Markdown删除线","date":"2017-12-21T23:24:06.000Z","_content":"\\~\\~删除一句\\~\\~\n~~删除一句~~\n\n\n\\~\\~删除\n多行\\~\\~\n~~删除\n多行~~\n\n\\~\\~删除包含语法\\\\[mituh's notes\\\\]\\\\[timtingwei.github.io\\\\]\\~\\~\n~~删除包含语法\\[mituh's notes\\]\\[timtingwei.github.io\\]~~\n\n\\====\n不知道还有其他方法否？\n\n\\====\nrefwebsite:\nhttps://en.wikipedia.org/wiki/Markdown\n","source":"_posts/markdown-delete-line.md","raw":"---\ntitle: Markdown删除线\ndate: 2017-12-22 07:24:06\ntags: markdown\n---\n\\~\\~删除一句\\~\\~\n~~删除一句~~\n\n\n\\~\\~删除\n多行\\~\\~\n~~删除\n多行~~\n\n\\~\\~删除包含语法\\\\[mituh's notes\\\\]\\\\[timtingwei.github.io\\\\]\\~\\~\n~~删除包含语法\\[mituh's notes\\]\\[timtingwei.github.io\\]~~\n\n\\====\n不知道还有其他方法否？\n\n\\====\nrefwebsite:\nhttps://en.wikipedia.org/wiki/Markdown\n","slug":"markdown-delete-line","published":1,"updated":"2017-12-21T23:35:57.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukus9000nfadrvxndxvk1","content":"<p>~~删除一句~~<br><del>删除一句</del></p>\n<p>~~删除<br>多行~~<br><del>删除<br>多行</del></p>\n<p>~~删除包含语法\\[mituh’s notes\\]\\[timtingwei.github.io\\]~~<br><del>删除包含语法[mituh’s notes][timtingwei.github.io]</del></p>\n<p>\\====<br>不知道还有其他方法否？</p>\n<p>\\====<br>refwebsite:<br><a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Markdown</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>~~删除一句~~<br><del>删除一句</del></p>\n<p>~~删除<br>多行~~<br><del>删除<br>多行</del></p>\n<p>~~删除包含语法\\[mituh’s notes\\]\\[timtingwei.github.io\\]~~<br><del>删除包含语法[mituh’s notes][timtingwei.github.io]</del></p>\n<p>\\====<br>不知道还有其他方法否？</p>\n<p>\\====<br>refwebsite:<br><a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Markdown</a></p>\n"},{"title":"<<游戏之旅>>笔记","date":"2018-01-04T01:34:38.000Z","_content":"\n最近读了云风大大的书, 感谢云风, 对我有所帮助。 \n选读 第1章， 第2章, 3.1, 3.2, 3.3, 3.5.2, 4.4.4, 8.1, 第9章, 13, 14\n\n# 对我有所启发的points\n > * 写email的建议\n > * C和C++的关系\n > * C++的开发经验\n > * 学习C++阅读次序\n > * template的技巧\n > * **开发的成功和失败的经验**\n > * 游戏编程几个反思\n > * 后记中编程实践和思考方法 \n > * 致谢中云风父亲的背景以及教育方法\n\n\n\n\n----\n# 2. 算法\n\n## 2.1 程序 = 算法+数据结构\n计算机解决的问题，看成一个需要求解的函数，\n> * 算法：将输入转化为输出的方法。\n> * 数据结构: 需要解决问题中的信息用计算机进行的数字描述方法，以及相应的对这些信息的操作。\n\n#### 2.1.1 算法\n时间和空间之间寻求平衡。\n> * 空间换时间的做法，非常广泛，即预处理\n> * 时间换空间，不容忽视，即使重复计算。\n\n依赖平台特性:\n> * 非并行计算机，不考虑用并行来提速。\n> * 空间允许随机访问，不是纸带机的顺序。\n\n#### 2.1.2 数据结构\n简单定义：对数据的组织方法，还有对数据组织方式的处理方法。\nC++已经提供了常见的数据结构，为什么还要学？\n> * 学蕴含思想\n> * 根据实际情况对数据结构进行改造，更高效。\n\n##### 1. 线性表\n\n\t有限逻辑上的有序数列，有确定的前驱和后驱；\n\t分为成：数组和链表;\n\t\n\t数组:\n\t\n##### 2. 堆栈、队列和串\n\n##### 3. 树、二叉树及其他\n\n**树：**\n有层次的数据集的组织方式。\n\nGUI界面，通常用树来组织；\n游戏中的对象管理，用树来解决管理上的层次问题。\n\n**二叉树:**\n严格来说不算是树。\n表达式计算，数据压缩，排序查找方面有很多用途。\n\n**四叉树、八叉树：**\n空间状态划分，\n> * 四叉树：平面\n> * 八叉树: 空间\n\n空间: 场景空间+ 调色盘算法等（向量空间）\n\n**图：**\n节点没有父子关系，纯粹的点和边的集合。\n节点和节点之间允许加上一些与它有关的数，称为权(weight)， 带权图称为网络。\n节点和节点之间可以有方向，也可以无方向。\n\n**图应用于现代网络游戏中，多服务器设计，或者三维游戏中的大场景描述，值得开发者好好研究。**\n\n**映射表**\nstd::map,STL最复杂的容器。\n\n\n**禁忌思想，**\n> * 模拟人的记忆过程，从某点开始，想临近区域扩展解。经过的地方一概进入禁忌状态，为了短期搜索回来，造成循环搜索，会有一个记忆寿命，超过若干步骤后解决禁忌。这个步骤叫做Tabu Length, 禁忌长度。禁忌长度过大会导致计算量增加，过小则会进入循环搜索。\n>* 蚂蚁队伍在附近找最高点。任意选择一个起点，一开始就保持队伍胡乱地向周围爬。蚂蚁队伍遵循一个原则，就是不能回到最近经过的位置。\n\n算法一种思想，自己动手实践，了解这些方法，慢慢地就可以真正运用它到实际中去。不光光要会描述一个问题，以适应不同的算法；还要了解更多的算法会让我们更快解决棘手问题。\n\n#### 2.4 优化\n> * 数学方法的改进\n> * 预运算来节省时间（空间换时间避免重复运算）或是重复运算来节省空间\n> * 简化算法求得近似来取代精确解（或最有解）\n> * 改进数据组织方式，用更少的操作处理更多的数据，甚至避免冗杂数据的处理。\n\n碰到棘手的问题，不要先急于找Google,或者问别人，应该自己思考最好的解决方法。每个人都有自己无数的解决方法，每次独立的思考，都是对思维的一次开阔。\n\n<<C语言程序设计400例>>\n\n\n**C**\nC语言本身是简洁的。语言本身仅仅只是提供了一种用计算机角度实现算法的符号。\nC语言函数，让问题分而治理它。\n全局变量，可以让函数之间不通过输入参数来访问一些公有的数据。\n最让人诟病就是指针的设计。从高级语言的角度来讲，程序员不需要指针。我们只需要有可以指带数据的标识之物。\n\n**BASIC**\n\n### 比较解释语言和C语言的不同\n\n解释型语言：\n> 1. 每运行一次，解释器就读一次，对符号进行翻译\n> 2. 中间状态以严格规定保存起来，在后面的语句需要时被重新加载\nC语言\n> 1. 在编码后需要多做一些工作，即他们会被翻译成为机器码，运行时就不需要翻译。\n> 2. 编译器对代码同类向合并，最后的机器码会很简洁。\n\n逻辑学教育，BASIC，适合理解编程。\n\n# 3. 编程语言\n## 3.3 C++\n### C++的不同理解\n\n第一印象可能是为了面向对象的设计，实际上C++是一种支持各种编程范式的语言。它支持面向过程的编程，基于对象的编程，面向对象的编程，以及使用template实现的泛型编程。\n\n### C对于C++的优势\n简洁，而非高效；适合做小内存的嵌入式系统开发。\n\n### 但大多数游戏平台，C++比C更适合\n\n## 3.4 汇编语言\n\n合适场合使用汇编，能让程序跑得更快。\n了解汇编，能让你了解代码最终会以什么形态运行于CPU，对理解高级语言有所帮助，\n在紧要关头帮忙，程序出现莫名错误，又不能在源码级调整程序。\n\n\n# 4. 前Windows时代\n## 4.3 保护模式下的开发工具\n\n个人主页建立之初，我罗列出了个人兴趣 ：...很多。但是大而全的效果是，我一样都做不好，而且和其他人的个人主页相比没有特色。稍加考虑，立刻砍掉了除了游戏开发之外的所有项目。\n>* 翻译allgero文档:自己做了一个辅助翻译的工具;细致了解; 交朋友\n>* 写关于游戏编程技术方面的小文，各处转载\n\n>* 利用假期，走访网上认识的从事游戏开发的朋友，慢慢踏上了游戏制作的道路。\n\n学习新的技术，翻译一本相关的英语著作可以算是捷径。\n> * 比囫囵吞枣的读一遍英文原文要有效的多。\n> * 因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。\n> * 即使对此有所了解，翻译后也能更上一层楼。\n> * 英语水平也会提高。\n\n## 4.4 闲话allegro\n\n### 4.4.4 几何图形和3D\n图形引擎提供，可以绘制一些几何图形，点，线，多边形等等，但制作平面游戏这些并不是必须的，因为游戏中的一切，事先都可以用预先制作好的图片代替掉。\n\n3D游戏，却是基于多边形。通过空间多边形的网络信息，把一些平面的图片，做一些变形，映射到多边形网格上。\n相关的:\n> * 透视映射\n> * 矩阵，三维空间中变换的工具, 自带一套矩阵运算。\n> * 实现了一套定点数的运算该改善游戏中需要的数学运算速度。\n\n**1,定点数**\n巧妙的利用定点数，可以避免许多浮点误差问题，是很有价值的。\n\n浮点数：计算机用一种纯小数加指数的形式表示实数。\n定点数：利用整数运算来模拟小数的方法，那就是定点数来表示小数。\n\n高16位，表示整数位；低16位，表示小数部分；实际是60000+倍，小数点的位置是固定的。\n\n精读在1/6*10^4, 十进制小数点后四位的精度。\n\n定点数的一些计算技巧和优势：\n> * 原本复杂的三角函数计算，可以依照所需要的精度，预先制作好查询表，以空间换取时间。\n> * 角度表示方式不是360和2pi, 而是64表示直角， 256表示圆周角。\n\n## 4.5 \n \n云风关于写email的建议：\n> * 回复收到的每封email, 即使没空写， 也让对方知道自己已读。\n> * 使用纯文本，发送过大附件前请求\n> * 合适的标题，能概括内容；偏题时，修改标题。\n> * 删除尽可能多的引信，尤其是对方的签名，对主题表达无意义。\n> * 合理分段，表达自己意见，别赞同两字多写一点。\n> * 发出之前，读一遍，修改掉错别字和语法错误，核对一次收件人是否正确\n> * 不要随意公开转载私人信件，即使转载也注明出处。\n \n# 8. 引擎中的优化\n\n“风魂”中很多蹩脚的编码方法，不成熟的整体架构、非系统的编码规范和不严谨的接口定义，但对于自己干了这件贻笑大方的事情，自己却不后悔。敢于把自己的无知展现给世人，是一种勇气。\n\n只要保持真诚谦逊，错误的存在就能得到理解；整体上或许不完善，但还是有后来者，依旧可以从中学到闪光点，避免踏上弯路。\n\t\n\n# 9. C和C++\n\n## 9.1 从C到C++\n1, C只提供了CPU本来就提供的操作，把他映射到更容易让人理解和描述的书写形式上。为了让程序员使用，引入了栈上临时变量，和堆上动态变量的概念，而不是直接面向寄存器。\n\n2, C对大块的数据，使用数据指针来表达。\n\n3, C一个个函数组织起来，函数之间按层次调用，去处理那些不同结构的数据\n\n4, C是对汇编语言的一种抽象, 正如汇编语言是对机器底层指令的一个最小幅度的抽象，为了人类方便控制机器。C程序员要做问题描述和机器模型之间的桥梁。\n\n5, C是容易学的，它非常接近机器模型，而机器模型非常简洁，有条理；有效率，接近机器模型；困难性，离实际描述太远，在问题描述和机器模型之间找到对应关系，会随着问题的复杂性提高而急剧增加。\n\n`困难性的说明`，\n高级语言往往改为对问题本身抽象，把问题归为特定的类别，然后，语言本身只解决这些被抽象的问题，来简单编程的难度，但往往**只能针对特定的类型**。\n\n`C++面向对象的说明`\n> * 既然保持强大的抽象能力，又保持底层符合机器模型的优势，在设计变得简单的情况下不失效率。\n> * 将对象分为不同的类型，每个对象都是这种对象的实例。类型的设计是有层次的，就好像动物是一种大类型，而哺乳动物和爬行动物都属于动物。\n\n## 9.2 C vs C++， 效率至上\n\n`C++中混有C语言的好处:`\n> 1, 更广泛的移植性\n> 2, C的思考方式，会让不致于陷入面向对象和泛型编程的泥沼，只是说很容易钻进设计方法的牛角尖\n> 3, 良好的C语言接口可能使得模块的使用方法更容易理解，对多人合作和多语言编程是一种好事\n> 4, C简洁, 编译速度快\n\n## 9.3 优雅的C++\n\n将C细化，又不增加额外的开销;\n不对程序员有过多限制。\n\n### 9.3.1 宏\n\n`宏的作用`\n> 1, 定义常数\n> 2, 代码生成\n> 3, 内联代码\n> 4, 对编译流程作出选择\n\n1, 定义常数\n\n```c\n#define PI 3.1415926f;\n```\n\n```cpp\nconst float PI;\n```\n\nC++会选择inline函数+template定义常数，最终编译器会把它优化成一个常数，而没有对函数调用的消耗。\n\n经典的如：\n```c\n#define min(a, b) ((a<b)?(a):(b))\n```\n\n\n```cpp\ntemplate <typename T> const T& min(const T &a, const T &b) {\n  return a<b ? a:b;\n}\n```\n\n### 9.3.2 const修饰以及类型转换\n\n\n#### const修饰\nconst chat* 而不是 C 的 char*\n\n将函数参数写成const;\n成员变量修饰成const, 只有在构造的时构建他们;\n为成员函数增加一个const, 表达这个函数不会修改类的成员变量\n\n\n#### 类型转换\n\nC中几乎任何类型都可以任意转换，缘于C汇编的根。\nC++用static_cast 以模板的语法表达看起来可以互相转换的类型互换\n\nconst和const之间的转换，只能通过const_cast转换。\n\n严格描述每个对象的const性质，可以帮助在编译期发生错误减少。\n\n### 9.3.3 隐藏实现\n好的C++程序会把所有数据都声明成private的，尽量在同一类中暴露过多的public方法，而protected慎用，至少尽量不用在成员数据上。\n\n作为良好的面向对象设计，继承类很少去扩展基类的功能，这样子作为具体实现，被隐藏于接口后，结构变得干净整洁。\n\n### 9.3.4 引用而非指针\n\n指针是导致资源被遗忘释放的罪魁祸首。\n> * 当旧的指针被赋予新值，旧的值消失，如果消失的值是唯一指向某个对象的地址，那么这个对象控制的资源将永远留在内存中，直到进程结束被系统回收。\n\n引用和指针在实现本质上是完全相同的，但引用的语法只能在构造的那一刻被赋值，并永远不能修改。\n\nC++优雅设计中，会用引用代替成员变量中的指针，而减少实现类的时候不小心犯错误。\n\n### 9.3.5 命名空间\n引用外部的名字空间到当前位置。可以防止不同库之间的名字冲突。\n\n## 9.4 C++的误区\n\n自己的一条准则： 尽可能地使用结构最简单的工具来完成任务，直到这个工具不合适。\n\n举例:\n> * 能用C写的程序，不用C++；能用C的原生数组的情况不用std::vector。能用std::vector的情况不要用std::map, 能自己写的代码不用第三方库。\n\n解释：\n> * 没有完美的程序，也没有完美的原则。\n> * 不主张写C++的标准库，重写MFC或者广为大众所使用的代码。大多数C++程序员，没到达这个技术理解。\n\n### 9.4.1 类层次过细\n会造成间接调用引起的损耗。\n\n### 9.4.2 滥用操作符重载\n\n为了让用户写出的类适用于现存的模板，让用户构造的对象和C++原生的类型有相同的表现，操作符重载是有意义的。\n如果仅仅是让程序看起来紧凑，或者是类使用起来“好玩”，那就是对其的滥用了。\n\n### 9.4.3 滥用标准容器\n用std::vector就不想再碰语言中的原生数组，用过std::string, 就不知道 const char* 是为何物，这是许多C++程序员的通病。\n\n`std::map可以这样子做，`\n如果只是为了创建一张key-value的对应表可供查询，完全可以用\nkey-value对应的关系记录下来，只做一次排序，在检索的时候可以使用二分查找查找，一种快捷又节省内存的方法。\n\n\n### 9.4.5 滥用多重继承\n\n会造成实现过于复杂，几乎所有的多重继承问题，都可以化为组合方式来解决。\n\n### 9.4.6 忽视C++高级特性的复杂度\n\n如果把两种复杂度高的特性运用于项目中，其复杂度不是两倍，而是平方。\n\n### 9.4.7 学习C++\n\n我现在无法把自己学会的东西，理解的东西借助文字教给入门者，因为许多的知识需要自己在实践中领悟。过多的细节，太快地展现出来反而会增加学习的复杂度，难以消化。\n\n因此，需要\n> 1，学\n> 2, 用\n> 3, 思考\n> 2, 回到1\n\n如果期望C++成为自己开发中的利器，应该尽量多用C++做项目，尽量可能地体验更多的设计方法，用心去写程序，而不是单单去实现而已。自己写出的代码，多多思考，对感觉不好的部分重新设计。\n\n推荐一个阅读次序:\n> 1, 先学会C，只是也是C++子集的部分。\n> 2, <<C++编程思想>>\n> 3, <<C++ Primer>> 和 <<C++ Programing Language>>\n> 4, C++ 标准文档(1998定制，电子档)，遇到问题不是去查某本教材，而是直接翻阅文档。\n> 5, <<C++的发展和演化>>，深入了解C++设计的根源以及C++编译器实现方法入手. \n> 6, <<深度探索C++物件模型>>对追求高效的C++程序员尤为受用。\n\n进阶学习: 需要一定的开发经验才能阅读\n\n> * <<Effective C++>>, <<More Effective C++>>, <<C++沉思录>>\n> * 泛型编程<<STL 源码剖析>>，有点难，但是花上一定的时间一定有收获。\n> * <<C++设计新思维------泛型编程与设计模式之应用>>template使用自信，对泛型编程感觉良好，\n> * <<C++标准程序库>>想更精通标准库，C++程序员案头必备的参考手册。\n> * <<Effective STL 中文版>>， 与前面的effcive系列一样\n\n\n### 9.5.3 再论动态内存分配\n\n//...\n\n理解动态内存的捷径，自己写一个内存分配器。从一大块给定的内存上，分配出用户提交的内存。\n\n\n### 9.6 template\n\ntemplate最初只为了取代C++语言的宏设计，后来被赋予了实例化的特性，可以针对某些特别的类型做特殊的操作。\n\n#### 9.6.1 封装C++的成员函数的调用\n\n#### 9.6.4 避免重复代码\n\n\n`大部分程序错误的根源:`\n> * 在多个地方表达相似的概念，意味着日后改动一个地方，就必须记得改动相似的所有地方。而直接复制这些代码，导致编译器并不知道这些地方的相似性，不能为你提供帮助。而人，随着项目扩大，几乎不可能记住做过多少次这种复制动作。\n\n没有意识到在重复，可以用加强对代码糟糕味道的嗅觉敏感度和提高作为编码者的责任心来达到。\n\n举个blit()例子\n\n#### 9.6.5 选择最佳的容器\n\n很多语言都提供了一种未定义类型的变量，可以用来保存各种不同类型的变量。而C++没有提供这样的类型，但是可以用template来模拟一个，也就是设计一个容器存放不同类型的对象。\n\n对于一个容器到底是保存\n> * 对象指针\n> * 对象值\n\n> * 对于体积较大的对象，保存指针, 复制很快\n> * 对于体积较小的对象，保存对象值, 减少间接；减少指针空间的占用\n\n可以利用模板在编译期间由编译器自动进行；\n\n#### 9.6.5 延迟计算\n由于涉及到了关于重载运算符的内容，暂且通读。大概是讲，可以自定义一种运算方式，但是又要对这种运算方式进行优化，所以需要模板的帮助，在编译期就对他进行不同函数的选择。\n\n#### 9.6.7 编译时的计算游戏（未完成）\n\n三个数排序\n+\n\n### 9.7 小结\n早犯一天错误，就可以早一天改正错误。\n\n# 13. 开发方法\n\n## 13.1 失败的经验\n> 1, 过多的工作压力压到一个人身上。\n> 2, 过分的弹性工作制\n> 3, 没完没了的变化和返工\n> 4, 没有及时的测试\n> 5, 项目的主导严重偏向了某一职位上\n\n`1, 过多的工作压力压到一个人身上。`\n迫于压力，无法学习新的东西，使用好方法解决问题。独揽大局，只能解决眼前碰到的bug, 耦合度太高。\n\n`2, 过分的弹性工作制`\n兴奋时效率高，停下来几天没有进展也可能发生。到了项目后期，bug重重，受到挫折之后，失去新鲜感，假借弹性工作制之名，导致怠工拖垮项目。放弃的时候，并非没有压力，可能只是不知道下一步该怎么做，或是问题太多，无法入手，项目已经失控。\n\n`3, 没完没了的变化和返工`\n想法太多，什么都想加入进来，导致最后漏洞很多。\n\n`> 4, 没有及时的测试`\n很少有严格的测试，而是把错误积累。 \n\n`5, 项目的主导严重偏向了某一职位上`\n程序员，策划，美术，盲目的跟从和固执的坚持自己都可能会影响整个项目.\n\n## 13.2 成功的经验\n> 1, 引擎和实现的分离\n> 2, 结对编程（XP 极限编程）\n> 3, 随时方便地测试\n> 4, 尽早发现结构上的问题, 并尽早重构\n> 5, 其他\n\n`1, 引擎和实现的分离`\n早期的程序员都是研究图形显示的技术开始的，总想表达更绚丽的图案，游戏程序变成了代码的集合。\n许多程序员都是模块见耦合度过高，对于软件的整体稳定性不利。\n和图形图像打交道的人，整个团队一个人就够了，他不需要去管任何的游戏的逻辑。\n\n其他还包括，图像处理模块，声音，网络，时钟，文件读写，windows窗口控制，需要和操作系统直接打交道的东西，不管多简单都应该分离。\n\n`2, 结对编程`\n找个水平差的不太远的程序员和自己配成一对，只有一台计算机，大家选一个人坐在键盘前，另外一个人口述。两个人需要不断的交流，频率不应该低于一分钟一次。整个设计思想是由后面只动口不动手的人主导，而由键盘操作的人实现。由于人的思维速度是快于键盘输入的速度的，那么观看的人有空闲的时间可以用来思考，很容易看出代码和结构的问题。\n\n潜在问题的代码，在XP极限编程中，被称做代码的**坏味道**。\n\n好处:\n> 1, 促进参与项目的程序员的自身的提高。水平较低的学习新东西，水平较高的把思路说出来整理思路。\n> 2, 参与项目人员互换位置，使得维护繁杂的文档不再那么重要，一旦有人离开，项目不会受到影响。大家的交流更顺畅，关系更融洽。\n> 3, 提高工作效率。单独工作遇到问题刷网站，而这种方法是交流解决问题。互相监督和激65励。\n\n`3, 随时方便地测试`\n测试应该从开发者开始，从项目一开始就开始。\n\n`4, 尽早发现结构上的问题, 并尽早重构`\n\n`5, 其他`\n\n脚本和版本控制。\n软件开发的素养。\n\n\n# 14. 编程和游戏\n\n技术派在挖空心思模拟出更真实，更绚丽的画面；创意派在为自己构思的游戏中的一个绝妙的主意沾沾自喜。\n而忽略了一些更重要的东西。\n\n## 14.1 操作\n\n任何一个游戏都是玩家和程序之间通过操作设备进行交互产生乐趣。\n\n## 14.2 角色设定\n\n生动的角色，RPG，增加游戏气氛\n\n## 14.3 操作技术\n\n`3D和2D`\n> * 应该由游戏本身的需要决定。\n> * 3D技术问题是通过一些近似算法而不是数学上严格的方案，得到令人满意的效果。\n> * 2D技术怎样控制和管理不断膨胀的图片数量\n\n## 14.4 浅谈网络游戏\n\n`社会性`\n除了传统的游戏它自身的娱乐性之外，还存在一种社会性。\n因为社会性，就更需要在游戏中设计完备的经济体系，追踪货币的流通，实物的交换，弄清游戏社会中的经济是如何运作的。\n\n看似不是程序的事情，但非程序的策划很难去做：\n> * 大规模的数字采集和统计的工作\n> * 大规模所要求的服务器架构，需要减轻数据库负担，减轻服务器压力，必须在设计上针对硬件水平作出精简。只有熟悉软件架构的人才能去做。\n\n`平衡性`\n> * 传统游戏中渡过来的方法，多数是依靠经验而不是数学推算来解决，慢慢的会变得不那么有效果。\n> * 程序员有数学和计算机运算工具的能力，可以完善为平衡而更理论化的工具。\n\n## 14.5 小结\n\n一个好的游戏程序员和策划之间的界限往往很模糊，所以游戏程序员除了编程方面的修养，各个领域的只是都应该有所涉猎，以提高自身的修养。\n\n# 后记\n\n技术问题，固然本源的方法，理论变化不大。但计算机这种偏重工程的实践，一旦实际化到具体上，却有日新月异的变化，想要搞清楚问题，不是朝夕之功，只好借着自己对旧知识的理解去参悟新的知识。\n\n# 致谢\n记得在初中毕业前夕，我曾经萌发过放弃上重点高中乃至上大学的想法。但是，面对盛怒之后，老泪纵横的父亲，第一次看到父亲的眼泪时，我理解了，理解了一个求知欲如此强烈的人却由于时代的错误，甚至连高中都没有机会去读，在繁忙的工作中，熬夜自学考上大学的人，怎能不对自己的儿子在学业上有更高的期望呢。\n","source":"_posts/trip-of-game-notes.md","raw":"---\ntitle: <<游戏之旅>>笔记\ndate: 2018-01-04 09:34:38\ntags: [读书, 游戏, C++]\n---\n\n最近读了云风大大的书, 感谢云风, 对我有所帮助。 \n选读 第1章， 第2章, 3.1, 3.2, 3.3, 3.5.2, 4.4.4, 8.1, 第9章, 13, 14\n\n# 对我有所启发的points\n > * 写email的建议\n > * C和C++的关系\n > * C++的开发经验\n > * 学习C++阅读次序\n > * template的技巧\n > * **开发的成功和失败的经验**\n > * 游戏编程几个反思\n > * 后记中编程实践和思考方法 \n > * 致谢中云风父亲的背景以及教育方法\n\n\n\n\n----\n# 2. 算法\n\n## 2.1 程序 = 算法+数据结构\n计算机解决的问题，看成一个需要求解的函数，\n> * 算法：将输入转化为输出的方法。\n> * 数据结构: 需要解决问题中的信息用计算机进行的数字描述方法，以及相应的对这些信息的操作。\n\n#### 2.1.1 算法\n时间和空间之间寻求平衡。\n> * 空间换时间的做法，非常广泛，即预处理\n> * 时间换空间，不容忽视，即使重复计算。\n\n依赖平台特性:\n> * 非并行计算机，不考虑用并行来提速。\n> * 空间允许随机访问，不是纸带机的顺序。\n\n#### 2.1.2 数据结构\n简单定义：对数据的组织方法，还有对数据组织方式的处理方法。\nC++已经提供了常见的数据结构，为什么还要学？\n> * 学蕴含思想\n> * 根据实际情况对数据结构进行改造，更高效。\n\n##### 1. 线性表\n\n\t有限逻辑上的有序数列，有确定的前驱和后驱；\n\t分为成：数组和链表;\n\t\n\t数组:\n\t\n##### 2. 堆栈、队列和串\n\n##### 3. 树、二叉树及其他\n\n**树：**\n有层次的数据集的组织方式。\n\nGUI界面，通常用树来组织；\n游戏中的对象管理，用树来解决管理上的层次问题。\n\n**二叉树:**\n严格来说不算是树。\n表达式计算，数据压缩，排序查找方面有很多用途。\n\n**四叉树、八叉树：**\n空间状态划分，\n> * 四叉树：平面\n> * 八叉树: 空间\n\n空间: 场景空间+ 调色盘算法等（向量空间）\n\n**图：**\n节点没有父子关系，纯粹的点和边的集合。\n节点和节点之间允许加上一些与它有关的数，称为权(weight)， 带权图称为网络。\n节点和节点之间可以有方向，也可以无方向。\n\n**图应用于现代网络游戏中，多服务器设计，或者三维游戏中的大场景描述，值得开发者好好研究。**\n\n**映射表**\nstd::map,STL最复杂的容器。\n\n\n**禁忌思想，**\n> * 模拟人的记忆过程，从某点开始，想临近区域扩展解。经过的地方一概进入禁忌状态，为了短期搜索回来，造成循环搜索，会有一个记忆寿命，超过若干步骤后解决禁忌。这个步骤叫做Tabu Length, 禁忌长度。禁忌长度过大会导致计算量增加，过小则会进入循环搜索。\n>* 蚂蚁队伍在附近找最高点。任意选择一个起点，一开始就保持队伍胡乱地向周围爬。蚂蚁队伍遵循一个原则，就是不能回到最近经过的位置。\n\n算法一种思想，自己动手实践，了解这些方法，慢慢地就可以真正运用它到实际中去。不光光要会描述一个问题，以适应不同的算法；还要了解更多的算法会让我们更快解决棘手问题。\n\n#### 2.4 优化\n> * 数学方法的改进\n> * 预运算来节省时间（空间换时间避免重复运算）或是重复运算来节省空间\n> * 简化算法求得近似来取代精确解（或最有解）\n> * 改进数据组织方式，用更少的操作处理更多的数据，甚至避免冗杂数据的处理。\n\n碰到棘手的问题，不要先急于找Google,或者问别人，应该自己思考最好的解决方法。每个人都有自己无数的解决方法，每次独立的思考，都是对思维的一次开阔。\n\n<<C语言程序设计400例>>\n\n\n**C**\nC语言本身是简洁的。语言本身仅仅只是提供了一种用计算机角度实现算法的符号。\nC语言函数，让问题分而治理它。\n全局变量，可以让函数之间不通过输入参数来访问一些公有的数据。\n最让人诟病就是指针的设计。从高级语言的角度来讲，程序员不需要指针。我们只需要有可以指带数据的标识之物。\n\n**BASIC**\n\n### 比较解释语言和C语言的不同\n\n解释型语言：\n> 1. 每运行一次，解释器就读一次，对符号进行翻译\n> 2. 中间状态以严格规定保存起来，在后面的语句需要时被重新加载\nC语言\n> 1. 在编码后需要多做一些工作，即他们会被翻译成为机器码，运行时就不需要翻译。\n> 2. 编译器对代码同类向合并，最后的机器码会很简洁。\n\n逻辑学教育，BASIC，适合理解编程。\n\n# 3. 编程语言\n## 3.3 C++\n### C++的不同理解\n\n第一印象可能是为了面向对象的设计，实际上C++是一种支持各种编程范式的语言。它支持面向过程的编程，基于对象的编程，面向对象的编程，以及使用template实现的泛型编程。\n\n### C对于C++的优势\n简洁，而非高效；适合做小内存的嵌入式系统开发。\n\n### 但大多数游戏平台，C++比C更适合\n\n## 3.4 汇编语言\n\n合适场合使用汇编，能让程序跑得更快。\n了解汇编，能让你了解代码最终会以什么形态运行于CPU，对理解高级语言有所帮助，\n在紧要关头帮忙，程序出现莫名错误，又不能在源码级调整程序。\n\n\n# 4. 前Windows时代\n## 4.3 保护模式下的开发工具\n\n个人主页建立之初，我罗列出了个人兴趣 ：...很多。但是大而全的效果是，我一样都做不好，而且和其他人的个人主页相比没有特色。稍加考虑，立刻砍掉了除了游戏开发之外的所有项目。\n>* 翻译allgero文档:自己做了一个辅助翻译的工具;细致了解; 交朋友\n>* 写关于游戏编程技术方面的小文，各处转载\n\n>* 利用假期，走访网上认识的从事游戏开发的朋友，慢慢踏上了游戏制作的道路。\n\n学习新的技术，翻译一本相关的英语著作可以算是捷径。\n> * 比囫囵吞枣的读一遍英文原文要有效的多。\n> * 因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。\n> * 即使对此有所了解，翻译后也能更上一层楼。\n> * 英语水平也会提高。\n\n## 4.4 闲话allegro\n\n### 4.4.4 几何图形和3D\n图形引擎提供，可以绘制一些几何图形，点，线，多边形等等，但制作平面游戏这些并不是必须的，因为游戏中的一切，事先都可以用预先制作好的图片代替掉。\n\n3D游戏，却是基于多边形。通过空间多边形的网络信息，把一些平面的图片，做一些变形，映射到多边形网格上。\n相关的:\n> * 透视映射\n> * 矩阵，三维空间中变换的工具, 自带一套矩阵运算。\n> * 实现了一套定点数的运算该改善游戏中需要的数学运算速度。\n\n**1,定点数**\n巧妙的利用定点数，可以避免许多浮点误差问题，是很有价值的。\n\n浮点数：计算机用一种纯小数加指数的形式表示实数。\n定点数：利用整数运算来模拟小数的方法，那就是定点数来表示小数。\n\n高16位，表示整数位；低16位，表示小数部分；实际是60000+倍，小数点的位置是固定的。\n\n精读在1/6*10^4, 十进制小数点后四位的精度。\n\n定点数的一些计算技巧和优势：\n> * 原本复杂的三角函数计算，可以依照所需要的精度，预先制作好查询表，以空间换取时间。\n> * 角度表示方式不是360和2pi, 而是64表示直角， 256表示圆周角。\n\n## 4.5 \n \n云风关于写email的建议：\n> * 回复收到的每封email, 即使没空写， 也让对方知道自己已读。\n> * 使用纯文本，发送过大附件前请求\n> * 合适的标题，能概括内容；偏题时，修改标题。\n> * 删除尽可能多的引信，尤其是对方的签名，对主题表达无意义。\n> * 合理分段，表达自己意见，别赞同两字多写一点。\n> * 发出之前，读一遍，修改掉错别字和语法错误，核对一次收件人是否正确\n> * 不要随意公开转载私人信件，即使转载也注明出处。\n \n# 8. 引擎中的优化\n\n“风魂”中很多蹩脚的编码方法，不成熟的整体架构、非系统的编码规范和不严谨的接口定义，但对于自己干了这件贻笑大方的事情，自己却不后悔。敢于把自己的无知展现给世人，是一种勇气。\n\n只要保持真诚谦逊，错误的存在就能得到理解；整体上或许不完善，但还是有后来者，依旧可以从中学到闪光点，避免踏上弯路。\n\t\n\n# 9. C和C++\n\n## 9.1 从C到C++\n1, C只提供了CPU本来就提供的操作，把他映射到更容易让人理解和描述的书写形式上。为了让程序员使用，引入了栈上临时变量，和堆上动态变量的概念，而不是直接面向寄存器。\n\n2, C对大块的数据，使用数据指针来表达。\n\n3, C一个个函数组织起来，函数之间按层次调用，去处理那些不同结构的数据\n\n4, C是对汇编语言的一种抽象, 正如汇编语言是对机器底层指令的一个最小幅度的抽象，为了人类方便控制机器。C程序员要做问题描述和机器模型之间的桥梁。\n\n5, C是容易学的，它非常接近机器模型，而机器模型非常简洁，有条理；有效率，接近机器模型；困难性，离实际描述太远，在问题描述和机器模型之间找到对应关系，会随着问题的复杂性提高而急剧增加。\n\n`困难性的说明`，\n高级语言往往改为对问题本身抽象，把问题归为特定的类别，然后，语言本身只解决这些被抽象的问题，来简单编程的难度，但往往**只能针对特定的类型**。\n\n`C++面向对象的说明`\n> * 既然保持强大的抽象能力，又保持底层符合机器模型的优势，在设计变得简单的情况下不失效率。\n> * 将对象分为不同的类型，每个对象都是这种对象的实例。类型的设计是有层次的，就好像动物是一种大类型，而哺乳动物和爬行动物都属于动物。\n\n## 9.2 C vs C++， 效率至上\n\n`C++中混有C语言的好处:`\n> 1, 更广泛的移植性\n> 2, C的思考方式，会让不致于陷入面向对象和泛型编程的泥沼，只是说很容易钻进设计方法的牛角尖\n> 3, 良好的C语言接口可能使得模块的使用方法更容易理解，对多人合作和多语言编程是一种好事\n> 4, C简洁, 编译速度快\n\n## 9.3 优雅的C++\n\n将C细化，又不增加额外的开销;\n不对程序员有过多限制。\n\n### 9.3.1 宏\n\n`宏的作用`\n> 1, 定义常数\n> 2, 代码生成\n> 3, 内联代码\n> 4, 对编译流程作出选择\n\n1, 定义常数\n\n```c\n#define PI 3.1415926f;\n```\n\n```cpp\nconst float PI;\n```\n\nC++会选择inline函数+template定义常数，最终编译器会把它优化成一个常数，而没有对函数调用的消耗。\n\n经典的如：\n```c\n#define min(a, b) ((a<b)?(a):(b))\n```\n\n\n```cpp\ntemplate <typename T> const T& min(const T &a, const T &b) {\n  return a<b ? a:b;\n}\n```\n\n### 9.3.2 const修饰以及类型转换\n\n\n#### const修饰\nconst chat* 而不是 C 的 char*\n\n将函数参数写成const;\n成员变量修饰成const, 只有在构造的时构建他们;\n为成员函数增加一个const, 表达这个函数不会修改类的成员变量\n\n\n#### 类型转换\n\nC中几乎任何类型都可以任意转换，缘于C汇编的根。\nC++用static_cast 以模板的语法表达看起来可以互相转换的类型互换\n\nconst和const之间的转换，只能通过const_cast转换。\n\n严格描述每个对象的const性质，可以帮助在编译期发生错误减少。\n\n### 9.3.3 隐藏实现\n好的C++程序会把所有数据都声明成private的，尽量在同一类中暴露过多的public方法，而protected慎用，至少尽量不用在成员数据上。\n\n作为良好的面向对象设计，继承类很少去扩展基类的功能，这样子作为具体实现，被隐藏于接口后，结构变得干净整洁。\n\n### 9.3.4 引用而非指针\n\n指针是导致资源被遗忘释放的罪魁祸首。\n> * 当旧的指针被赋予新值，旧的值消失，如果消失的值是唯一指向某个对象的地址，那么这个对象控制的资源将永远留在内存中，直到进程结束被系统回收。\n\n引用和指针在实现本质上是完全相同的，但引用的语法只能在构造的那一刻被赋值，并永远不能修改。\n\nC++优雅设计中，会用引用代替成员变量中的指针，而减少实现类的时候不小心犯错误。\n\n### 9.3.5 命名空间\n引用外部的名字空间到当前位置。可以防止不同库之间的名字冲突。\n\n## 9.4 C++的误区\n\n自己的一条准则： 尽可能地使用结构最简单的工具来完成任务，直到这个工具不合适。\n\n举例:\n> * 能用C写的程序，不用C++；能用C的原生数组的情况不用std::vector。能用std::vector的情况不要用std::map, 能自己写的代码不用第三方库。\n\n解释：\n> * 没有完美的程序，也没有完美的原则。\n> * 不主张写C++的标准库，重写MFC或者广为大众所使用的代码。大多数C++程序员，没到达这个技术理解。\n\n### 9.4.1 类层次过细\n会造成间接调用引起的损耗。\n\n### 9.4.2 滥用操作符重载\n\n为了让用户写出的类适用于现存的模板，让用户构造的对象和C++原生的类型有相同的表现，操作符重载是有意义的。\n如果仅仅是让程序看起来紧凑，或者是类使用起来“好玩”，那就是对其的滥用了。\n\n### 9.4.3 滥用标准容器\n用std::vector就不想再碰语言中的原生数组，用过std::string, 就不知道 const char* 是为何物，这是许多C++程序员的通病。\n\n`std::map可以这样子做，`\n如果只是为了创建一张key-value的对应表可供查询，完全可以用\nkey-value对应的关系记录下来，只做一次排序，在检索的时候可以使用二分查找查找，一种快捷又节省内存的方法。\n\n\n### 9.4.5 滥用多重继承\n\n会造成实现过于复杂，几乎所有的多重继承问题，都可以化为组合方式来解决。\n\n### 9.4.6 忽视C++高级特性的复杂度\n\n如果把两种复杂度高的特性运用于项目中，其复杂度不是两倍，而是平方。\n\n### 9.4.7 学习C++\n\n我现在无法把自己学会的东西，理解的东西借助文字教给入门者，因为许多的知识需要自己在实践中领悟。过多的细节，太快地展现出来反而会增加学习的复杂度，难以消化。\n\n因此，需要\n> 1，学\n> 2, 用\n> 3, 思考\n> 2, 回到1\n\n如果期望C++成为自己开发中的利器，应该尽量多用C++做项目，尽量可能地体验更多的设计方法，用心去写程序，而不是单单去实现而已。自己写出的代码，多多思考，对感觉不好的部分重新设计。\n\n推荐一个阅读次序:\n> 1, 先学会C，只是也是C++子集的部分。\n> 2, <<C++编程思想>>\n> 3, <<C++ Primer>> 和 <<C++ Programing Language>>\n> 4, C++ 标准文档(1998定制，电子档)，遇到问题不是去查某本教材，而是直接翻阅文档。\n> 5, <<C++的发展和演化>>，深入了解C++设计的根源以及C++编译器实现方法入手. \n> 6, <<深度探索C++物件模型>>对追求高效的C++程序员尤为受用。\n\n进阶学习: 需要一定的开发经验才能阅读\n\n> * <<Effective C++>>, <<More Effective C++>>, <<C++沉思录>>\n> * 泛型编程<<STL 源码剖析>>，有点难，但是花上一定的时间一定有收获。\n> * <<C++设计新思维------泛型编程与设计模式之应用>>template使用自信，对泛型编程感觉良好，\n> * <<C++标准程序库>>想更精通标准库，C++程序员案头必备的参考手册。\n> * <<Effective STL 中文版>>， 与前面的effcive系列一样\n\n\n### 9.5.3 再论动态内存分配\n\n//...\n\n理解动态内存的捷径，自己写一个内存分配器。从一大块给定的内存上，分配出用户提交的内存。\n\n\n### 9.6 template\n\ntemplate最初只为了取代C++语言的宏设计，后来被赋予了实例化的特性，可以针对某些特别的类型做特殊的操作。\n\n#### 9.6.1 封装C++的成员函数的调用\n\n#### 9.6.4 避免重复代码\n\n\n`大部分程序错误的根源:`\n> * 在多个地方表达相似的概念，意味着日后改动一个地方，就必须记得改动相似的所有地方。而直接复制这些代码，导致编译器并不知道这些地方的相似性，不能为你提供帮助。而人，随着项目扩大，几乎不可能记住做过多少次这种复制动作。\n\n没有意识到在重复，可以用加强对代码糟糕味道的嗅觉敏感度和提高作为编码者的责任心来达到。\n\n举个blit()例子\n\n#### 9.6.5 选择最佳的容器\n\n很多语言都提供了一种未定义类型的变量，可以用来保存各种不同类型的变量。而C++没有提供这样的类型，但是可以用template来模拟一个，也就是设计一个容器存放不同类型的对象。\n\n对于一个容器到底是保存\n> * 对象指针\n> * 对象值\n\n> * 对于体积较大的对象，保存指针, 复制很快\n> * 对于体积较小的对象，保存对象值, 减少间接；减少指针空间的占用\n\n可以利用模板在编译期间由编译器自动进行；\n\n#### 9.6.5 延迟计算\n由于涉及到了关于重载运算符的内容，暂且通读。大概是讲，可以自定义一种运算方式，但是又要对这种运算方式进行优化，所以需要模板的帮助，在编译期就对他进行不同函数的选择。\n\n#### 9.6.7 编译时的计算游戏（未完成）\n\n三个数排序\n+\n\n### 9.7 小结\n早犯一天错误，就可以早一天改正错误。\n\n# 13. 开发方法\n\n## 13.1 失败的经验\n> 1, 过多的工作压力压到一个人身上。\n> 2, 过分的弹性工作制\n> 3, 没完没了的变化和返工\n> 4, 没有及时的测试\n> 5, 项目的主导严重偏向了某一职位上\n\n`1, 过多的工作压力压到一个人身上。`\n迫于压力，无法学习新的东西，使用好方法解决问题。独揽大局，只能解决眼前碰到的bug, 耦合度太高。\n\n`2, 过分的弹性工作制`\n兴奋时效率高，停下来几天没有进展也可能发生。到了项目后期，bug重重，受到挫折之后，失去新鲜感，假借弹性工作制之名，导致怠工拖垮项目。放弃的时候，并非没有压力，可能只是不知道下一步该怎么做，或是问题太多，无法入手，项目已经失控。\n\n`3, 没完没了的变化和返工`\n想法太多，什么都想加入进来，导致最后漏洞很多。\n\n`> 4, 没有及时的测试`\n很少有严格的测试，而是把错误积累。 \n\n`5, 项目的主导严重偏向了某一职位上`\n程序员，策划，美术，盲目的跟从和固执的坚持自己都可能会影响整个项目.\n\n## 13.2 成功的经验\n> 1, 引擎和实现的分离\n> 2, 结对编程（XP 极限编程）\n> 3, 随时方便地测试\n> 4, 尽早发现结构上的问题, 并尽早重构\n> 5, 其他\n\n`1, 引擎和实现的分离`\n早期的程序员都是研究图形显示的技术开始的，总想表达更绚丽的图案，游戏程序变成了代码的集合。\n许多程序员都是模块见耦合度过高，对于软件的整体稳定性不利。\n和图形图像打交道的人，整个团队一个人就够了，他不需要去管任何的游戏的逻辑。\n\n其他还包括，图像处理模块，声音，网络，时钟，文件读写，windows窗口控制，需要和操作系统直接打交道的东西，不管多简单都应该分离。\n\n`2, 结对编程`\n找个水平差的不太远的程序员和自己配成一对，只有一台计算机，大家选一个人坐在键盘前，另外一个人口述。两个人需要不断的交流，频率不应该低于一分钟一次。整个设计思想是由后面只动口不动手的人主导，而由键盘操作的人实现。由于人的思维速度是快于键盘输入的速度的，那么观看的人有空闲的时间可以用来思考，很容易看出代码和结构的问题。\n\n潜在问题的代码，在XP极限编程中，被称做代码的**坏味道**。\n\n好处:\n> 1, 促进参与项目的程序员的自身的提高。水平较低的学习新东西，水平较高的把思路说出来整理思路。\n> 2, 参与项目人员互换位置，使得维护繁杂的文档不再那么重要，一旦有人离开，项目不会受到影响。大家的交流更顺畅，关系更融洽。\n> 3, 提高工作效率。单独工作遇到问题刷网站，而这种方法是交流解决问题。互相监督和激65励。\n\n`3, 随时方便地测试`\n测试应该从开发者开始，从项目一开始就开始。\n\n`4, 尽早发现结构上的问题, 并尽早重构`\n\n`5, 其他`\n\n脚本和版本控制。\n软件开发的素养。\n\n\n# 14. 编程和游戏\n\n技术派在挖空心思模拟出更真实，更绚丽的画面；创意派在为自己构思的游戏中的一个绝妙的主意沾沾自喜。\n而忽略了一些更重要的东西。\n\n## 14.1 操作\n\n任何一个游戏都是玩家和程序之间通过操作设备进行交互产生乐趣。\n\n## 14.2 角色设定\n\n生动的角色，RPG，增加游戏气氛\n\n## 14.3 操作技术\n\n`3D和2D`\n> * 应该由游戏本身的需要决定。\n> * 3D技术问题是通过一些近似算法而不是数学上严格的方案，得到令人满意的效果。\n> * 2D技术怎样控制和管理不断膨胀的图片数量\n\n## 14.4 浅谈网络游戏\n\n`社会性`\n除了传统的游戏它自身的娱乐性之外，还存在一种社会性。\n因为社会性，就更需要在游戏中设计完备的经济体系，追踪货币的流通，实物的交换，弄清游戏社会中的经济是如何运作的。\n\n看似不是程序的事情，但非程序的策划很难去做：\n> * 大规模的数字采集和统计的工作\n> * 大规模所要求的服务器架构，需要减轻数据库负担，减轻服务器压力，必须在设计上针对硬件水平作出精简。只有熟悉软件架构的人才能去做。\n\n`平衡性`\n> * 传统游戏中渡过来的方法，多数是依靠经验而不是数学推算来解决，慢慢的会变得不那么有效果。\n> * 程序员有数学和计算机运算工具的能力，可以完善为平衡而更理论化的工具。\n\n## 14.5 小结\n\n一个好的游戏程序员和策划之间的界限往往很模糊，所以游戏程序员除了编程方面的修养，各个领域的只是都应该有所涉猎，以提高自身的修养。\n\n# 后记\n\n技术问题，固然本源的方法，理论变化不大。但计算机这种偏重工程的实践，一旦实际化到具体上，却有日新月异的变化，想要搞清楚问题，不是朝夕之功，只好借着自己对旧知识的理解去参悟新的知识。\n\n# 致谢\n记得在初中毕业前夕，我曾经萌发过放弃上重点高中乃至上大学的想法。但是，面对盛怒之后，老泪纵横的父亲，第一次看到父亲的眼泪时，我理解了，理解了一个求知欲如此强烈的人却由于时代的错误，甚至连高中都没有机会去读，在繁忙的工作中，熬夜自学考上大学的人，怎能不对自己的儿子在学业上有更高的期望呢。\n","slug":"trip-of-game-notes","published":1,"updated":"2018-01-04T08:47:38.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukusc000qfadro3bk5wch","content":"<p>最近读了云风大大的书, 感谢云风, 对我有所帮助。<br>选读 第1章， 第2章, 3.1, 3.2, 3.3, 3.5.2, 4.4.4, 8.1, 第9章, 13, 14</p>\n<h1 id=\"对我有所启发的points\"><a href=\"#对我有所启发的points\" class=\"headerlink\" title=\"对我有所启发的points\"></a>对我有所启发的points</h1><blockquote>\n<ul>\n<li>写email的建议</li>\n<li>C和C++的关系</li>\n<li>C++的开发经验</li>\n<li>学习C++阅读次序</li>\n<li>template的技巧</li>\n<li><strong>开发的成功和失败的经验</strong></li>\n<li>游戏编程几个反思</li>\n<li>后记中编程实践和思考方法 </li>\n<li>致谢中云风父亲的背景以及教育方法</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"2-算法\"><a href=\"#2-算法\" class=\"headerlink\" title=\"2. 算法\"></a>2. 算法</h1><h2 id=\"2-1-程序-算法-数据结构\"><a href=\"#2-1-程序-算法-数据结构\" class=\"headerlink\" title=\"2.1 程序 = 算法+数据结构\"></a>2.1 程序 = 算法+数据结构</h2><p>计算机解决的问题，看成一个需要求解的函数，</p>\n<blockquote>\n<ul>\n<li>算法：将输入转化为输出的方法。</li>\n<li>数据结构: 需要解决问题中的信息用计算机进行的数字描述方法，以及相应的对这些信息的操作。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-1-1-算法\"><a href=\"#2-1-1-算法\" class=\"headerlink\" title=\"2.1.1 算法\"></a>2.1.1 算法</h4><p>时间和空间之间寻求平衡。</p>\n<blockquote>\n<ul>\n<li>空间换时间的做法，非常广泛，即预处理</li>\n<li>时间换空间，不容忽视，即使重复计算。</li>\n</ul>\n</blockquote>\n<p>依赖平台特性:</p>\n<blockquote>\n<ul>\n<li>非并行计算机，不考虑用并行来提速。</li>\n<li>空间允许随机访问，不是纸带机的顺序。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-1-2-数据结构\"><a href=\"#2-1-2-数据结构\" class=\"headerlink\" title=\"2.1.2 数据结构\"></a>2.1.2 数据结构</h4><p>简单定义：对数据的组织方法，还有对数据组织方式的处理方法。<br>C++已经提供了常见的数据结构，为什么还要学？</p>\n<blockquote>\n<ul>\n<li>学蕴含思想</li>\n<li>根据实际情况对数据结构进行改造，更高效。</li>\n</ul>\n</blockquote>\n<h5 id=\"1-线性表\"><a href=\"#1-线性表\" class=\"headerlink\" title=\"1. 线性表\"></a>1. 线性表</h5><pre><code>有限逻辑上的有序数列，有确定的前驱和后驱；\n分为成：数组和链表;\n\n数组:\n</code></pre><h5 id=\"2-堆栈、队列和串\"><a href=\"#2-堆栈、队列和串\" class=\"headerlink\" title=\"2. 堆栈、队列和串\"></a>2. 堆栈、队列和串</h5><h5 id=\"3-树、二叉树及其他\"><a href=\"#3-树、二叉树及其他\" class=\"headerlink\" title=\"3. 树、二叉树及其他\"></a>3. 树、二叉树及其他</h5><p><strong>树：</strong><br>有层次的数据集的组织方式。</p>\n<p>GUI界面，通常用树来组织；<br>游戏中的对象管理，用树来解决管理上的层次问题。</p>\n<p><strong>二叉树:</strong><br>严格来说不算是树。<br>表达式计算，数据压缩，排序查找方面有很多用途。</p>\n<p><strong>四叉树、八叉树：</strong><br>空间状态划分，</p>\n<blockquote>\n<ul>\n<li>四叉树：平面</li>\n<li>八叉树: 空间</li>\n</ul>\n</blockquote>\n<p>空间: 场景空间+ 调色盘算法等（向量空间）</p>\n<p><strong>图：</strong><br>节点没有父子关系，纯粹的点和边的集合。<br>节点和节点之间允许加上一些与它有关的数，称为权(weight)， 带权图称为网络。<br>节点和节点之间可以有方向，也可以无方向。</p>\n<p><strong>图应用于现代网络游戏中，多服务器设计，或者三维游戏中的大场景描述，值得开发者好好研究。</strong></p>\n<p><strong>映射表</strong><br>std::map,STL最复杂的容器。</p>\n<p><strong>禁忌思想，</strong></p>\n<blockquote>\n<ul>\n<li>模拟人的记忆过程，从某点开始，想临近区域扩展解。经过的地方一概进入禁忌状态，为了短期搜索回来，造成循环搜索，会有一个记忆寿命，超过若干步骤后解决禁忌。这个步骤叫做Tabu Length, 禁忌长度。禁忌长度过大会导致计算量增加，过小则会进入循环搜索。</li>\n<li>蚂蚁队伍在附近找最高点。任意选择一个起点，一开始就保持队伍胡乱地向周围爬。蚂蚁队伍遵循一个原则，就是不能回到最近经过的位置。</li>\n</ul>\n</blockquote>\n<p>算法一种思想，自己动手实践，了解这些方法，慢慢地就可以真正运用它到实际中去。不光光要会描述一个问题，以适应不同的算法；还要了解更多的算法会让我们更快解决棘手问题。</p>\n<h4 id=\"2-4-优化\"><a href=\"#2-4-优化\" class=\"headerlink\" title=\"2.4 优化\"></a>2.4 优化</h4><blockquote>\n<ul>\n<li>数学方法的改进</li>\n<li>预运算来节省时间（空间换时间避免重复运算）或是重复运算来节省空间</li>\n<li>简化算法求得近似来取代精确解（或最有解）</li>\n<li>改进数据组织方式，用更少的操作处理更多的数据，甚至避免冗杂数据的处理。</li>\n</ul>\n</blockquote>\n<p>碰到棘手的问题，不要先急于找Google,或者问别人，应该自己思考最好的解决方法。每个人都有自己无数的解决方法，每次独立的思考，都是对思维的一次开阔。</p>\n<p>&lt;<c语言程序设计400例>&gt;</c语言程序设计400例></p>\n<p><strong>C</strong><br>C语言本身是简洁的。语言本身仅仅只是提供了一种用计算机角度实现算法的符号。<br>C语言函数，让问题分而治理它。<br>全局变量，可以让函数之间不通过输入参数来访问一些公有的数据。<br>最让人诟病就是指针的设计。从高级语言的角度来讲，程序员不需要指针。我们只需要有可以指带数据的标识之物。</p>\n<p><strong>BASIC</strong></p>\n<h3 id=\"比较解释语言和C语言的不同\"><a href=\"#比较解释语言和C语言的不同\" class=\"headerlink\" title=\"比较解释语言和C语言的不同\"></a>比较解释语言和C语言的不同</h3><p>解释型语言：</p>\n<blockquote>\n<ol>\n<li>每运行一次，解释器就读一次，对符号进行翻译</li>\n<li>中间状态以严格规定保存起来，在后面的语句需要时被重新加载<br>C语言</li>\n<li>在编码后需要多做一些工作，即他们会被翻译成为机器码，运行时就不需要翻译。</li>\n<li>编译器对代码同类向合并，最后的机器码会很简洁。</li>\n</ol>\n</blockquote>\n<p>逻辑学教育，BASIC，适合理解编程。</p>\n<h1 id=\"3-编程语言\"><a href=\"#3-编程语言\" class=\"headerlink\" title=\"3. 编程语言\"></a>3. 编程语言</h1><h2 id=\"3-3-C\"><a href=\"#3-3-C\" class=\"headerlink\" title=\"3.3 C++\"></a>3.3 C++</h2><h3 id=\"C-的不同理解\"><a href=\"#C-的不同理解\" class=\"headerlink\" title=\"C++的不同理解\"></a>C++的不同理解</h3><p>第一印象可能是为了面向对象的设计，实际上C++是一种支持各种编程范式的语言。它支持面向过程的编程，基于对象的编程，面向对象的编程，以及使用template实现的泛型编程。</p>\n<h3 id=\"C对于C-的优势\"><a href=\"#C对于C-的优势\" class=\"headerlink\" title=\"C对于C++的优势\"></a>C对于C++的优势</h3><p>简洁，而非高效；适合做小内存的嵌入式系统开发。</p>\n<h3 id=\"但大多数游戏平台，C-比C更适合\"><a href=\"#但大多数游戏平台，C-比C更适合\" class=\"headerlink\" title=\"但大多数游戏平台，C++比C更适合\"></a>但大多数游戏平台，C++比C更适合</h3><h2 id=\"3-4-汇编语言\"><a href=\"#3-4-汇编语言\" class=\"headerlink\" title=\"3.4 汇编语言\"></a>3.4 汇编语言</h2><p>合适场合使用汇编，能让程序跑得更快。<br>了解汇编，能让你了解代码最终会以什么形态运行于CPU，对理解高级语言有所帮助，<br>在紧要关头帮忙，程序出现莫名错误，又不能在源码级调整程序。</p>\n<h1 id=\"4-前Windows时代\"><a href=\"#4-前Windows时代\" class=\"headerlink\" title=\"4. 前Windows时代\"></a>4. 前Windows时代</h1><h2 id=\"4-3-保护模式下的开发工具\"><a href=\"#4-3-保护模式下的开发工具\" class=\"headerlink\" title=\"4.3 保护模式下的开发工具\"></a>4.3 保护模式下的开发工具</h2><p>个人主页建立之初，我罗列出了个人兴趣 ：…很多。但是大而全的效果是，我一样都做不好，而且和其他人的个人主页相比没有特色。稍加考虑，立刻砍掉了除了游戏开发之外的所有项目。</p>\n<blockquote>\n<ul>\n<li>翻译allgero文档:自己做了一个辅助翻译的工具;细致了解; 交朋友</li>\n<li><p>写关于游戏编程技术方面的小文，各处转载</p>\n</li>\n<li><p>利用假期，走访网上认识的从事游戏开发的朋友，慢慢踏上了游戏制作的道路。</p>\n</li>\n</ul>\n</blockquote>\n<p>学习新的技术，翻译一本相关的英语著作可以算是捷径。</p>\n<blockquote>\n<ul>\n<li>比囫囵吞枣的读一遍英文原文要有效的多。</li>\n<li>因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。</li>\n<li>即使对此有所了解，翻译后也能更上一层楼。</li>\n<li>英语水平也会提高。</li>\n</ul>\n</blockquote>\n<h2 id=\"4-4-闲话allegro\"><a href=\"#4-4-闲话allegro\" class=\"headerlink\" title=\"4.4 闲话allegro\"></a>4.4 闲话allegro</h2><h3 id=\"4-4-4-几何图形和3D\"><a href=\"#4-4-4-几何图形和3D\" class=\"headerlink\" title=\"4.4.4 几何图形和3D\"></a>4.4.4 几何图形和3D</h3><p>图形引擎提供，可以绘制一些几何图形，点，线，多边形等等，但制作平面游戏这些并不是必须的，因为游戏中的一切，事先都可以用预先制作好的图片代替掉。</p>\n<p>3D游戏，却是基于多边形。通过空间多边形的网络信息，把一些平面的图片，做一些变形，映射到多边形网格上。<br>相关的:</p>\n<blockquote>\n<ul>\n<li>透视映射</li>\n<li>矩阵，三维空间中变换的工具, 自带一套矩阵运算。</li>\n<li>实现了一套定点数的运算该改善游戏中需要的数学运算速度。</li>\n</ul>\n</blockquote>\n<p><strong>1,定点数</strong><br>巧妙的利用定点数，可以避免许多浮点误差问题，是很有价值的。</p>\n<p>浮点数：计算机用一种纯小数加指数的形式表示实数。<br>定点数：利用整数运算来模拟小数的方法，那就是定点数来表示小数。</p>\n<p>高16位，表示整数位；低16位，表示小数部分；实际是60000+倍，小数点的位置是固定的。</p>\n<p>精读在1/6*10^4, 十进制小数点后四位的精度。</p>\n<p>定点数的一些计算技巧和优势：</p>\n<blockquote>\n<ul>\n<li>原本复杂的三角函数计算，可以依照所需要的精度，预先制作好查询表，以空间换取时间。</li>\n<li>角度表示方式不是360和2pi, 而是64表示直角， 256表示圆周角。</li>\n</ul>\n</blockquote>\n<h2 id=\"4-5\"><a href=\"#4-5\" class=\"headerlink\" title=\"4.5\"></a>4.5</h2><p>云风关于写email的建议：</p>\n<blockquote>\n<ul>\n<li>回复收到的每封email, 即使没空写， 也让对方知道自己已读。</li>\n<li>使用纯文本，发送过大附件前请求</li>\n<li>合适的标题，能概括内容；偏题时，修改标题。</li>\n<li>删除尽可能多的引信，尤其是对方的签名，对主题表达无意义。</li>\n<li>合理分段，表达自己意见，别赞同两字多写一点。</li>\n<li>发出之前，读一遍，修改掉错别字和语法错误，核对一次收件人是否正确</li>\n<li>不要随意公开转载私人信件，即使转载也注明出处。</li>\n</ul>\n</blockquote>\n<h1 id=\"8-引擎中的优化\"><a href=\"#8-引擎中的优化\" class=\"headerlink\" title=\"8. 引擎中的优化\"></a>8. 引擎中的优化</h1><p>“风魂”中很多蹩脚的编码方法，不成熟的整体架构、非系统的编码规范和不严谨的接口定义，但对于自己干了这件贻笑大方的事情，自己却不后悔。敢于把自己的无知展现给世人，是一种勇气。</p>\n<p>只要保持真诚谦逊，错误的存在就能得到理解；整体上或许不完善，但还是有后来者，依旧可以从中学到闪光点，避免踏上弯路。</p>\n<h1 id=\"9-C和C\"><a href=\"#9-C和C\" class=\"headerlink\" title=\"9. C和C++\"></a>9. C和C++</h1><h2 id=\"9-1-从C到C\"><a href=\"#9-1-从C到C\" class=\"headerlink\" title=\"9.1 从C到C++\"></a>9.1 从C到C++</h2><p>1, C只提供了CPU本来就提供的操作，把他映射到更容易让人理解和描述的书写形式上。为了让程序员使用，引入了栈上临时变量，和堆上动态变量的概念，而不是直接面向寄存器。</p>\n<p>2, C对大块的数据，使用数据指针来表达。</p>\n<p>3, C一个个函数组织起来，函数之间按层次调用，去处理那些不同结构的数据</p>\n<p>4, C是对汇编语言的一种抽象, 正如汇编语言是对机器底层指令的一个最小幅度的抽象，为了人类方便控制机器。C程序员要做问题描述和机器模型之间的桥梁。</p>\n<p>5, C是容易学的，它非常接近机器模型，而机器模型非常简洁，有条理；有效率，接近机器模型；困难性，离实际描述太远，在问题描述和机器模型之间找到对应关系，会随着问题的复杂性提高而急剧增加。</p>\n<p><code>困难性的说明</code>，<br>高级语言往往改为对问题本身抽象，把问题归为特定的类别，然后，语言本身只解决这些被抽象的问题，来简单编程的难度，但往往<strong>只能针对特定的类型</strong>。</p>\n<p><code>C++面向对象的说明</code></p>\n<blockquote>\n<ul>\n<li>既然保持强大的抽象能力，又保持底层符合机器模型的优势，在设计变得简单的情况下不失效率。</li>\n<li>将对象分为不同的类型，每个对象都是这种对象的实例。类型的设计是有层次的，就好像动物是一种大类型，而哺乳动物和爬行动物都属于动物。</li>\n</ul>\n</blockquote>\n<h2 id=\"9-2-C-vs-C-，-效率至上\"><a href=\"#9-2-C-vs-C-，-效率至上\" class=\"headerlink\" title=\"9.2 C vs C++， 效率至上\"></a>9.2 C vs C++， 效率至上</h2><p><code>C++中混有C语言的好处:</code></p>\n<blockquote>\n<p>1, 更广泛的移植性<br>2, C的思考方式，会让不致于陷入面向对象和泛型编程的泥沼，只是说很容易钻进设计方法的牛角尖<br>3, 良好的C语言接口可能使得模块的使用方法更容易理解，对多人合作和多语言编程是一种好事<br>4, C简洁, 编译速度快</p>\n</blockquote>\n<h2 id=\"9-3-优雅的C\"><a href=\"#9-3-优雅的C\" class=\"headerlink\" title=\"9.3 优雅的C++\"></a>9.3 优雅的C++</h2><p>将C细化，又不增加额外的开销;<br>不对程序员有过多限制。</p>\n<h3 id=\"9-3-1-宏\"><a href=\"#9-3-1-宏\" class=\"headerlink\" title=\"9.3.1 宏\"></a>9.3.1 宏</h3><p><code>宏的作用</code></p>\n<blockquote>\n<p>1, 定义常数<br>2, 代码生成<br>3, 内联代码<br>4, 对编译流程作出选择</p>\n</blockquote>\n<p>1, 定义常数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI 3.1415926f;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">float</span> PI;</span><br></pre></td></tr></table></figure>\n<p>C++会选择inline函数+template定义常数，最终编译器会把它优化成一个常数，而没有对函数调用的消耗。</p>\n<p>经典的如：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(a, b) ((a&lt;b)?(a):(b))</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">const</span> T&amp; <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">const</span> T &amp;a, <span class=\"keyword\">const</span> T &amp;b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a&lt;b ? a:b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-3-2-const修饰以及类型转换\"><a href=\"#9-3-2-const修饰以及类型转换\" class=\"headerlink\" title=\"9.3.2 const修饰以及类型转换\"></a>9.3.2 const修饰以及类型转换</h3><h4 id=\"const修饰\"><a href=\"#const修饰\" class=\"headerlink\" title=\"const修饰\"></a>const修饰</h4><p>const chat<em> 而不是 C 的 char</em></p>\n<p>将函数参数写成const;<br>成员变量修饰成const, 只有在构造的时构建他们;<br>为成员函数增加一个const, 表达这个函数不会修改类的成员变量</p>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><p>C中几乎任何类型都可以任意转换，缘于C汇编的根。<br>C++用static_cast 以模板的语法表达看起来可以互相转换的类型互换</p>\n<p>const和const之间的转换，只能通过const_cast转换。</p>\n<p>严格描述每个对象的const性质，可以帮助在编译期发生错误减少。</p>\n<h3 id=\"9-3-3-隐藏实现\"><a href=\"#9-3-3-隐藏实现\" class=\"headerlink\" title=\"9.3.3 隐藏实现\"></a>9.3.3 隐藏实现</h3><p>好的C++程序会把所有数据都声明成private的，尽量在同一类中暴露过多的public方法，而protected慎用，至少尽量不用在成员数据上。</p>\n<p>作为良好的面向对象设计，继承类很少去扩展基类的功能，这样子作为具体实现，被隐藏于接口后，结构变得干净整洁。</p>\n<h3 id=\"9-3-4-引用而非指针\"><a href=\"#9-3-4-引用而非指针\" class=\"headerlink\" title=\"9.3.4 引用而非指针\"></a>9.3.4 引用而非指针</h3><p>指针是导致资源被遗忘释放的罪魁祸首。</p>\n<blockquote>\n<ul>\n<li>当旧的指针被赋予新值，旧的值消失，如果消失的值是唯一指向某个对象的地址，那么这个对象控制的资源将永远留在内存中，直到进程结束被系统回收。</li>\n</ul>\n</blockquote>\n<p>引用和指针在实现本质上是完全相同的，但引用的语法只能在构造的那一刻被赋值，并永远不能修改。</p>\n<p>C++优雅设计中，会用引用代替成员变量中的指针，而减少实现类的时候不小心犯错误。</p>\n<h3 id=\"9-3-5-命名空间\"><a href=\"#9-3-5-命名空间\" class=\"headerlink\" title=\"9.3.5 命名空间\"></a>9.3.5 命名空间</h3><p>引用外部的名字空间到当前位置。可以防止不同库之间的名字冲突。</p>\n<h2 id=\"9-4-C-的误区\"><a href=\"#9-4-C-的误区\" class=\"headerlink\" title=\"9.4 C++的误区\"></a>9.4 C++的误区</h2><p>自己的一条准则： 尽可能地使用结构最简单的工具来完成任务，直到这个工具不合适。</p>\n<p>举例:</p>\n<blockquote>\n<ul>\n<li>能用C写的程序，不用C++；能用C的原生数组的情况不用std::vector。能用std::vector的情况不要用std::map, 能自己写的代码不用第三方库。</li>\n</ul>\n</blockquote>\n<p>解释：</p>\n<blockquote>\n<ul>\n<li>没有完美的程序，也没有完美的原则。</li>\n<li>不主张写C++的标准库，重写MFC或者广为大众所使用的代码。大多数C++程序员，没到达这个技术理解。</li>\n</ul>\n</blockquote>\n<h3 id=\"9-4-1-类层次过细\"><a href=\"#9-4-1-类层次过细\" class=\"headerlink\" title=\"9.4.1 类层次过细\"></a>9.4.1 类层次过细</h3><p>会造成间接调用引起的损耗。</p>\n<h3 id=\"9-4-2-滥用操作符重载\"><a href=\"#9-4-2-滥用操作符重载\" class=\"headerlink\" title=\"9.4.2 滥用操作符重载\"></a>9.4.2 滥用操作符重载</h3><p>为了让用户写出的类适用于现存的模板，让用户构造的对象和C++原生的类型有相同的表现，操作符重载是有意义的。<br>如果仅仅是让程序看起来紧凑，或者是类使用起来“好玩”，那就是对其的滥用了。</p>\n<h3 id=\"9-4-3-滥用标准容器\"><a href=\"#9-4-3-滥用标准容器\" class=\"headerlink\" title=\"9.4.3 滥用标准容器\"></a>9.4.3 滥用标准容器</h3><p>用std::vector就不想再碰语言中的原生数组，用过std::string, 就不知道 const char* 是为何物，这是许多C++程序员的通病。</p>\n<p><code>std::map可以这样子做，</code><br>如果只是为了创建一张key-value的对应表可供查询，完全可以用<br>key-value对应的关系记录下来，只做一次排序，在检索的时候可以使用二分查找查找，一种快捷又节省内存的方法。</p>\n<h3 id=\"9-4-5-滥用多重继承\"><a href=\"#9-4-5-滥用多重继承\" class=\"headerlink\" title=\"9.4.5 滥用多重继承\"></a>9.4.5 滥用多重继承</h3><p>会造成实现过于复杂，几乎所有的多重继承问题，都可以化为组合方式来解决。</p>\n<h3 id=\"9-4-6-忽视C-高级特性的复杂度\"><a href=\"#9-4-6-忽视C-高级特性的复杂度\" class=\"headerlink\" title=\"9.4.6 忽视C++高级特性的复杂度\"></a>9.4.6 忽视C++高级特性的复杂度</h3><p>如果把两种复杂度高的特性运用于项目中，其复杂度不是两倍，而是平方。</p>\n<h3 id=\"9-4-7-学习C\"><a href=\"#9-4-7-学习C\" class=\"headerlink\" title=\"9.4.7 学习C++\"></a>9.4.7 学习C++</h3><p>我现在无法把自己学会的东西，理解的东西借助文字教给入门者，因为许多的知识需要自己在实践中领悟。过多的细节，太快地展现出来反而会增加学习的复杂度，难以消化。</p>\n<p>因此，需要</p>\n<blockquote>\n<p>1，学<br>2, 用<br>3, 思考<br>2, 回到1</p>\n</blockquote>\n<p>如果期望C++成为自己开发中的利器，应该尽量多用C++做项目，尽量可能地体验更多的设计方法，用心去写程序，而不是单单去实现而已。自己写出的代码，多多思考，对感觉不好的部分重新设计。</p>\n<p>推荐一个阅读次序:</p>\n<blockquote>\n<p>1, 先学会C，只是也是C++子集的部分。<br>2, &lt;<c++编程思想>&gt;<br>3, &lt;<c++ primer=\"\">&gt; 和 &lt;<c++ programing=\"\" language=\"\">&gt;<br>4, C++ 标准文档(1998定制，电子档)，遇到问题不是去查某本教材，而是直接翻阅文档。<br>5, &lt;<c++的发展和演化>&gt;，深入了解C++设计的根源以及C++编译器实现方法入手.<br>6, &lt;&lt;深度探索C++物件模型&gt;&gt;对追求高效的C++程序员尤为受用。</c++的发展和演化></c++></c++></c++编程思想></p>\n</blockquote>\n<p>进阶学习: 需要一定的开发经验才能阅读</p>\n<blockquote>\n<ul>\n<li>&lt;<effective c++=\"\">&gt;, &lt;<more effective=\"\" c++=\"\">&gt;, &lt;<c++沉思录>&gt;</c++沉思录></more></effective></li>\n<li>泛型编程&lt;<stl 源码剖析=\"\">&gt;，有点难，但是花上一定的时间一定有收获。</stl></li>\n<li>&lt;<c++设计新思维------泛型编程与设计模式之应用>&gt;template使用自信，对泛型编程感觉良好，</c++设计新思维------泛型编程与设计模式之应用></li>\n<li>&lt;<c++标准程序库>&gt;想更精通标准库，C++程序员案头必备的参考手册。</c++标准程序库></li>\n<li>&lt;<effective stl=\"\" 中文版=\"\">&gt;， 与前面的effcive系列一样</effective></li>\n</ul>\n</blockquote>\n<h3 id=\"9-5-3-再论动态内存分配\"><a href=\"#9-5-3-再论动态内存分配\" class=\"headerlink\" title=\"9.5.3 再论动态内存分配\"></a>9.5.3 再论动态内存分配</h3><p>//…</p>\n<p>理解动态内存的捷径，自己写一个内存分配器。从一大块给定的内存上，分配出用户提交的内存。</p>\n<h3 id=\"9-6-template\"><a href=\"#9-6-template\" class=\"headerlink\" title=\"9.6 template\"></a>9.6 template</h3><p>template最初只为了取代C++语言的宏设计，后来被赋予了实例化的特性，可以针对某些特别的类型做特殊的操作。</p>\n<h4 id=\"9-6-1-封装C-的成员函数的调用\"><a href=\"#9-6-1-封装C-的成员函数的调用\" class=\"headerlink\" title=\"9.6.1 封装C++的成员函数的调用\"></a>9.6.1 封装C++的成员函数的调用</h4><h4 id=\"9-6-4-避免重复代码\"><a href=\"#9-6-4-避免重复代码\" class=\"headerlink\" title=\"9.6.4 避免重复代码\"></a>9.6.4 避免重复代码</h4><p><code>大部分程序错误的根源:</code></p>\n<blockquote>\n<ul>\n<li>在多个地方表达相似的概念，意味着日后改动一个地方，就必须记得改动相似的所有地方。而直接复制这些代码，导致编译器并不知道这些地方的相似性，不能为你提供帮助。而人，随着项目扩大，几乎不可能记住做过多少次这种复制动作。</li>\n</ul>\n</blockquote>\n<p>没有意识到在重复，可以用加强对代码糟糕味道的嗅觉敏感度和提高作为编码者的责任心来达到。</p>\n<p>举个blit()例子</p>\n<h4 id=\"9-6-5-选择最佳的容器\"><a href=\"#9-6-5-选择最佳的容器\" class=\"headerlink\" title=\"9.6.5 选择最佳的容器\"></a>9.6.5 选择最佳的容器</h4><p>很多语言都提供了一种未定义类型的变量，可以用来保存各种不同类型的变量。而C++没有提供这样的类型，但是可以用template来模拟一个，也就是设计一个容器存放不同类型的对象。</p>\n<p>对于一个容器到底是保存</p>\n<blockquote>\n<ul>\n<li>对象指针</li>\n<li><p>对象值</p>\n</li>\n<li><p>对于体积较大的对象，保存指针, 复制很快</p>\n</li>\n<li>对于体积较小的对象，保存对象值, 减少间接；减少指针空间的占用</li>\n</ul>\n</blockquote>\n<p>可以利用模板在编译期间由编译器自动进行；</p>\n<h4 id=\"9-6-5-延迟计算\"><a href=\"#9-6-5-延迟计算\" class=\"headerlink\" title=\"9.6.5 延迟计算\"></a>9.6.5 延迟计算</h4><p>由于涉及到了关于重载运算符的内容，暂且通读。大概是讲，可以自定义一种运算方式，但是又要对这种运算方式进行优化，所以需要模板的帮助，在编译期就对他进行不同函数的选择。</p>\n<h4 id=\"9-6-7-编译时的计算游戏（未完成）\"><a href=\"#9-6-7-编译时的计算游戏（未完成）\" class=\"headerlink\" title=\"9.6.7 编译时的计算游戏（未完成）\"></a>9.6.7 编译时的计算游戏（未完成）</h4><p>三个数排序<br>+</p>\n<h3 id=\"9-7-小结\"><a href=\"#9-7-小结\" class=\"headerlink\" title=\"9.7 小结\"></a>9.7 小结</h3><p>早犯一天错误，就可以早一天改正错误。</p>\n<h1 id=\"13-开发方法\"><a href=\"#13-开发方法\" class=\"headerlink\" title=\"13. 开发方法\"></a>13. 开发方法</h1><h2 id=\"13-1-失败的经验\"><a href=\"#13-1-失败的经验\" class=\"headerlink\" title=\"13.1 失败的经验\"></a>13.1 失败的经验</h2><blockquote>\n<p>1, 过多的工作压力压到一个人身上。<br>2, 过分的弹性工作制<br>3, 没完没了的变化和返工<br>4, 没有及时的测试<br>5, 项目的主导严重偏向了某一职位上</p>\n</blockquote>\n<p><code>1, 过多的工作压力压到一个人身上。</code><br>迫于压力，无法学习新的东西，使用好方法解决问题。独揽大局，只能解决眼前碰到的bug, 耦合度太高。</p>\n<p><code>2, 过分的弹性工作制</code><br>兴奋时效率高，停下来几天没有进展也可能发生。到了项目后期，bug重重，受到挫折之后，失去新鲜感，假借弹性工作制之名，导致怠工拖垮项目。放弃的时候，并非没有压力，可能只是不知道下一步该怎么做，或是问题太多，无法入手，项目已经失控。</p>\n<p><code>3, 没完没了的变化和返工</code><br>想法太多，什么都想加入进来，导致最后漏洞很多。</p>\n<p><code>&gt; 4, 没有及时的测试</code><br>很少有严格的测试，而是把错误积累。 </p>\n<p><code>5, 项目的主导严重偏向了某一职位上</code><br>程序员，策划，美术，盲目的跟从和固执的坚持自己都可能会影响整个项目.</p>\n<h2 id=\"13-2-成功的经验\"><a href=\"#13-2-成功的经验\" class=\"headerlink\" title=\"13.2 成功的经验\"></a>13.2 成功的经验</h2><blockquote>\n<p>1, 引擎和实现的分离<br>2, 结对编程（XP 极限编程）<br>3, 随时方便地测试<br>4, 尽早发现结构上的问题, 并尽早重构<br>5, 其他</p>\n</blockquote>\n<p><code>1, 引擎和实现的分离</code><br>早期的程序员都是研究图形显示的技术开始的，总想表达更绚丽的图案，游戏程序变成了代码的集合。<br>许多程序员都是模块见耦合度过高，对于软件的整体稳定性不利。<br>和图形图像打交道的人，整个团队一个人就够了，他不需要去管任何的游戏的逻辑。</p>\n<p>其他还包括，图像处理模块，声音，网络，时钟，文件读写，windows窗口控制，需要和操作系统直接打交道的东西，不管多简单都应该分离。</p>\n<p><code>2, 结对编程</code><br>找个水平差的不太远的程序员和自己配成一对，只有一台计算机，大家选一个人坐在键盘前，另外一个人口述。两个人需要不断的交流，频率不应该低于一分钟一次。整个设计思想是由后面只动口不动手的人主导，而由键盘操作的人实现。由于人的思维速度是快于键盘输入的速度的，那么观看的人有空闲的时间可以用来思考，很容易看出代码和结构的问题。</p>\n<p>潜在问题的代码，在XP极限编程中，被称做代码的<strong>坏味道</strong>。</p>\n<p>好处:</p>\n<blockquote>\n<p>1, 促进参与项目的程序员的自身的提高。水平较低的学习新东西，水平较高的把思路说出来整理思路。<br>2, 参与项目人员互换位置，使得维护繁杂的文档不再那么重要，一旦有人离开，项目不会受到影响。大家的交流更顺畅，关系更融洽。<br>3, 提高工作效率。单独工作遇到问题刷网站，而这种方法是交流解决问题。互相监督和激65励。</p>\n</blockquote>\n<p><code>3, 随时方便地测试</code><br>测试应该从开发者开始，从项目一开始就开始。</p>\n<p><code>4, 尽早发现结构上的问题, 并尽早重构</code></p>\n<p><code>5, 其他</code></p>\n<p>脚本和版本控制。<br>软件开发的素养。</p>\n<h1 id=\"14-编程和游戏\"><a href=\"#14-编程和游戏\" class=\"headerlink\" title=\"14. 编程和游戏\"></a>14. 编程和游戏</h1><p>技术派在挖空心思模拟出更真实，更绚丽的画面；创意派在为自己构思的游戏中的一个绝妙的主意沾沾自喜。<br>而忽略了一些更重要的东西。</p>\n<h2 id=\"14-1-操作\"><a href=\"#14-1-操作\" class=\"headerlink\" title=\"14.1 操作\"></a>14.1 操作</h2><p>任何一个游戏都是玩家和程序之间通过操作设备进行交互产生乐趣。</p>\n<h2 id=\"14-2-角色设定\"><a href=\"#14-2-角色设定\" class=\"headerlink\" title=\"14.2 角色设定\"></a>14.2 角色设定</h2><p>生动的角色，RPG，增加游戏气氛</p>\n<h2 id=\"14-3-操作技术\"><a href=\"#14-3-操作技术\" class=\"headerlink\" title=\"14.3 操作技术\"></a>14.3 操作技术</h2><p><code>3D和2D</code></p>\n<blockquote>\n<ul>\n<li>应该由游戏本身的需要决定。</li>\n<li>3D技术问题是通过一些近似算法而不是数学上严格的方案，得到令人满意的效果。</li>\n<li>2D技术怎样控制和管理不断膨胀的图片数量</li>\n</ul>\n</blockquote>\n<h2 id=\"14-4-浅谈网络游戏\"><a href=\"#14-4-浅谈网络游戏\" class=\"headerlink\" title=\"14.4 浅谈网络游戏\"></a>14.4 浅谈网络游戏</h2><p><code>社会性</code><br>除了传统的游戏它自身的娱乐性之外，还存在一种社会性。<br>因为社会性，就更需要在游戏中设计完备的经济体系，追踪货币的流通，实物的交换，弄清游戏社会中的经济是如何运作的。</p>\n<p>看似不是程序的事情，但非程序的策划很难去做：</p>\n<blockquote>\n<ul>\n<li>大规模的数字采集和统计的工作</li>\n<li>大规模所要求的服务器架构，需要减轻数据库负担，减轻服务器压力，必须在设计上针对硬件水平作出精简。只有熟悉软件架构的人才能去做。</li>\n</ul>\n</blockquote>\n<p><code>平衡性</code></p>\n<blockquote>\n<ul>\n<li>传统游戏中渡过来的方法，多数是依靠经验而不是数学推算来解决，慢慢的会变得不那么有效果。</li>\n<li>程序员有数学和计算机运算工具的能力，可以完善为平衡而更理论化的工具。</li>\n</ul>\n</blockquote>\n<h2 id=\"14-5-小结\"><a href=\"#14-5-小结\" class=\"headerlink\" title=\"14.5 小结\"></a>14.5 小结</h2><p>一个好的游戏程序员和策划之间的界限往往很模糊，所以游戏程序员除了编程方面的修养，各个领域的只是都应该有所涉猎，以提高自身的修养。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>技术问题，固然本源的方法，理论变化不大。但计算机这种偏重工程的实践，一旦实际化到具体上，却有日新月异的变化，想要搞清楚问题，不是朝夕之功，只好借着自己对旧知识的理解去参悟新的知识。</p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>记得在初中毕业前夕，我曾经萌发过放弃上重点高中乃至上大学的想法。但是，面对盛怒之后，老泪纵横的父亲，第一次看到父亲的眼泪时，我理解了，理解了一个求知欲如此强烈的人却由于时代的错误，甚至连高中都没有机会去读，在繁忙的工作中，熬夜自学考上大学的人，怎能不对自己的儿子在学业上有更高的期望呢。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近读了云风大大的书, 感谢云风, 对我有所帮助。<br>选读 第1章， 第2章, 3.1, 3.2, 3.3, 3.5.2, 4.4.4, 8.1, 第9章, 13, 14</p>\n<h1 id=\"对我有所启发的points\"><a href=\"#对我有所启发的points\" class=\"headerlink\" title=\"对我有所启发的points\"></a>对我有所启发的points</h1><blockquote>\n<ul>\n<li>写email的建议</li>\n<li>C和C++的关系</li>\n<li>C++的开发经验</li>\n<li>学习C++阅读次序</li>\n<li>template的技巧</li>\n<li><strong>开发的成功和失败的经验</strong></li>\n<li>游戏编程几个反思</li>\n<li>后记中编程实践和思考方法 </li>\n<li>致谢中云风父亲的背景以及教育方法</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"2-算法\"><a href=\"#2-算法\" class=\"headerlink\" title=\"2. 算法\"></a>2. 算法</h1><h2 id=\"2-1-程序-算法-数据结构\"><a href=\"#2-1-程序-算法-数据结构\" class=\"headerlink\" title=\"2.1 程序 = 算法+数据结构\"></a>2.1 程序 = 算法+数据结构</h2><p>计算机解决的问题，看成一个需要求解的函数，</p>\n<blockquote>\n<ul>\n<li>算法：将输入转化为输出的方法。</li>\n<li>数据结构: 需要解决问题中的信息用计算机进行的数字描述方法，以及相应的对这些信息的操作。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-1-1-算法\"><a href=\"#2-1-1-算法\" class=\"headerlink\" title=\"2.1.1 算法\"></a>2.1.1 算法</h4><p>时间和空间之间寻求平衡。</p>\n<blockquote>\n<ul>\n<li>空间换时间的做法，非常广泛，即预处理</li>\n<li>时间换空间，不容忽视，即使重复计算。</li>\n</ul>\n</blockquote>\n<p>依赖平台特性:</p>\n<blockquote>\n<ul>\n<li>非并行计算机，不考虑用并行来提速。</li>\n<li>空间允许随机访问，不是纸带机的顺序。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-1-2-数据结构\"><a href=\"#2-1-2-数据结构\" class=\"headerlink\" title=\"2.1.2 数据结构\"></a>2.1.2 数据结构</h4><p>简单定义：对数据的组织方法，还有对数据组织方式的处理方法。<br>C++已经提供了常见的数据结构，为什么还要学？</p>\n<blockquote>\n<ul>\n<li>学蕴含思想</li>\n<li>根据实际情况对数据结构进行改造，更高效。</li>\n</ul>\n</blockquote>\n<h5 id=\"1-线性表\"><a href=\"#1-线性表\" class=\"headerlink\" title=\"1. 线性表\"></a>1. 线性表</h5><pre><code>有限逻辑上的有序数列，有确定的前驱和后驱；\n分为成：数组和链表;\n\n数组:\n</code></pre><h5 id=\"2-堆栈、队列和串\"><a href=\"#2-堆栈、队列和串\" class=\"headerlink\" title=\"2. 堆栈、队列和串\"></a>2. 堆栈、队列和串</h5><h5 id=\"3-树、二叉树及其他\"><a href=\"#3-树、二叉树及其他\" class=\"headerlink\" title=\"3. 树、二叉树及其他\"></a>3. 树、二叉树及其他</h5><p><strong>树：</strong><br>有层次的数据集的组织方式。</p>\n<p>GUI界面，通常用树来组织；<br>游戏中的对象管理，用树来解决管理上的层次问题。</p>\n<p><strong>二叉树:</strong><br>严格来说不算是树。<br>表达式计算，数据压缩，排序查找方面有很多用途。</p>\n<p><strong>四叉树、八叉树：</strong><br>空间状态划分，</p>\n<blockquote>\n<ul>\n<li>四叉树：平面</li>\n<li>八叉树: 空间</li>\n</ul>\n</blockquote>\n<p>空间: 场景空间+ 调色盘算法等（向量空间）</p>\n<p><strong>图：</strong><br>节点没有父子关系，纯粹的点和边的集合。<br>节点和节点之间允许加上一些与它有关的数，称为权(weight)， 带权图称为网络。<br>节点和节点之间可以有方向，也可以无方向。</p>\n<p><strong>图应用于现代网络游戏中，多服务器设计，或者三维游戏中的大场景描述，值得开发者好好研究。</strong></p>\n<p><strong>映射表</strong><br>std::map,STL最复杂的容器。</p>\n<p><strong>禁忌思想，</strong></p>\n<blockquote>\n<ul>\n<li>模拟人的记忆过程，从某点开始，想临近区域扩展解。经过的地方一概进入禁忌状态，为了短期搜索回来，造成循环搜索，会有一个记忆寿命，超过若干步骤后解决禁忌。这个步骤叫做Tabu Length, 禁忌长度。禁忌长度过大会导致计算量增加，过小则会进入循环搜索。</li>\n<li>蚂蚁队伍在附近找最高点。任意选择一个起点，一开始就保持队伍胡乱地向周围爬。蚂蚁队伍遵循一个原则，就是不能回到最近经过的位置。</li>\n</ul>\n</blockquote>\n<p>算法一种思想，自己动手实践，了解这些方法，慢慢地就可以真正运用它到实际中去。不光光要会描述一个问题，以适应不同的算法；还要了解更多的算法会让我们更快解决棘手问题。</p>\n<h4 id=\"2-4-优化\"><a href=\"#2-4-优化\" class=\"headerlink\" title=\"2.4 优化\"></a>2.4 优化</h4><blockquote>\n<ul>\n<li>数学方法的改进</li>\n<li>预运算来节省时间（空间换时间避免重复运算）或是重复运算来节省空间</li>\n<li>简化算法求得近似来取代精确解（或最有解）</li>\n<li>改进数据组织方式，用更少的操作处理更多的数据，甚至避免冗杂数据的处理。</li>\n</ul>\n</blockquote>\n<p>碰到棘手的问题，不要先急于找Google,或者问别人，应该自己思考最好的解决方法。每个人都有自己无数的解决方法，每次独立的思考，都是对思维的一次开阔。</p>\n<p>&lt;<c语言程序设计400例>&gt;</c语言程序设计400例></p>\n<p><strong>C</strong><br>C语言本身是简洁的。语言本身仅仅只是提供了一种用计算机角度实现算法的符号。<br>C语言函数，让问题分而治理它。<br>全局变量，可以让函数之间不通过输入参数来访问一些公有的数据。<br>最让人诟病就是指针的设计。从高级语言的角度来讲，程序员不需要指针。我们只需要有可以指带数据的标识之物。</p>\n<p><strong>BASIC</strong></p>\n<h3 id=\"比较解释语言和C语言的不同\"><a href=\"#比较解释语言和C语言的不同\" class=\"headerlink\" title=\"比较解释语言和C语言的不同\"></a>比较解释语言和C语言的不同</h3><p>解释型语言：</p>\n<blockquote>\n<ol>\n<li>每运行一次，解释器就读一次，对符号进行翻译</li>\n<li>中间状态以严格规定保存起来，在后面的语句需要时被重新加载<br>C语言</li>\n<li>在编码后需要多做一些工作，即他们会被翻译成为机器码，运行时就不需要翻译。</li>\n<li>编译器对代码同类向合并，最后的机器码会很简洁。</li>\n</ol>\n</blockquote>\n<p>逻辑学教育，BASIC，适合理解编程。</p>\n<h1 id=\"3-编程语言\"><a href=\"#3-编程语言\" class=\"headerlink\" title=\"3. 编程语言\"></a>3. 编程语言</h1><h2 id=\"3-3-C\"><a href=\"#3-3-C\" class=\"headerlink\" title=\"3.3 C++\"></a>3.3 C++</h2><h3 id=\"C-的不同理解\"><a href=\"#C-的不同理解\" class=\"headerlink\" title=\"C++的不同理解\"></a>C++的不同理解</h3><p>第一印象可能是为了面向对象的设计，实际上C++是一种支持各种编程范式的语言。它支持面向过程的编程，基于对象的编程，面向对象的编程，以及使用template实现的泛型编程。</p>\n<h3 id=\"C对于C-的优势\"><a href=\"#C对于C-的优势\" class=\"headerlink\" title=\"C对于C++的优势\"></a>C对于C++的优势</h3><p>简洁，而非高效；适合做小内存的嵌入式系统开发。</p>\n<h3 id=\"但大多数游戏平台，C-比C更适合\"><a href=\"#但大多数游戏平台，C-比C更适合\" class=\"headerlink\" title=\"但大多数游戏平台，C++比C更适合\"></a>但大多数游戏平台，C++比C更适合</h3><h2 id=\"3-4-汇编语言\"><a href=\"#3-4-汇编语言\" class=\"headerlink\" title=\"3.4 汇编语言\"></a>3.4 汇编语言</h2><p>合适场合使用汇编，能让程序跑得更快。<br>了解汇编，能让你了解代码最终会以什么形态运行于CPU，对理解高级语言有所帮助，<br>在紧要关头帮忙，程序出现莫名错误，又不能在源码级调整程序。</p>\n<h1 id=\"4-前Windows时代\"><a href=\"#4-前Windows时代\" class=\"headerlink\" title=\"4. 前Windows时代\"></a>4. 前Windows时代</h1><h2 id=\"4-3-保护模式下的开发工具\"><a href=\"#4-3-保护模式下的开发工具\" class=\"headerlink\" title=\"4.3 保护模式下的开发工具\"></a>4.3 保护模式下的开发工具</h2><p>个人主页建立之初，我罗列出了个人兴趣 ：…很多。但是大而全的效果是，我一样都做不好，而且和其他人的个人主页相比没有特色。稍加考虑，立刻砍掉了除了游戏开发之外的所有项目。</p>\n<blockquote>\n<ul>\n<li>翻译allgero文档:自己做了一个辅助翻译的工具;细致了解; 交朋友</li>\n<li><p>写关于游戏编程技术方面的小文，各处转载</p>\n</li>\n<li><p>利用假期，走访网上认识的从事游戏开发的朋友，慢慢踏上了游戏制作的道路。</p>\n</li>\n</ul>\n</blockquote>\n<p>学习新的技术，翻译一本相关的英语著作可以算是捷径。</p>\n<blockquote>\n<ul>\n<li>比囫囵吞枣的读一遍英文原文要有效的多。</li>\n<li>因为有责任感，必须用心搞清楚每一个句子的意思，以免错误而误导阅读你的译作的人们。</li>\n<li>即使对此有所了解，翻译后也能更上一层楼。</li>\n<li>英语水平也会提高。</li>\n</ul>\n</blockquote>\n<h2 id=\"4-4-闲话allegro\"><a href=\"#4-4-闲话allegro\" class=\"headerlink\" title=\"4.4 闲话allegro\"></a>4.4 闲话allegro</h2><h3 id=\"4-4-4-几何图形和3D\"><a href=\"#4-4-4-几何图形和3D\" class=\"headerlink\" title=\"4.4.4 几何图形和3D\"></a>4.4.4 几何图形和3D</h3><p>图形引擎提供，可以绘制一些几何图形，点，线，多边形等等，但制作平面游戏这些并不是必须的，因为游戏中的一切，事先都可以用预先制作好的图片代替掉。</p>\n<p>3D游戏，却是基于多边形。通过空间多边形的网络信息，把一些平面的图片，做一些变形，映射到多边形网格上。<br>相关的:</p>\n<blockquote>\n<ul>\n<li>透视映射</li>\n<li>矩阵，三维空间中变换的工具, 自带一套矩阵运算。</li>\n<li>实现了一套定点数的运算该改善游戏中需要的数学运算速度。</li>\n</ul>\n</blockquote>\n<p><strong>1,定点数</strong><br>巧妙的利用定点数，可以避免许多浮点误差问题，是很有价值的。</p>\n<p>浮点数：计算机用一种纯小数加指数的形式表示实数。<br>定点数：利用整数运算来模拟小数的方法，那就是定点数来表示小数。</p>\n<p>高16位，表示整数位；低16位，表示小数部分；实际是60000+倍，小数点的位置是固定的。</p>\n<p>精读在1/6*10^4, 十进制小数点后四位的精度。</p>\n<p>定点数的一些计算技巧和优势：</p>\n<blockquote>\n<ul>\n<li>原本复杂的三角函数计算，可以依照所需要的精度，预先制作好查询表，以空间换取时间。</li>\n<li>角度表示方式不是360和2pi, 而是64表示直角， 256表示圆周角。</li>\n</ul>\n</blockquote>\n<h2 id=\"4-5\"><a href=\"#4-5\" class=\"headerlink\" title=\"4.5\"></a>4.5</h2><p>云风关于写email的建议：</p>\n<blockquote>\n<ul>\n<li>回复收到的每封email, 即使没空写， 也让对方知道自己已读。</li>\n<li>使用纯文本，发送过大附件前请求</li>\n<li>合适的标题，能概括内容；偏题时，修改标题。</li>\n<li>删除尽可能多的引信，尤其是对方的签名，对主题表达无意义。</li>\n<li>合理分段，表达自己意见，别赞同两字多写一点。</li>\n<li>发出之前，读一遍，修改掉错别字和语法错误，核对一次收件人是否正确</li>\n<li>不要随意公开转载私人信件，即使转载也注明出处。</li>\n</ul>\n</blockquote>\n<h1 id=\"8-引擎中的优化\"><a href=\"#8-引擎中的优化\" class=\"headerlink\" title=\"8. 引擎中的优化\"></a>8. 引擎中的优化</h1><p>“风魂”中很多蹩脚的编码方法，不成熟的整体架构、非系统的编码规范和不严谨的接口定义，但对于自己干了这件贻笑大方的事情，自己却不后悔。敢于把自己的无知展现给世人，是一种勇气。</p>\n<p>只要保持真诚谦逊，错误的存在就能得到理解；整体上或许不完善，但还是有后来者，依旧可以从中学到闪光点，避免踏上弯路。</p>\n<h1 id=\"9-C和C\"><a href=\"#9-C和C\" class=\"headerlink\" title=\"9. C和C++\"></a>9. C和C++</h1><h2 id=\"9-1-从C到C\"><a href=\"#9-1-从C到C\" class=\"headerlink\" title=\"9.1 从C到C++\"></a>9.1 从C到C++</h2><p>1, C只提供了CPU本来就提供的操作，把他映射到更容易让人理解和描述的书写形式上。为了让程序员使用，引入了栈上临时变量，和堆上动态变量的概念，而不是直接面向寄存器。</p>\n<p>2, C对大块的数据，使用数据指针来表达。</p>\n<p>3, C一个个函数组织起来，函数之间按层次调用，去处理那些不同结构的数据</p>\n<p>4, C是对汇编语言的一种抽象, 正如汇编语言是对机器底层指令的一个最小幅度的抽象，为了人类方便控制机器。C程序员要做问题描述和机器模型之间的桥梁。</p>\n<p>5, C是容易学的，它非常接近机器模型，而机器模型非常简洁，有条理；有效率，接近机器模型；困难性，离实际描述太远，在问题描述和机器模型之间找到对应关系，会随着问题的复杂性提高而急剧增加。</p>\n<p><code>困难性的说明</code>，<br>高级语言往往改为对问题本身抽象，把问题归为特定的类别，然后，语言本身只解决这些被抽象的问题，来简单编程的难度，但往往<strong>只能针对特定的类型</strong>。</p>\n<p><code>C++面向对象的说明</code></p>\n<blockquote>\n<ul>\n<li>既然保持强大的抽象能力，又保持底层符合机器模型的优势，在设计变得简单的情况下不失效率。</li>\n<li>将对象分为不同的类型，每个对象都是这种对象的实例。类型的设计是有层次的，就好像动物是一种大类型，而哺乳动物和爬行动物都属于动物。</li>\n</ul>\n</blockquote>\n<h2 id=\"9-2-C-vs-C-，-效率至上\"><a href=\"#9-2-C-vs-C-，-效率至上\" class=\"headerlink\" title=\"9.2 C vs C++， 效率至上\"></a>9.2 C vs C++， 效率至上</h2><p><code>C++中混有C语言的好处:</code></p>\n<blockquote>\n<p>1, 更广泛的移植性<br>2, C的思考方式，会让不致于陷入面向对象和泛型编程的泥沼，只是说很容易钻进设计方法的牛角尖<br>3, 良好的C语言接口可能使得模块的使用方法更容易理解，对多人合作和多语言编程是一种好事<br>4, C简洁, 编译速度快</p>\n</blockquote>\n<h2 id=\"9-3-优雅的C\"><a href=\"#9-3-优雅的C\" class=\"headerlink\" title=\"9.3 优雅的C++\"></a>9.3 优雅的C++</h2><p>将C细化，又不增加额外的开销;<br>不对程序员有过多限制。</p>\n<h3 id=\"9-3-1-宏\"><a href=\"#9-3-1-宏\" class=\"headerlink\" title=\"9.3.1 宏\"></a>9.3.1 宏</h3><p><code>宏的作用</code></p>\n<blockquote>\n<p>1, 定义常数<br>2, 代码生成<br>3, 内联代码<br>4, 对编译流程作出选择</p>\n</blockquote>\n<p>1, 定义常数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI 3.1415926f;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">float</span> PI;</span><br></pre></td></tr></table></figure>\n<p>C++会选择inline函数+template定义常数，最终编译器会把它优化成一个常数，而没有对函数调用的消耗。</p>\n<p>经典的如：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(a, b) ((a&lt;b)?(a):(b))</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">const</span> T&amp; <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">const</span> T &amp;a, <span class=\"keyword\">const</span> T &amp;b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a&lt;b ? a:b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-3-2-const修饰以及类型转换\"><a href=\"#9-3-2-const修饰以及类型转换\" class=\"headerlink\" title=\"9.3.2 const修饰以及类型转换\"></a>9.3.2 const修饰以及类型转换</h3><h4 id=\"const修饰\"><a href=\"#const修饰\" class=\"headerlink\" title=\"const修饰\"></a>const修饰</h4><p>const chat<em> 而不是 C 的 char</em></p>\n<p>将函数参数写成const;<br>成员变量修饰成const, 只有在构造的时构建他们;<br>为成员函数增加一个const, 表达这个函数不会修改类的成员变量</p>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><p>C中几乎任何类型都可以任意转换，缘于C汇编的根。<br>C++用static_cast 以模板的语法表达看起来可以互相转换的类型互换</p>\n<p>const和const之间的转换，只能通过const_cast转换。</p>\n<p>严格描述每个对象的const性质，可以帮助在编译期发生错误减少。</p>\n<h3 id=\"9-3-3-隐藏实现\"><a href=\"#9-3-3-隐藏实现\" class=\"headerlink\" title=\"9.3.3 隐藏实现\"></a>9.3.3 隐藏实现</h3><p>好的C++程序会把所有数据都声明成private的，尽量在同一类中暴露过多的public方法，而protected慎用，至少尽量不用在成员数据上。</p>\n<p>作为良好的面向对象设计，继承类很少去扩展基类的功能，这样子作为具体实现，被隐藏于接口后，结构变得干净整洁。</p>\n<h3 id=\"9-3-4-引用而非指针\"><a href=\"#9-3-4-引用而非指针\" class=\"headerlink\" title=\"9.3.4 引用而非指针\"></a>9.3.4 引用而非指针</h3><p>指针是导致资源被遗忘释放的罪魁祸首。</p>\n<blockquote>\n<ul>\n<li>当旧的指针被赋予新值，旧的值消失，如果消失的值是唯一指向某个对象的地址，那么这个对象控制的资源将永远留在内存中，直到进程结束被系统回收。</li>\n</ul>\n</blockquote>\n<p>引用和指针在实现本质上是完全相同的，但引用的语法只能在构造的那一刻被赋值，并永远不能修改。</p>\n<p>C++优雅设计中，会用引用代替成员变量中的指针，而减少实现类的时候不小心犯错误。</p>\n<h3 id=\"9-3-5-命名空间\"><a href=\"#9-3-5-命名空间\" class=\"headerlink\" title=\"9.3.5 命名空间\"></a>9.3.5 命名空间</h3><p>引用外部的名字空间到当前位置。可以防止不同库之间的名字冲突。</p>\n<h2 id=\"9-4-C-的误区\"><a href=\"#9-4-C-的误区\" class=\"headerlink\" title=\"9.4 C++的误区\"></a>9.4 C++的误区</h2><p>自己的一条准则： 尽可能地使用结构最简单的工具来完成任务，直到这个工具不合适。</p>\n<p>举例:</p>\n<blockquote>\n<ul>\n<li>能用C写的程序，不用C++；能用C的原生数组的情况不用std::vector。能用std::vector的情况不要用std::map, 能自己写的代码不用第三方库。</li>\n</ul>\n</blockquote>\n<p>解释：</p>\n<blockquote>\n<ul>\n<li>没有完美的程序，也没有完美的原则。</li>\n<li>不主张写C++的标准库，重写MFC或者广为大众所使用的代码。大多数C++程序员，没到达这个技术理解。</li>\n</ul>\n</blockquote>\n<h3 id=\"9-4-1-类层次过细\"><a href=\"#9-4-1-类层次过细\" class=\"headerlink\" title=\"9.4.1 类层次过细\"></a>9.4.1 类层次过细</h3><p>会造成间接调用引起的损耗。</p>\n<h3 id=\"9-4-2-滥用操作符重载\"><a href=\"#9-4-2-滥用操作符重载\" class=\"headerlink\" title=\"9.4.2 滥用操作符重载\"></a>9.4.2 滥用操作符重载</h3><p>为了让用户写出的类适用于现存的模板，让用户构造的对象和C++原生的类型有相同的表现，操作符重载是有意义的。<br>如果仅仅是让程序看起来紧凑，或者是类使用起来“好玩”，那就是对其的滥用了。</p>\n<h3 id=\"9-4-3-滥用标准容器\"><a href=\"#9-4-3-滥用标准容器\" class=\"headerlink\" title=\"9.4.3 滥用标准容器\"></a>9.4.3 滥用标准容器</h3><p>用std::vector就不想再碰语言中的原生数组，用过std::string, 就不知道 const char* 是为何物，这是许多C++程序员的通病。</p>\n<p><code>std::map可以这样子做，</code><br>如果只是为了创建一张key-value的对应表可供查询，完全可以用<br>key-value对应的关系记录下来，只做一次排序，在检索的时候可以使用二分查找查找，一种快捷又节省内存的方法。</p>\n<h3 id=\"9-4-5-滥用多重继承\"><a href=\"#9-4-5-滥用多重继承\" class=\"headerlink\" title=\"9.4.5 滥用多重继承\"></a>9.4.5 滥用多重继承</h3><p>会造成实现过于复杂，几乎所有的多重继承问题，都可以化为组合方式来解决。</p>\n<h3 id=\"9-4-6-忽视C-高级特性的复杂度\"><a href=\"#9-4-6-忽视C-高级特性的复杂度\" class=\"headerlink\" title=\"9.4.6 忽视C++高级特性的复杂度\"></a>9.4.6 忽视C++高级特性的复杂度</h3><p>如果把两种复杂度高的特性运用于项目中，其复杂度不是两倍，而是平方。</p>\n<h3 id=\"9-4-7-学习C\"><a href=\"#9-4-7-学习C\" class=\"headerlink\" title=\"9.4.7 学习C++\"></a>9.4.7 学习C++</h3><p>我现在无法把自己学会的东西，理解的东西借助文字教给入门者，因为许多的知识需要自己在实践中领悟。过多的细节，太快地展现出来反而会增加学习的复杂度，难以消化。</p>\n<p>因此，需要</p>\n<blockquote>\n<p>1，学<br>2, 用<br>3, 思考<br>2, 回到1</p>\n</blockquote>\n<p>如果期望C++成为自己开发中的利器，应该尽量多用C++做项目，尽量可能地体验更多的设计方法，用心去写程序，而不是单单去实现而已。自己写出的代码，多多思考，对感觉不好的部分重新设计。</p>\n<p>推荐一个阅读次序:</p>\n<blockquote>\n<p>1, 先学会C，只是也是C++子集的部分。<br>2, &lt;<c++编程思想>&gt;<br>3, &lt;<c++ primer=\"\">&gt; 和 &lt;<c++ programing=\"\" language=\"\">&gt;<br>4, C++ 标准文档(1998定制，电子档)，遇到问题不是去查某本教材，而是直接翻阅文档。<br>5, &lt;<c++的发展和演化>&gt;，深入了解C++设计的根源以及C++编译器实现方法入手.<br>6, &lt;&lt;深度探索C++物件模型&gt;&gt;对追求高效的C++程序员尤为受用。</c++的发展和演化></c++></c++></c++编程思想></p>\n</blockquote>\n<p>进阶学习: 需要一定的开发经验才能阅读</p>\n<blockquote>\n<ul>\n<li>&lt;<effective c++=\"\">&gt;, &lt;<more effective=\"\" c++=\"\">&gt;, &lt;<c++沉思录>&gt;</c++沉思录></more></effective></li>\n<li>泛型编程&lt;<stl 源码剖析=\"\">&gt;，有点难，但是花上一定的时间一定有收获。</stl></li>\n<li>&lt;<c++设计新思维------泛型编程与设计模式之应用>&gt;template使用自信，对泛型编程感觉良好，</c++设计新思维------泛型编程与设计模式之应用></li>\n<li>&lt;<c++标准程序库>&gt;想更精通标准库，C++程序员案头必备的参考手册。</c++标准程序库></li>\n<li>&lt;<effective stl=\"\" 中文版=\"\">&gt;， 与前面的effcive系列一样</effective></li>\n</ul>\n</blockquote>\n<h3 id=\"9-5-3-再论动态内存分配\"><a href=\"#9-5-3-再论动态内存分配\" class=\"headerlink\" title=\"9.5.3 再论动态内存分配\"></a>9.5.3 再论动态内存分配</h3><p>//…</p>\n<p>理解动态内存的捷径，自己写一个内存分配器。从一大块给定的内存上，分配出用户提交的内存。</p>\n<h3 id=\"9-6-template\"><a href=\"#9-6-template\" class=\"headerlink\" title=\"9.6 template\"></a>9.6 template</h3><p>template最初只为了取代C++语言的宏设计，后来被赋予了实例化的特性，可以针对某些特别的类型做特殊的操作。</p>\n<h4 id=\"9-6-1-封装C-的成员函数的调用\"><a href=\"#9-6-1-封装C-的成员函数的调用\" class=\"headerlink\" title=\"9.6.1 封装C++的成员函数的调用\"></a>9.6.1 封装C++的成员函数的调用</h4><h4 id=\"9-6-4-避免重复代码\"><a href=\"#9-6-4-避免重复代码\" class=\"headerlink\" title=\"9.6.4 避免重复代码\"></a>9.6.4 避免重复代码</h4><p><code>大部分程序错误的根源:</code></p>\n<blockquote>\n<ul>\n<li>在多个地方表达相似的概念，意味着日后改动一个地方，就必须记得改动相似的所有地方。而直接复制这些代码，导致编译器并不知道这些地方的相似性，不能为你提供帮助。而人，随着项目扩大，几乎不可能记住做过多少次这种复制动作。</li>\n</ul>\n</blockquote>\n<p>没有意识到在重复，可以用加强对代码糟糕味道的嗅觉敏感度和提高作为编码者的责任心来达到。</p>\n<p>举个blit()例子</p>\n<h4 id=\"9-6-5-选择最佳的容器\"><a href=\"#9-6-5-选择最佳的容器\" class=\"headerlink\" title=\"9.6.5 选择最佳的容器\"></a>9.6.5 选择最佳的容器</h4><p>很多语言都提供了一种未定义类型的变量，可以用来保存各种不同类型的变量。而C++没有提供这样的类型，但是可以用template来模拟一个，也就是设计一个容器存放不同类型的对象。</p>\n<p>对于一个容器到底是保存</p>\n<blockquote>\n<ul>\n<li>对象指针</li>\n<li><p>对象值</p>\n</li>\n<li><p>对于体积较大的对象，保存指针, 复制很快</p>\n</li>\n<li>对于体积较小的对象，保存对象值, 减少间接；减少指针空间的占用</li>\n</ul>\n</blockquote>\n<p>可以利用模板在编译期间由编译器自动进行；</p>\n<h4 id=\"9-6-5-延迟计算\"><a href=\"#9-6-5-延迟计算\" class=\"headerlink\" title=\"9.6.5 延迟计算\"></a>9.6.5 延迟计算</h4><p>由于涉及到了关于重载运算符的内容，暂且通读。大概是讲，可以自定义一种运算方式，但是又要对这种运算方式进行优化，所以需要模板的帮助，在编译期就对他进行不同函数的选择。</p>\n<h4 id=\"9-6-7-编译时的计算游戏（未完成）\"><a href=\"#9-6-7-编译时的计算游戏（未完成）\" class=\"headerlink\" title=\"9.6.7 编译时的计算游戏（未完成）\"></a>9.6.7 编译时的计算游戏（未完成）</h4><p>三个数排序<br>+</p>\n<h3 id=\"9-7-小结\"><a href=\"#9-7-小结\" class=\"headerlink\" title=\"9.7 小结\"></a>9.7 小结</h3><p>早犯一天错误，就可以早一天改正错误。</p>\n<h1 id=\"13-开发方法\"><a href=\"#13-开发方法\" class=\"headerlink\" title=\"13. 开发方法\"></a>13. 开发方法</h1><h2 id=\"13-1-失败的经验\"><a href=\"#13-1-失败的经验\" class=\"headerlink\" title=\"13.1 失败的经验\"></a>13.1 失败的经验</h2><blockquote>\n<p>1, 过多的工作压力压到一个人身上。<br>2, 过分的弹性工作制<br>3, 没完没了的变化和返工<br>4, 没有及时的测试<br>5, 项目的主导严重偏向了某一职位上</p>\n</blockquote>\n<p><code>1, 过多的工作压力压到一个人身上。</code><br>迫于压力，无法学习新的东西，使用好方法解决问题。独揽大局，只能解决眼前碰到的bug, 耦合度太高。</p>\n<p><code>2, 过分的弹性工作制</code><br>兴奋时效率高，停下来几天没有进展也可能发生。到了项目后期，bug重重，受到挫折之后，失去新鲜感，假借弹性工作制之名，导致怠工拖垮项目。放弃的时候，并非没有压力，可能只是不知道下一步该怎么做，或是问题太多，无法入手，项目已经失控。</p>\n<p><code>3, 没完没了的变化和返工</code><br>想法太多，什么都想加入进来，导致最后漏洞很多。</p>\n<p><code>&gt; 4, 没有及时的测试</code><br>很少有严格的测试，而是把错误积累。 </p>\n<p><code>5, 项目的主导严重偏向了某一职位上</code><br>程序员，策划，美术，盲目的跟从和固执的坚持自己都可能会影响整个项目.</p>\n<h2 id=\"13-2-成功的经验\"><a href=\"#13-2-成功的经验\" class=\"headerlink\" title=\"13.2 成功的经验\"></a>13.2 成功的经验</h2><blockquote>\n<p>1, 引擎和实现的分离<br>2, 结对编程（XP 极限编程）<br>3, 随时方便地测试<br>4, 尽早发现结构上的问题, 并尽早重构<br>5, 其他</p>\n</blockquote>\n<p><code>1, 引擎和实现的分离</code><br>早期的程序员都是研究图形显示的技术开始的，总想表达更绚丽的图案，游戏程序变成了代码的集合。<br>许多程序员都是模块见耦合度过高，对于软件的整体稳定性不利。<br>和图形图像打交道的人，整个团队一个人就够了，他不需要去管任何的游戏的逻辑。</p>\n<p>其他还包括，图像处理模块，声音，网络，时钟，文件读写，windows窗口控制，需要和操作系统直接打交道的东西，不管多简单都应该分离。</p>\n<p><code>2, 结对编程</code><br>找个水平差的不太远的程序员和自己配成一对，只有一台计算机，大家选一个人坐在键盘前，另外一个人口述。两个人需要不断的交流，频率不应该低于一分钟一次。整个设计思想是由后面只动口不动手的人主导，而由键盘操作的人实现。由于人的思维速度是快于键盘输入的速度的，那么观看的人有空闲的时间可以用来思考，很容易看出代码和结构的问题。</p>\n<p>潜在问题的代码，在XP极限编程中，被称做代码的<strong>坏味道</strong>。</p>\n<p>好处:</p>\n<blockquote>\n<p>1, 促进参与项目的程序员的自身的提高。水平较低的学习新东西，水平较高的把思路说出来整理思路。<br>2, 参与项目人员互换位置，使得维护繁杂的文档不再那么重要，一旦有人离开，项目不会受到影响。大家的交流更顺畅，关系更融洽。<br>3, 提高工作效率。单独工作遇到问题刷网站，而这种方法是交流解决问题。互相监督和激65励。</p>\n</blockquote>\n<p><code>3, 随时方便地测试</code><br>测试应该从开发者开始，从项目一开始就开始。</p>\n<p><code>4, 尽早发现结构上的问题, 并尽早重构</code></p>\n<p><code>5, 其他</code></p>\n<p>脚本和版本控制。<br>软件开发的素养。</p>\n<h1 id=\"14-编程和游戏\"><a href=\"#14-编程和游戏\" class=\"headerlink\" title=\"14. 编程和游戏\"></a>14. 编程和游戏</h1><p>技术派在挖空心思模拟出更真实，更绚丽的画面；创意派在为自己构思的游戏中的一个绝妙的主意沾沾自喜。<br>而忽略了一些更重要的东西。</p>\n<h2 id=\"14-1-操作\"><a href=\"#14-1-操作\" class=\"headerlink\" title=\"14.1 操作\"></a>14.1 操作</h2><p>任何一个游戏都是玩家和程序之间通过操作设备进行交互产生乐趣。</p>\n<h2 id=\"14-2-角色设定\"><a href=\"#14-2-角色设定\" class=\"headerlink\" title=\"14.2 角色设定\"></a>14.2 角色设定</h2><p>生动的角色，RPG，增加游戏气氛</p>\n<h2 id=\"14-3-操作技术\"><a href=\"#14-3-操作技术\" class=\"headerlink\" title=\"14.3 操作技术\"></a>14.3 操作技术</h2><p><code>3D和2D</code></p>\n<blockquote>\n<ul>\n<li>应该由游戏本身的需要决定。</li>\n<li>3D技术问题是通过一些近似算法而不是数学上严格的方案，得到令人满意的效果。</li>\n<li>2D技术怎样控制和管理不断膨胀的图片数量</li>\n</ul>\n</blockquote>\n<h2 id=\"14-4-浅谈网络游戏\"><a href=\"#14-4-浅谈网络游戏\" class=\"headerlink\" title=\"14.4 浅谈网络游戏\"></a>14.4 浅谈网络游戏</h2><p><code>社会性</code><br>除了传统的游戏它自身的娱乐性之外，还存在一种社会性。<br>因为社会性，就更需要在游戏中设计完备的经济体系，追踪货币的流通，实物的交换，弄清游戏社会中的经济是如何运作的。</p>\n<p>看似不是程序的事情，但非程序的策划很难去做：</p>\n<blockquote>\n<ul>\n<li>大规模的数字采集和统计的工作</li>\n<li>大规模所要求的服务器架构，需要减轻数据库负担，减轻服务器压力，必须在设计上针对硬件水平作出精简。只有熟悉软件架构的人才能去做。</li>\n</ul>\n</blockquote>\n<p><code>平衡性</code></p>\n<blockquote>\n<ul>\n<li>传统游戏中渡过来的方法，多数是依靠经验而不是数学推算来解决，慢慢的会变得不那么有效果。</li>\n<li>程序员有数学和计算机运算工具的能力，可以完善为平衡而更理论化的工具。</li>\n</ul>\n</blockquote>\n<h2 id=\"14-5-小结\"><a href=\"#14-5-小结\" class=\"headerlink\" title=\"14.5 小结\"></a>14.5 小结</h2><p>一个好的游戏程序员和策划之间的界限往往很模糊，所以游戏程序员除了编程方面的修养，各个领域的只是都应该有所涉猎，以提高自身的修养。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>技术问题，固然本源的方法，理论变化不大。但计算机这种偏重工程的实践，一旦实际化到具体上，却有日新月异的变化，想要搞清楚问题，不是朝夕之功，只好借着自己对旧知识的理解去参悟新的知识。</p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>记得在初中毕业前夕，我曾经萌发过放弃上重点高中乃至上大学的想法。但是，面对盛怒之后，老泪纵横的父亲，第一次看到父亲的眼泪时，我理解了，理解了一个求知欲如此强烈的人却由于时代的错误，甚至连高中都没有机会去读，在繁忙的工作中，熬夜自学考上大学的人，怎能不对自己的儿子在学业上有更高的期望呢。</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-01-B","date":"2018-01-09T16:07:54.000Z","_content":"\n功能：\n算法:\n规范：图灵机复位h的原因。 => 在软件中叫做接口\n\nRAM: Random Access Machine\n共同之处：无限的空间。\n寄存器：\n> * 常数赋值给RAM             \n> * RAM之间直接赋值 R[i] < R[j]\n> * RAM之间间接赋值 R[i] <- R[R[j]]\n> * RAM+-\n> * 判断0跳转      IF R[i] = 0 GOTO l\n> * 判断正跳转             > 0\n> * 跳转\n> * 停止           STOP\n\n概括:\n对计算工具抽象后的简化。\n独立于环境和平台，可评判效率。\n> * 将执行时间，转化为操作次数。T(n) = 算法为求求解规模为n问题的，所需执行次数\n> * 这个次数是清晰的，可度量的。\n==========\n\nRAM实例:Floor\n向下取整除法, 0 <= c, 0 < d\nc%d = max {x | d*c <= c}\n    = max {x | d*x < 1+c}\n\nR[0] = c+1, R[1] = d\n---------------------\n\n0, R[0] <- c                 // int c = c;\n1, R[1] <- d                 // int d = d;\n2, R[2] <- 0                 // int x = 0;\n3, R[3] <- 1                 // int a = 1;\n4, R[0] <- R[0] + R[2]       // c++ \n6, R[0] <- R[0] - R[1]       // c-=d\n7, R[2] <- R[2] + R[3]       // x++\n8, IF R[0] > 0 GOTO 4        // if c > 0 goto 4\n9, R[0] <- R[2] - R[3]       // else x-- and;\n9, STOP                      // return R[0] = x\n\nsrc:\n","source":"_posts/dsacpp/01-B.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-01-B\ndate: 2018-01-10 00:07:54\ntags: 数据结构\n---\n\n功能：\n算法:\n规范：图灵机复位h的原因。 => 在软件中叫做接口\n\nRAM: Random Access Machine\n共同之处：无限的空间。\n寄存器：\n> * 常数赋值给RAM             \n> * RAM之间直接赋值 R[i] < R[j]\n> * RAM之间间接赋值 R[i] <- R[R[j]]\n> * RAM+-\n> * 判断0跳转      IF R[i] = 0 GOTO l\n> * 判断正跳转             > 0\n> * 跳转\n> * 停止           STOP\n\n概括:\n对计算工具抽象后的简化。\n独立于环境和平台，可评判效率。\n> * 将执行时间，转化为操作次数。T(n) = 算法为求求解规模为n问题的，所需执行次数\n> * 这个次数是清晰的，可度量的。\n==========\n\nRAM实例:Floor\n向下取整除法, 0 <= c, 0 < d\nc%d = max {x | d*c <= c}\n    = max {x | d*x < 1+c}\n\nR[0] = c+1, R[1] = d\n---------------------\n\n0, R[0] <- c                 // int c = c;\n1, R[1] <- d                 // int d = d;\n2, R[2] <- 0                 // int x = 0;\n3, R[3] <- 1                 // int a = 1;\n4, R[0] <- R[0] + R[2]       // c++ \n6, R[0] <- R[0] - R[1]       // c-=d\n7, R[2] <- R[2] + R[3]       // x++\n8, IF R[0] > 0 GOTO 4        // if c > 0 goto 4\n9, R[0] <- R[2] - R[3]       // else x-- and;\n9, STOP                      // return R[0] = x\n\nsrc:\n","slug":"dsacpp/01-B","published":1,"updated":"2018-01-09T16:14:56.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv09001qfadr4m54d7hu","content":"<p>功能：<br>算法:<br>规范：图灵机复位h的原因。 =&gt; 在软件中叫做接口</p>\n<p>RAM: Random Access Machine<br>共同之处：无限的空间。<br>寄存器：</p>\n<blockquote>\n<ul>\n<li>常数赋值给RAM             </li>\n<li>RAM之间直接赋值 R[i] &lt; R[j]</li>\n<li>RAM之间间接赋值 R[i] &lt;- R[R[j]]</li>\n<li>RAM+-</li>\n<li>判断0跳转      IF R[i] = 0 GOTO l</li>\n<li>判断正跳转             &gt; 0</li>\n<li>跳转</li>\n<li>停止           STOP</li>\n</ul>\n</blockquote>\n<p>概括:<br>对计算工具抽象后的简化。<br>独立于环境和平台，可评判效率。</p>\n<blockquote>\n<ul>\n<li>将执行时间，转化为操作次数。T(n) = 算法为求求解规模为n问题的，所需执行次数</li>\n<li><h1 id=\"这个次数是清晰的，可度量的。\"><a href=\"#这个次数是清晰的，可度量的。\" class=\"headerlink\" title=\"这个次数是清晰的，可度量的。\"></a>这个次数是清晰的，可度量的。</h1></li>\n</ul>\n</blockquote>\n<p>RAM实例:Floor<br>向下取整除法, 0 &lt;= c, 0 &lt; d<br>c%d = max {x | d<em>c &lt;= c}<br>    = max {x | d</em>x &lt; 1+c}</p>\n<h2 id=\"R-0-c-1-R-1-d\"><a href=\"#R-0-c-1-R-1-d\" class=\"headerlink\" title=\"R[0] = c+1, R[1] = d\"></a>R[0] = c+1, R[1] = d</h2><p>0, R[0] &lt;- c                 // int c = c;<br>1, R[1] &lt;- d                 // int d = d;<br>2, R[2] &lt;- 0                 // int x = 0;<br>3, R[3] &lt;- 1                 // int a = 1;<br>4, R[0] &lt;- R[0] + R[2]       // c++<br>6, R[0] &lt;- R[0] - R[1]       // c-=d<br>7, R[2] &lt;- R[2] + R[3]       // x++<br>8, IF R[0] &gt; 0 GOTO 4        // if c &gt; 0 goto 4<br>9, R[0] &lt;- R[2] - R[3]       // else x– and;<br>9, STOP                      // return R[0] = x</p>\n<p>src:</p>\n","site":{"data":{}},"excerpt":"","more":"<p>功能：<br>算法:<br>规范：图灵机复位h的原因。 =&gt; 在软件中叫做接口</p>\n<p>RAM: Random Access Machine<br>共同之处：无限的空间。<br>寄存器：</p>\n<blockquote>\n<ul>\n<li>常数赋值给RAM             </li>\n<li>RAM之间直接赋值 R[i] &lt; R[j]</li>\n<li>RAM之间间接赋值 R[i] &lt;- R[R[j]]</li>\n<li>RAM+-</li>\n<li>判断0跳转      IF R[i] = 0 GOTO l</li>\n<li>判断正跳转             &gt; 0</li>\n<li>跳转</li>\n<li>停止           STOP</li>\n</ul>\n</blockquote>\n<p>概括:<br>对计算工具抽象后的简化。<br>独立于环境和平台，可评判效率。</p>\n<blockquote>\n<ul>\n<li>将执行时间，转化为操作次数。T(n) = 算法为求求解规模为n问题的，所需执行次数</li>\n<li><h1 id=\"这个次数是清晰的，可度量的。\"><a href=\"#这个次数是清晰的，可度量的。\" class=\"headerlink\" title=\"这个次数是清晰的，可度量的。\"></a>这个次数是清晰的，可度量的。</h1></li>\n</ul>\n</blockquote>\n<p>RAM实例:Floor<br>向下取整除法, 0 &lt;= c, 0 &lt; d<br>c%d = max {x | d<em>c &lt;= c}<br>    = max {x | d</em>x &lt; 1+c}</p>\n<h2 id=\"R-0-c-1-R-1-d\"><a href=\"#R-0-c-1-R-1-d\" class=\"headerlink\" title=\"R[0] = c+1, R[1] = d\"></a>R[0] = c+1, R[1] = d</h2><p>0, R[0] &lt;- c                 // int c = c;<br>1, R[1] &lt;- d                 // int d = d;<br>2, R[2] &lt;- 0                 // int x = 0;<br>3, R[3] &lt;- 1                 // int a = 1;<br>4, R[0] &lt;- R[0] + R[2]       // c++<br>6, R[0] &lt;- R[0] - R[1]       // c-=d<br>7, R[2] &lt;- R[2] + R[3]       // x++<br>8, IF R[0] &gt; 0 GOTO 4        // if c &gt; 0 goto 4<br>9, R[0] &lt;- R[2] - R[3]       // else x– and;<br>9, STOP                      // return R[0] = x</p>\n<p>src:</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-01-C","date":"2018-01-09T16:08:22.000Z","_content":"\n\n渐进分析: 大O记号 \n\n好读书不求甚解。\n\n考察DSA（考察人）:\n> * 长远\n> * 主流,\n\n渐进分析(Asymptotic Analysis) n >> 2, 对于规模为n输入，算法\n  - 需要执行的基本操作数: T(n) = ?\n  -          ..存储单元: S(n) = ?       // 通常不考虑？**教材**\n\n**教材P33**\n> * 空间复杂度不会超过常数规模，纵然是新开辟的，算法所需的空间总量，也不过与基本操作的次数同阶。从这个意义上，时间复杂度是空间复杂度的天然上限。\n> * 但两种情况下会有意义:\n    - 对空间效率也异常在乎(时间复杂度的平凡上界难以令人满意)\n    - 数据的输入规模大。\n\nbig-O()比T(n), f(n)更简洁，但依然反应增长趋势(长远)\n> * 常系数可忽略(主流):O(f(n)) = O(c*f(n))\n> * 低次项可忽略(主流)\n\nO(1)\n常数\n  > * 2 = 2013 = 2013*2013 = O(1)\n  > * 效率: 最高效\n  > * 出现的情况，需要具体分析\n      不含循环，不含分支转向，一定不能有(递归)调用？\n  **教材**\n\nO(logn)\n对数\n  > * 常底数无所谓\n  > * 常数次幂无所谓\n  > * 多项式\n  > * 效率: 接近于常数\n\nO(n^c)\n多项式\n  > * 一般 取最高次\n线性：所有O(n)函数\n从O(n)到O(n^2):编程习题主要覆盖范围\n> 效率: 已经可令人满意。\n\nO(2^n)\n指数\n效率: 算法成本增长极快，通常不可忍受。\nn^x->2^n, 是从有效算法到无效算法的分水岭。\n\n2-Subset\n直觉算法：逐一枚举S的每一个子集，并统计其中元素总和\n定理:2-Subset is NP-complete\n意即:就目前模型而言，不存在在多项式时间内回答此问题的算法。\n     除非，添加条件：分布规律啦, 票的总数啦，\n\n复杂度增长速度表格。\n","source":"_posts/dsacpp/01-C.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-01-C\ndate: 2018-01-10 00:08:22\ntags: 数据结构\n---\n\n\n渐进分析: 大O记号 \n\n好读书不求甚解。\n\n考察DSA（考察人）:\n> * 长远\n> * 主流,\n\n渐进分析(Asymptotic Analysis) n >> 2, 对于规模为n输入，算法\n  - 需要执行的基本操作数: T(n) = ?\n  -          ..存储单元: S(n) = ?       // 通常不考虑？**教材**\n\n**教材P33**\n> * 空间复杂度不会超过常数规模，纵然是新开辟的，算法所需的空间总量，也不过与基本操作的次数同阶。从这个意义上，时间复杂度是空间复杂度的天然上限。\n> * 但两种情况下会有意义:\n    - 对空间效率也异常在乎(时间复杂度的平凡上界难以令人满意)\n    - 数据的输入规模大。\n\nbig-O()比T(n), f(n)更简洁，但依然反应增长趋势(长远)\n> * 常系数可忽略(主流):O(f(n)) = O(c*f(n))\n> * 低次项可忽略(主流)\n\nO(1)\n常数\n  > * 2 = 2013 = 2013*2013 = O(1)\n  > * 效率: 最高效\n  > * 出现的情况，需要具体分析\n      不含循环，不含分支转向，一定不能有(递归)调用？\n  **教材**\n\nO(logn)\n对数\n  > * 常底数无所谓\n  > * 常数次幂无所谓\n  > * 多项式\n  > * 效率: 接近于常数\n\nO(n^c)\n多项式\n  > * 一般 取最高次\n线性：所有O(n)函数\n从O(n)到O(n^2):编程习题主要覆盖范围\n> 效率: 已经可令人满意。\n\nO(2^n)\n指数\n效率: 算法成本增长极快，通常不可忍受。\nn^x->2^n, 是从有效算法到无效算法的分水岭。\n\n2-Subset\n直觉算法：逐一枚举S的每一个子集，并统计其中元素总和\n定理:2-Subset is NP-complete\n意即:就目前模型而言，不存在在多项式时间内回答此问题的算法。\n     除非，添加条件：分布规律啦, 票的总数啦，\n\n复杂度增长速度表格。\n","slug":"dsacpp/01-C","published":1,"updated":"2018-01-09T16:16:23.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv0d001rfadrx8yg1mdz","content":"<p>渐进分析: 大O记号 </p>\n<p>好读书不求甚解。</p>\n<p>考察DSA（考察人）:</p>\n<blockquote>\n<ul>\n<li>长远</li>\n<li>主流,</li>\n</ul>\n</blockquote>\n<p>渐进分析(Asymptotic Analysis) n &gt;&gt; 2, 对于规模为n输入，算法</p>\n<ul>\n<li>需要执行的基本操作数: T(n) = ?</li>\n<li>..存储单元: S(n) = ?       // 通常不考虑？<strong>教材</strong></li>\n</ul>\n<p><strong>教材P33</strong></p>\n<blockquote>\n<ul>\n<li>空间复杂度不会超过常数规模，纵然是新开辟的，算法所需的空间总量，也不过与基本操作的次数同阶。从这个意义上，时间复杂度是空间复杂度的天然上限。</li>\n<li>但两种情况下会有意义:<ul>\n<li>对空间效率也异常在乎(时间复杂度的平凡上界难以令人满意)</li>\n<li>数据的输入规模大。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>big-O()比T(n), f(n)更简洁，但依然反应增长趋势(长远)</p>\n<blockquote>\n<ul>\n<li>常系数可忽略(主流):O(f(n)) = O(c*f(n))</li>\n<li>低次项可忽略(主流)</li>\n</ul>\n</blockquote>\n<p>O(1)<br>常数</p>\n<blockquote>\n<ul>\n<li>2 = 2013 = 2013*2013 = O(1)</li>\n<li>效率: 最高效</li>\n<li>出现的情况，需要具体分析<pre><code>不含循环，不含分支转向，一定不能有(递归)调用？\n</code></pre><strong>教材</strong></li>\n</ul>\n</blockquote>\n<p>O(logn)<br>对数</p>\n<blockquote>\n<ul>\n<li>常底数无所谓</li>\n<li>常数次幂无所谓</li>\n<li>多项式</li>\n<li>效率: 接近于常数</li>\n</ul>\n</blockquote>\n<p>O(n^c)<br>多项式</p>\n<blockquote>\n<ul>\n<li>一般 取最高次<br>线性：所有O(n)函数<br>从O(n)到O(n^2):编程习题主要覆盖范围<br>效率: 已经可令人满意。</li>\n</ul>\n</blockquote>\n<p>O(2^n)<br>指数<br>效率: 算法成本增长极快，通常不可忍受。<br>n^x-&gt;2^n, 是从有效算法到无效算法的分水岭。</p>\n<p>2-Subset<br>直觉算法：逐一枚举S的每一个子集，并统计其中元素总和<br>定理:2-Subset is NP-complete<br>意即:就目前模型而言，不存在在多项式时间内回答此问题的算法。<br>     除非，添加条件：分布规律啦, 票的总数啦，</p>\n<p>复杂度增长速度表格。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>渐进分析: 大O记号 </p>\n<p>好读书不求甚解。</p>\n<p>考察DSA（考察人）:</p>\n<blockquote>\n<ul>\n<li>长远</li>\n<li>主流,</li>\n</ul>\n</blockquote>\n<p>渐进分析(Asymptotic Analysis) n &gt;&gt; 2, 对于规模为n输入，算法</p>\n<ul>\n<li>需要执行的基本操作数: T(n) = ?</li>\n<li>..存储单元: S(n) = ?       // 通常不考虑？<strong>教材</strong></li>\n</ul>\n<p><strong>教材P33</strong></p>\n<blockquote>\n<ul>\n<li>空间复杂度不会超过常数规模，纵然是新开辟的，算法所需的空间总量，也不过与基本操作的次数同阶。从这个意义上，时间复杂度是空间复杂度的天然上限。</li>\n<li>但两种情况下会有意义:<ul>\n<li>对空间效率也异常在乎(时间复杂度的平凡上界难以令人满意)</li>\n<li>数据的输入规模大。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>big-O()比T(n), f(n)更简洁，但依然反应增长趋势(长远)</p>\n<blockquote>\n<ul>\n<li>常系数可忽略(主流):O(f(n)) = O(c*f(n))</li>\n<li>低次项可忽略(主流)</li>\n</ul>\n</blockquote>\n<p>O(1)<br>常数</p>\n<blockquote>\n<ul>\n<li>2 = 2013 = 2013*2013 = O(1)</li>\n<li>效率: 最高效</li>\n<li>出现的情况，需要具体分析<pre><code>不含循环，不含分支转向，一定不能有(递归)调用？\n</code></pre><strong>教材</strong></li>\n</ul>\n</blockquote>\n<p>O(logn)<br>对数</p>\n<blockquote>\n<ul>\n<li>常底数无所谓</li>\n<li>常数次幂无所谓</li>\n<li>多项式</li>\n<li>效率: 接近于常数</li>\n</ul>\n</blockquote>\n<p>O(n^c)<br>多项式</p>\n<blockquote>\n<ul>\n<li>一般 取最高次<br>线性：所有O(n)函数<br>从O(n)到O(n^2):编程习题主要覆盖范围<br>效率: 已经可令人满意。</li>\n</ul>\n</blockquote>\n<p>O(2^n)<br>指数<br>效率: 算法成本增长极快，通常不可忍受。<br>n^x-&gt;2^n, 是从有效算法到无效算法的分水岭。</p>\n<p>2-Subset<br>直觉算法：逐一枚举S的每一个子集，并统计其中元素总和<br>定理:2-Subset is NP-complete<br>意即:就目前模型而言，不存在在多项式时间内回答此问题的算法。<br>     除非，添加条件：分布规律啦, 票的总数啦，</p>\n<p>复杂度增长速度表格。</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-01-F","date":"2018-01-09T16:08:52.000Z","_content":"\n# 动态规划\n\nMake it work  \\\nMake it right - 递归\nMake it fast  - 迭代\n     -- Kent Beck\n\n`动态规划`: 通过递归找出算法本质，并且给出了初步解，再讲其等效成迭代形式\n\n```cpp\nint fib(int n) {\n  return (2 > n) ? n : fib(n-1) + fib(n-2);\n}\n```\n\nwork, right, but not fast.\n\n# 封底估算\n\n\n$^36 = 2^25,  ==> $^43 = 2^30 = (2^10)^3 = 10^9 flo = 1sec\n$^5 = 10,     ==> $^67 = 10^14 flo = 10^5 sec = 1 day\n\n# 递归跟踪\n\n效率低的原因是递归实例被重复调用。\n\n`解决方法A(记忆:memoization)`\n```cpp\nint fib_memoization(int n, int mem_lst[]) {\n  // 将已经计算的结果, 制成表备查\n  if (is_exist(mem_lst[n])) {\n    return mem_lst[n];\n  } else {\n    if (2 > n) {mem_lst[n] = n;} else {\n      mem_lst[n] = fib_memoization(n-1, mem_lst) +\n          fib_memoization(n-2, mem_lst);\n      return mem_lst[n];\n    }\n  }\n}\n```\n\n\n`解决方法`\n上楼梯。\n\n```cpp\n\nint fib_dynamic(int n) {\n  int f = 0, g = 1;          // fib(0) = 0; fib(1) = 1;\n  while (0 < n--) {\n    g = g + f;\n    f = g - f;\n  }\n  return g;\n}\n```\n\n不太能理解, 先放着\n\n# 最长公共子序列\n\n`子序列(Subsequence)`: 有序列中若干字符，按原相对次序构成\n\n`最长公共子序列(Longest common subsequence)`，两个序列公共子序列的最长者\n\n可能有多个，可能有歧义\n\n`实现`\n\n暂时还实现不了\n\n\n## 动态规划\n\n理解了一下，方法上有差异，思想上为自下而上的求解，有那么点在gh中做的时候的思想在里面。\n","source":"_posts/dsacpp/01-F.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-01-F\ndate: 2018-01-10 00:08:52\ntags: [数据结构, 动态规划]\n---\n\n# 动态规划\n\nMake it work  \\\nMake it right - 递归\nMake it fast  - 迭代\n     -- Kent Beck\n\n`动态规划`: 通过递归找出算法本质，并且给出了初步解，再讲其等效成迭代形式\n\n```cpp\nint fib(int n) {\n  return (2 > n) ? n : fib(n-1) + fib(n-2);\n}\n```\n\nwork, right, but not fast.\n\n# 封底估算\n\n\n$^36 = 2^25,  ==> $^43 = 2^30 = (2^10)^3 = 10^9 flo = 1sec\n$^5 = 10,     ==> $^67 = 10^14 flo = 10^5 sec = 1 day\n\n# 递归跟踪\n\n效率低的原因是递归实例被重复调用。\n\n`解决方法A(记忆:memoization)`\n```cpp\nint fib_memoization(int n, int mem_lst[]) {\n  // 将已经计算的结果, 制成表备查\n  if (is_exist(mem_lst[n])) {\n    return mem_lst[n];\n  } else {\n    if (2 > n) {mem_lst[n] = n;} else {\n      mem_lst[n] = fib_memoization(n-1, mem_lst) +\n          fib_memoization(n-2, mem_lst);\n      return mem_lst[n];\n    }\n  }\n}\n```\n\n\n`解决方法`\n上楼梯。\n\n```cpp\n\nint fib_dynamic(int n) {\n  int f = 0, g = 1;          // fib(0) = 0; fib(1) = 1;\n  while (0 < n--) {\n    g = g + f;\n    f = g - f;\n  }\n  return g;\n}\n```\n\n不太能理解, 先放着\n\n# 最长公共子序列\n\n`子序列(Subsequence)`: 有序列中若干字符，按原相对次序构成\n\n`最长公共子序列(Longest common subsequence)`，两个序列公共子序列的最长者\n\n可能有多个，可能有歧义\n\n`实现`\n\n暂时还实现不了\n\n\n## 动态规划\n\n理解了一下，方法上有差异，思想上为自下而上的求解，有那么点在gh中做的时候的思想在里面。\n","slug":"dsacpp/01-F","published":1,"updated":"2018-01-09T16:23:40.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv0g001tfadrlmf5j8fu","content":"<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><p>Make it work  \\<br>Make it right - 递归<br>Make it fast  - 迭代<br>     – Kent Beck</p>\n<p><code>动态规划</code>: 通过递归找出算法本质，并且给出了初步解，再讲其等效成迭代形式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">2</span> &gt; n) ? n : fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>work, right, but not fast.</p>\n<h1 id=\"封底估算\"><a href=\"#封底估算\" class=\"headerlink\" title=\"封底估算\"></a>封底估算</h1><p>$^36 = 2^25,  ==&gt; $^43 = 2^30 = (2^10)^3 = 10^9 flo = 1sec<br>$^5 = 10,     ==&gt; $^67 = 10^14 flo = 10^5 sec = 1 day</p>\n<h1 id=\"递归跟踪\"><a href=\"#递归跟踪\" class=\"headerlink\" title=\"递归跟踪\"></a>递归跟踪</h1><p>效率低的原因是递归实例被重复调用。</p>\n<p><code>解决方法A(记忆:memoization)</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib_memoization</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> mem_lst[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将已经计算的结果, 制成表备查</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_exist(mem_lst[n])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mem_lst[n];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> &gt; n) &#123;mem_lst[n] = n;&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      mem_lst[n] = fib_memoization(n<span class=\"number\">-1</span>, mem_lst) +</span><br><span class=\"line\">          fib_memoization(n<span class=\"number\">-2</span>, mem_lst);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mem_lst[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>解决方法</code><br>上楼梯。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib_dynamic</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> f = <span class=\"number\">0</span>, g = <span class=\"number\">1</span>;          <span class=\"comment\">// fib(0) = 0; fib(1) = 1;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; n--) &#123;</span><br><span class=\"line\">    g = g + f;</span><br><span class=\"line\">    f = g - f;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不太能理解, 先放着</p>\n<h1 id=\"最长公共子序列\"><a href=\"#最长公共子序列\" class=\"headerlink\" title=\"最长公共子序列\"></a>最长公共子序列</h1><p><code>子序列(Subsequence)</code>: 有序列中若干字符，按原相对次序构成</p>\n<p><code>最长公共子序列(Longest common subsequence)</code>，两个序列公共子序列的最长者</p>\n<p>可能有多个，可能有歧义</p>\n<p><code>实现</code></p>\n<p>暂时还实现不了</p>\n<h2 id=\"动态规划-1\"><a href=\"#动态规划-1\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>理解了一下，方法上有差异，思想上为自下而上的求解，有那么点在gh中做的时候的思想在里面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><p>Make it work  \\<br>Make it right - 递归<br>Make it fast  - 迭代<br>     – Kent Beck</p>\n<p><code>动态规划</code>: 通过递归找出算法本质，并且给出了初步解，再讲其等效成迭代形式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">2</span> &gt; n) ? n : fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>work, right, but not fast.</p>\n<h1 id=\"封底估算\"><a href=\"#封底估算\" class=\"headerlink\" title=\"封底估算\"></a>封底估算</h1><p>$^36 = 2^25,  ==&gt; $^43 = 2^30 = (2^10)^3 = 10^9 flo = 1sec<br>$^5 = 10,     ==&gt; $^67 = 10^14 flo = 10^5 sec = 1 day</p>\n<h1 id=\"递归跟踪\"><a href=\"#递归跟踪\" class=\"headerlink\" title=\"递归跟踪\"></a>递归跟踪</h1><p>效率低的原因是递归实例被重复调用。</p>\n<p><code>解决方法A(记忆:memoization)</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib_memoization</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> mem_lst[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将已经计算的结果, 制成表备查</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_exist(mem_lst[n])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mem_lst[n];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> &gt; n) &#123;mem_lst[n] = n;&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      mem_lst[n] = fib_memoization(n<span class=\"number\">-1</span>, mem_lst) +</span><br><span class=\"line\">          fib_memoization(n<span class=\"number\">-2</span>, mem_lst);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mem_lst[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>解决方法</code><br>上楼梯。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib_dynamic</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> f = <span class=\"number\">0</span>, g = <span class=\"number\">1</span>;          <span class=\"comment\">// fib(0) = 0; fib(1) = 1;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; n--) &#123;</span><br><span class=\"line\">    g = g + f;</span><br><span class=\"line\">    f = g - f;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不太能理解, 先放着</p>\n<h1 id=\"最长公共子序列\"><a href=\"#最长公共子序列\" class=\"headerlink\" title=\"最长公共子序列\"></a>最长公共子序列</h1><p><code>子序列(Subsequence)</code>: 有序列中若干字符，按原相对次序构成</p>\n<p><code>最长公共子序列(Longest common subsequence)</code>，两个序列公共子序列的最长者</p>\n<p>可能有多个，可能有歧义</p>\n<p><code>实现</code></p>\n<p>暂时还实现不了</p>\n<h2 id=\"动态规划-1\"><a href=\"#动态规划-1\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>理解了一下，方法上有差异，思想上为自下而上的求解，有那么点在gh中做的时候的思想在里面。</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-01-E","date":"2018-01-09T16:08:41.000Z","_content":"\n\n# 迭代与递归\n\n分而治之：分解成子问题，递归式的求解。\n\n空间复杂度：指不包含算法的输入本身所占的空间之外，所需要的另加的用于计算所必须的空间总量。\n\n# 减而治之\n\n```\n   合                合并\n  ---->    问题   --------\n  ^      /      \\        ^\n  | 缩减/        \\ 平凡   |\n  |\t   /          \\       |\n   -> 子问题     子问题 <---\n   !     !         !    !\n   -------         ------\n     治              治\n\t \n```\n\n\\----例子1-----\n`求n个总数之和`\n\n```cpp\nint sum(int A[], int n) {\n  // A为整数数组, n为问题规模, 返回数组中整数的总和\n  return\n      (n < 1) ?\n      0 : sum(A, n-1) + A[n-1];\n}\n```\n\n**分析:**\n> * 该问题分解为一个缩减问题sum(A, n-1) 和 一个平凡问题A[n-1]\n> * 最后规模小到一定程度时， 缩减问题变为 平凡问题\n> * 将两个问题合并得到结果\n\n**复杂度如何？**\n\n`递归跟踪(recursion trace)`分析 (用于简单的递归)\n- 检查每个<span style=\"color:red\">**递归实例**\n-  累积所需要时间（调用语句本身抹去，计入递归实例）\n- 其总和是算法执行时间\n||          ||\nvv          vv\n`线性递归`：得出上述递归是线性递归，复杂度渐进O(n)\n\n`递推方程`分析 (用于复杂的递归)\n上述例子中:\nT(n) = T(n-1) + O(1)         // recurrence\nT(0) = O(1)                  // base\n\n```\nT(n) - n = T(n-1) - (n-1) = T(n-2) - (n-2) ...\n         = T(2) - 2\n\t\t = T(1) - 1\n\t\t = T(0) - 0 = O(1)\n\nT(n) = O(1) + n = O(n)\n```\n\n\\-------例子2-----------------\n`任给数组A[0,n), 将其前后颠倒`            // 更一般的子区间[lo, hi]\n**统一接口** : void reverse(int * A, int lo, int hi);\n\n`递归版`\n\n规模缩小两个单位。\n\n```cpp\nvoid reverse(int* A, int lo, int hi) {\n  // 输入指向数组A的指针, A中要转置的左区间lo， A中要转置的右区间lo\n  // 无返回值，改变指针A所指向的数组, 使其倒序\n  if (lo < hi) {\n    swap(&(A[lo]), &(A[hi]));\n    if (((hi-lo) == 1) || ((hi - lo) == 0)) return;\n    reverse(A, lo + 1, hi - 1);\n  }\n}\n```\n\n分析时间复杂度：\n\n`递归跟踪(recursion trace)`\n```\nint main();\nreverse(A[n], lo, hi);\nreverse(A[n-2], lo+1, hi-1);\nreverse(A[n-4], lo+2, hi-2);\n...\n\nreverse(A[1], lo+(n-1)/2, hi+(n-1)/2);\nor\nreverse(A[0], lo + n/2, hi+ n/2);\n      (n-1)/2 , n是奇数\n     /                   \nO(1)*                    = O(n)\n     \\n / 2,    n是偶数\n```\n\n`递推方程`\n```\nT(n) = T(n) + O(1);\nT(n) - n = T(n-1) - (n-1)\nT(n) - n = T(2) - 2\n         = T(0) - 0\nT(n) = T(0) + n = O(n)\n```\n<span style=\"color\":blue\">*感觉不怎么正确??*</span>\n\n课后推敲:\n\n`迭代原始版本`\n\n```cpp\nvoid reverse_iterate_original(int* A, int lo, int hi) {\n  // 迭代原始版本\nnext:\n  if (lo < hi)\n  {swap(&A[lo], &A[hi]); lo++; hi--; goto next;}\n}\n```\n\n<span style=\"color:blue\">*使用next作为分支标记,goto跳转，真的能让代码运行，从来没用过*</span>\n\n`迭代精简版`\n```cpp\nvoid reverse_iterate(int* A, int lo, int hi) {\n  // 迭代版本\n  while (lo < hi) swap(&A[lo++], &A[hi--]);\n}\n```\n\n# 分而治之(divide-and-conquer)\n\n分解为多个或两个子问题，得到解后归并。\n\\------二分递归----------\n\n```cpp\nint mid_sum(int A[], int lo, int hi) {\n  // 数组求和 :二分递归\n  if (lo == hi) return A[lo];\n  int mid = (lo + hi) >> 1;\n  return mid_sum(A, lo, mid) + mid_sum(A, mid + 1, hi);\n}\n\t```\n\n<span style=\"color:red\">**注意 mid + 1**</span>\n\n// 分析:\n// 被分解成两个相似问题，mid_sum(n/2)\n// 规模每次缩减一半，最后到达递归基\n// 将多个问题结果合并\n\n分析复杂度:\n\n`递归跟踪(几何归纳)`\n\n以2为倍数的**几何级数**，总和与**末项同阶**。\n\n`递推方程(代数运算)`\n\n两个问题都是n/2\n累加O(1)时间\n递归基O(1)时间返回\n\n递推关系\nT(n) = 2* T(n/2) + O(1)\nT(1) = O(1)\n\n\n..\nT(n) = O(n)\n\n\n\n# Max2: 迭代1\n\n从数组区间A[lo, hi)中找出最大的两个整数A[x1]和A[x2]   // A[x1] > A[x2]\n比较次数要尽可能的少\n\n```cpp\nint max2_three_iters(int A[], int lo, int hi) {   // 1 < n = hi - lo\n  int max1 = 0, max2 = 0;\n  int x1, x2;\n  if (hi < lo) return -1;\n  for (int i = lo; i <= hi; i++)\n    if (max1 < A[i]) {max1 = A[i]; x1 = i;}       // hi-lo-1 = n-1\n\n  if (x1 != lo) {\n    for (int i_lo  = lo; i_lo < x1; i_lo++)\n      if (max2 < A[i_lo]) {max2 = A[i_lo]; x2 = i_lo;} // x1-lo-1\n  }\n  if (x1 != hi) {\n    for (int i_hi = x1+1; i_hi <= hi; i_hi++)\n      if (max2 < A[i_hi]) {max2 = A[i_hi]; x2 = i_hi;} // hi-x1-1\n  }\n  int max_array[2] = {max1, max2};\n  std::cout << \" A[x1] = \" << A[x1] << '\\n'\n            << \" A[x2] = \" << A[x2] << std::endl;\n}\n```\n\n总共比较n-1+n-2 =2n-3 \n\n```cpp\nint max2(int A[], int lo, int hi) {\n  // 遍历一次，改变指针\n  int* x1 = &lo;\n  int lo_next = lo + 1;\n  int* x2 = &lo_next;\n  if (A[*x1] < A[*x2]) {x1 = &lo_next; x2 = &lo;}\n  for (int i = lo + 2; i <= hi; i++) {\n    if (A[*x2] < A[i]) {      // 索引i的对象比较小的值大\n      if (A[*x1] < A[i]) {    // 索引i的对象甚至超过了较大值\n        x2 = &(*x1); x1 = &i;\n        break;\n      }\n      *x2 = i;                // x1指针指向的元素赋值成i\n    }\n  }\n  std::cout << \" A[*x1] \"  << A[*x1] << '\\n'\n            << \" A[*x2] \"  << A[*x2] << std::endl;\n}\n\n```\n\n最好情况: 1 + (n-2)*1 = n-1\n最坏情况: 1+ (n-2) *2 = 2n-3\n\n\n`即使在最坏情况，也更高效的改进算法`\n\n> * 分而治之\n> * 实现退化情况\n\n```cpp\nvoid max2(int A[], int lo, int hi, int & x1, int & x2) {     // [lo, hi)\n  if (lo + 2 == hi) {\n    if (A[lo] < A[lo+1]) {\n      x1 = A[lo+1]; x2 = A[lo];\n    } else {\n      x2 = A[lo+1]; x1 = A[lo];\n    }\n    return;\n  }                         // T(2) = 1\n  if (lo + 3 == hi) {       // lo, lo+1, lo+2, lo+3; 19, 2, 3, -1;\n    x1 = lo, x2 = lo+1;\n    if (A[x1] < A[x2]) {x1 = lo+1; x2 = lo;}\n    for (int i = lo+2; i < hi+1; i++) {\n      if (A[i] > A[x2]) {\n        if (A[i] > A[x1]) {\n          int tmp = x1;\n          x1 = i; x2 = tmp;\n          break;\n        }\n        x2 = i;\n      }\n    }\n    return;\n  }                         // T(3) <= 3\n  int mid = (lo + hi) >> 1;\n  int x1L, x2L; max2(A, lo, mid, x1L, x2L);\n  int x1R, x2R; max2(A, mid+1, hi, x1R, x2R);\n  if (A[x1L] > A[x1R]) {\n    x1 = x1L; x2 = (x2L < x1R) ? x1R:x2L;\n  } else {\n    x1 = x1R; x2 = (x2R < x1L) ? x1L:x2R;\n  }\n} // 1 + 1 = 2\n```\n\n\n最坏情况: T(n) = 2 * T(n/2) + 2 <= 5n/3 -2\n\n`递推方程推导过程:` ? \n\n`最好情况复杂度:` ?\n\n\n# 总结\n\n两种重要算法策略：减而治之，分而治之\n\n两种分析方法：递归跟踪和递推方程\n","source":"_posts/dsacpp/01-E.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-01-E\ndate: 2018-01-10 00:08:41\ntags: 数据结构\n---\n\n\n# 迭代与递归\n\n分而治之：分解成子问题，递归式的求解。\n\n空间复杂度：指不包含算法的输入本身所占的空间之外，所需要的另加的用于计算所必须的空间总量。\n\n# 减而治之\n\n```\n   合                合并\n  ---->    问题   --------\n  ^      /      \\        ^\n  | 缩减/        \\ 平凡   |\n  |\t   /          \\       |\n   -> 子问题     子问题 <---\n   !     !         !    !\n   -------         ------\n     治              治\n\t \n```\n\n\\----例子1-----\n`求n个总数之和`\n\n```cpp\nint sum(int A[], int n) {\n  // A为整数数组, n为问题规模, 返回数组中整数的总和\n  return\n      (n < 1) ?\n      0 : sum(A, n-1) + A[n-1];\n}\n```\n\n**分析:**\n> * 该问题分解为一个缩减问题sum(A, n-1) 和 一个平凡问题A[n-1]\n> * 最后规模小到一定程度时， 缩减问题变为 平凡问题\n> * 将两个问题合并得到结果\n\n**复杂度如何？**\n\n`递归跟踪(recursion trace)`分析 (用于简单的递归)\n- 检查每个<span style=\"color:red\">**递归实例**\n-  累积所需要时间（调用语句本身抹去，计入递归实例）\n- 其总和是算法执行时间\n||          ||\nvv          vv\n`线性递归`：得出上述递归是线性递归，复杂度渐进O(n)\n\n`递推方程`分析 (用于复杂的递归)\n上述例子中:\nT(n) = T(n-1) + O(1)         // recurrence\nT(0) = O(1)                  // base\n\n```\nT(n) - n = T(n-1) - (n-1) = T(n-2) - (n-2) ...\n         = T(2) - 2\n\t\t = T(1) - 1\n\t\t = T(0) - 0 = O(1)\n\nT(n) = O(1) + n = O(n)\n```\n\n\\-------例子2-----------------\n`任给数组A[0,n), 将其前后颠倒`            // 更一般的子区间[lo, hi]\n**统一接口** : void reverse(int * A, int lo, int hi);\n\n`递归版`\n\n规模缩小两个单位。\n\n```cpp\nvoid reverse(int* A, int lo, int hi) {\n  // 输入指向数组A的指针, A中要转置的左区间lo， A中要转置的右区间lo\n  // 无返回值，改变指针A所指向的数组, 使其倒序\n  if (lo < hi) {\n    swap(&(A[lo]), &(A[hi]));\n    if (((hi-lo) == 1) || ((hi - lo) == 0)) return;\n    reverse(A, lo + 1, hi - 1);\n  }\n}\n```\n\n分析时间复杂度：\n\n`递归跟踪(recursion trace)`\n```\nint main();\nreverse(A[n], lo, hi);\nreverse(A[n-2], lo+1, hi-1);\nreverse(A[n-4], lo+2, hi-2);\n...\n\nreverse(A[1], lo+(n-1)/2, hi+(n-1)/2);\nor\nreverse(A[0], lo + n/2, hi+ n/2);\n      (n-1)/2 , n是奇数\n     /                   \nO(1)*                    = O(n)\n     \\n / 2,    n是偶数\n```\n\n`递推方程`\n```\nT(n) = T(n) + O(1);\nT(n) - n = T(n-1) - (n-1)\nT(n) - n = T(2) - 2\n         = T(0) - 0\nT(n) = T(0) + n = O(n)\n```\n<span style=\"color\":blue\">*感觉不怎么正确??*</span>\n\n课后推敲:\n\n`迭代原始版本`\n\n```cpp\nvoid reverse_iterate_original(int* A, int lo, int hi) {\n  // 迭代原始版本\nnext:\n  if (lo < hi)\n  {swap(&A[lo], &A[hi]); lo++; hi--; goto next;}\n}\n```\n\n<span style=\"color:blue\">*使用next作为分支标记,goto跳转，真的能让代码运行，从来没用过*</span>\n\n`迭代精简版`\n```cpp\nvoid reverse_iterate(int* A, int lo, int hi) {\n  // 迭代版本\n  while (lo < hi) swap(&A[lo++], &A[hi--]);\n}\n```\n\n# 分而治之(divide-and-conquer)\n\n分解为多个或两个子问题，得到解后归并。\n\\------二分递归----------\n\n```cpp\nint mid_sum(int A[], int lo, int hi) {\n  // 数组求和 :二分递归\n  if (lo == hi) return A[lo];\n  int mid = (lo + hi) >> 1;\n  return mid_sum(A, lo, mid) + mid_sum(A, mid + 1, hi);\n}\n\t```\n\n<span style=\"color:red\">**注意 mid + 1**</span>\n\n// 分析:\n// 被分解成两个相似问题，mid_sum(n/2)\n// 规模每次缩减一半，最后到达递归基\n// 将多个问题结果合并\n\n分析复杂度:\n\n`递归跟踪(几何归纳)`\n\n以2为倍数的**几何级数**，总和与**末项同阶**。\n\n`递推方程(代数运算)`\n\n两个问题都是n/2\n累加O(1)时间\n递归基O(1)时间返回\n\n递推关系\nT(n) = 2* T(n/2) + O(1)\nT(1) = O(1)\n\n\n..\nT(n) = O(n)\n\n\n\n# Max2: 迭代1\n\n从数组区间A[lo, hi)中找出最大的两个整数A[x1]和A[x2]   // A[x1] > A[x2]\n比较次数要尽可能的少\n\n```cpp\nint max2_three_iters(int A[], int lo, int hi) {   // 1 < n = hi - lo\n  int max1 = 0, max2 = 0;\n  int x1, x2;\n  if (hi < lo) return -1;\n  for (int i = lo; i <= hi; i++)\n    if (max1 < A[i]) {max1 = A[i]; x1 = i;}       // hi-lo-1 = n-1\n\n  if (x1 != lo) {\n    for (int i_lo  = lo; i_lo < x1; i_lo++)\n      if (max2 < A[i_lo]) {max2 = A[i_lo]; x2 = i_lo;} // x1-lo-1\n  }\n  if (x1 != hi) {\n    for (int i_hi = x1+1; i_hi <= hi; i_hi++)\n      if (max2 < A[i_hi]) {max2 = A[i_hi]; x2 = i_hi;} // hi-x1-1\n  }\n  int max_array[2] = {max1, max2};\n  std::cout << \" A[x1] = \" << A[x1] << '\\n'\n            << \" A[x2] = \" << A[x2] << std::endl;\n}\n```\n\n总共比较n-1+n-2 =2n-3 \n\n```cpp\nint max2(int A[], int lo, int hi) {\n  // 遍历一次，改变指针\n  int* x1 = &lo;\n  int lo_next = lo + 1;\n  int* x2 = &lo_next;\n  if (A[*x1] < A[*x2]) {x1 = &lo_next; x2 = &lo;}\n  for (int i = lo + 2; i <= hi; i++) {\n    if (A[*x2] < A[i]) {      // 索引i的对象比较小的值大\n      if (A[*x1] < A[i]) {    // 索引i的对象甚至超过了较大值\n        x2 = &(*x1); x1 = &i;\n        break;\n      }\n      *x2 = i;                // x1指针指向的元素赋值成i\n    }\n  }\n  std::cout << \" A[*x1] \"  << A[*x1] << '\\n'\n            << \" A[*x2] \"  << A[*x2] << std::endl;\n}\n\n```\n\n最好情况: 1 + (n-2)*1 = n-1\n最坏情况: 1+ (n-2) *2 = 2n-3\n\n\n`即使在最坏情况，也更高效的改进算法`\n\n> * 分而治之\n> * 实现退化情况\n\n```cpp\nvoid max2(int A[], int lo, int hi, int & x1, int & x2) {     // [lo, hi)\n  if (lo + 2 == hi) {\n    if (A[lo] < A[lo+1]) {\n      x1 = A[lo+1]; x2 = A[lo];\n    } else {\n      x2 = A[lo+1]; x1 = A[lo];\n    }\n    return;\n  }                         // T(2) = 1\n  if (lo + 3 == hi) {       // lo, lo+1, lo+2, lo+3; 19, 2, 3, -1;\n    x1 = lo, x2 = lo+1;\n    if (A[x1] < A[x2]) {x1 = lo+1; x2 = lo;}\n    for (int i = lo+2; i < hi+1; i++) {\n      if (A[i] > A[x2]) {\n        if (A[i] > A[x1]) {\n          int tmp = x1;\n          x1 = i; x2 = tmp;\n          break;\n        }\n        x2 = i;\n      }\n    }\n    return;\n  }                         // T(3) <= 3\n  int mid = (lo + hi) >> 1;\n  int x1L, x2L; max2(A, lo, mid, x1L, x2L);\n  int x1R, x2R; max2(A, mid+1, hi, x1R, x2R);\n  if (A[x1L] > A[x1R]) {\n    x1 = x1L; x2 = (x2L < x1R) ? x1R:x2L;\n  } else {\n    x1 = x1R; x2 = (x2R < x1L) ? x1L:x2R;\n  }\n} // 1 + 1 = 2\n```\n\n\n最坏情况: T(n) = 2 * T(n/2) + 2 <= 5n/3 -2\n\n`递推方程推导过程:` ? \n\n`最好情况复杂度:` ?\n\n\n# 总结\n\n两种重要算法策略：减而治之，分而治之\n\n两种分析方法：递归跟踪和递推方程\n","slug":"dsacpp/01-E","published":1,"updated":"2018-01-09T16:23:14.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv0i001ufadrcmntc6aj","content":"<h1 id=\"迭代与递归\"><a href=\"#迭代与递归\" class=\"headerlink\" title=\"迭代与递归\"></a>迭代与递归</h1><p>分而治之：分解成子问题，递归式的求解。</p>\n<p>空间复杂度：指不包含算法的输入本身所占的空间之外，所需要的另加的用于计算所必须的空间总量。</p>\n<h1 id=\"减而治之\"><a href=\"#减而治之\" class=\"headerlink\" title=\"减而治之\"></a>减而治之</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 合                合并</span><br><span class=\"line\">----&gt;    问题   --------</span><br><span class=\"line\">^      /      \\        ^</span><br><span class=\"line\">| 缩减/        \\ 平凡   |</span><br><span class=\"line\">|\t   /          \\       |</span><br><span class=\"line\"> -&gt; 子问题     子问题 &lt;---</span><br><span class=\"line\"> !     !         !    !</span><br><span class=\"line\"> -------         ------</span><br><span class=\"line\">   治              治</span><br></pre></td></tr></table></figure>\n<p>-—例子1—–<br><code>求n个总数之和</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A为整数数组, n为问题规模, 返回数组中整数的总和</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">      (n &lt; <span class=\"number\">1</span>) ?</span><br><span class=\"line\">      <span class=\"number\">0</span> : sum(A, n<span class=\"number\">-1</span>) + A[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析:</strong></p>\n<blockquote>\n<ul>\n<li>该问题分解为一个缩减问题sum(A, n-1) 和 一个平凡问题A[n-1]</li>\n<li>最后规模小到一定程度时， 缩减问题变为 平凡问题</li>\n<li>将两个问题合并得到结果</li>\n</ul>\n</blockquote>\n<p><strong>复杂度如何？</strong></p>\n<p><code>递归跟踪(recursion trace)</code>分析 (用于简单的递归)</p>\n<ul>\n<li>检查每个<span style=\"color:red\"><strong>递归实例</strong></span></li>\n<li>累积所需要时间（调用语句本身抹去，计入递归实例）</li>\n<li>其总和是算法执行时间<br>||          ||<br>vv          vv<br><code>线性递归</code>：得出上述递归是线性递归，复杂度渐进O(n)</li>\n</ul>\n<p><code>递推方程</code>分析 (用于复杂的递归)<br>上述例子中:<br>T(n) = T(n-1) + O(1)         // recurrence<br>T(0) = O(1)                  // base</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) - n = T(n-1) - (n-1) = T(n-2) - (n-2) ...</span><br><span class=\"line\">         = T(2) - 2</span><br><span class=\"line\">\t\t = T(1) - 1</span><br><span class=\"line\">\t\t = T(0) - 0 = O(1)</span><br><span class=\"line\"></span><br><span class=\"line\">T(n) = O(1) + n = O(n)</span><br></pre></td></tr></table></figure>\n<p>-——例子2—————–<br><code>任给数组A[0,n), 将其前后颠倒</code>            // 更一般的子区间[lo, hi]<br><strong>统一接口</strong> : void reverse(int * A, int lo, int hi);</p>\n<p><code>递归版</code></p>\n<p>规模缩小两个单位。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>* A, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输入指向数组A的指针, A中要转置的左区间lo， A中要转置的右区间lo</span></span><br><span class=\"line\">  <span class=\"comment\">// 无返回值，改变指针A所指向的数组, 使其倒序</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">    swap(&amp;(A[lo]), &amp;(A[hi]));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((hi-lo) == <span class=\"number\">1</span>) || ((hi - lo) == <span class=\"number\">0</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    reverse(A, lo + <span class=\"number\">1</span>, hi - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析时间复杂度：</p>\n<p><code>递归跟踪(recursion trace)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main();</span><br><span class=\"line\">reverse(A[n], lo, hi);</span><br><span class=\"line\">reverse(A[n-2], lo+1, hi-1);</span><br><span class=\"line\">reverse(A[n-4], lo+2, hi-2);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">reverse(A[1], lo+(n-1)/2, hi+(n-1)/2);</span><br><span class=\"line\">or</span><br><span class=\"line\">reverse(A[0], lo + n/2, hi+ n/2);</span><br><span class=\"line\">      (n-1)/2 , n是奇数</span><br><span class=\"line\">     /                   </span><br><span class=\"line\">O(1)*                    = O(n)</span><br><span class=\"line\">     \\n / 2,    n是偶数</span><br></pre></td></tr></table></figure></p>\n<p><code>递推方程</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = T(n) + O(1);</span><br><span class=\"line\">T(n) - n = T(n-1) - (n-1)</span><br><span class=\"line\">T(n) - n = T(2) - 2</span><br><span class=\"line\">         = T(0) - 0</span><br><span class=\"line\">T(n) = T(0) + n = O(n)</span><br></pre></td></tr></table></figure></p>\n<p>&lt;span style=”color”:blue”&gt;<em>感觉不怎么正确??</em></p>\n<p>课后推敲:</p>\n<p><code>迭代原始版本</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse_iterate_original</span><span class=\"params\">(<span class=\"keyword\">int</span>* A, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 迭代原始版本</span></span><br><span class=\"line\">next:</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo &lt; hi)</span><br><span class=\"line\">  &#123;swap(&amp;A[lo], &amp;A[hi]); lo++; hi--; <span class=\"keyword\">goto</span> next;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:blue\"><em>使用next作为分支标记,goto跳转，真的能让代码运行，从来没用过</em></span></p>\n<p><code>迭代精简版</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse_iterate</span><span class=\"params\">(<span class=\"keyword\">int</span>* A, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 迭代版本</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; hi) swap(&amp;A[lo++], &amp;A[hi--]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"分而治之-divide-and-conquer\"><a href=\"#分而治之-divide-and-conquer\" class=\"headerlink\" title=\"分而治之(divide-and-conquer)\"></a>分而治之(divide-and-conquer)</h1><p>分解为多个或两个子问题，得到解后归并。<br>-—–二分递归———-</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mid_sum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组求和 :二分递归</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo == hi) <span class=\"keyword\">return</span> A[lo];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (lo + hi) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid_sum(A, lo, mid) + mid_sum(A, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\"><strong>注意 mid + 1</strong></span></p>\n<p>// 分析:<br>// 被分解成两个相似问题，mid_sum(n/2)<br>// 规模每次缩减一半，最后到达递归基<br>// 将多个问题结果合并</p>\n<p>分析复杂度:</p>\n<p><code>递归跟踪(几何归纳)</code></p>\n<p>以2为倍数的<strong>几何级数</strong>，总和与<strong>末项同阶</strong>。</p>\n<p><code>递推方程(代数运算)</code></p>\n<p>两个问题都是n/2<br>累加O(1)时间<br>递归基O(1)时间返回</p>\n<p>递推关系<br>T(n) = 2* T(n/2) + O(1)<br>T(1) = O(1)</p>\n<p>..<br>T(n) = O(n)</p>\n<h1 id=\"Max2-迭代1\"><a href=\"#Max2-迭代1\" class=\"headerlink\" title=\"Max2: 迭代1\"></a>Max2: 迭代1</h1><p>从数组区间A[lo, hi)中找出最大的两个整数A[x1]和A[x2]   // A[x1] &gt; A[x2]<br>比较次数要尽可能的少</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max2_three_iters</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;   <span class=\"comment\">// 1 &lt; n = hi - lo</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> max1 = <span class=\"number\">0</span>, max2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x1, x2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt; lo) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max1 &lt; A[i]) &#123;max1 = A[i]; x1 = i;&#125;       <span class=\"comment\">// hi-lo-1 = n-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x1 != lo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i_lo  = lo; i_lo &lt; x1; i_lo++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max2 &lt; A[i_lo]) &#123;max2 = A[i_lo]; x2 = i_lo;&#125; <span class=\"comment\">// x1-lo-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x1 != hi) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i_hi = x1+<span class=\"number\">1</span>; i_hi &lt;= hi; i_hi++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max2 &lt; A[i_hi]) &#123;max2 = A[i_hi]; x2 = i_hi;&#125; <span class=\"comment\">// hi-x1-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max_array[<span class=\"number\">2</span>] = &#123;max1, max2&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" A[x1] = \"</span> &lt;&lt; A[x1] &lt;&lt; <span class=\"string\">'\\n'</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\" A[x2] = \"</span> &lt;&lt; A[x2] &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总共比较n-1+n-2 =2n-3 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max2</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历一次，改变指针</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span>* x1 = &amp;lo;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lo_next = lo + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>* x2 = &amp;lo_next;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (A[*x1] &lt; A[*x2]) &#123;x1 = &amp;lo_next; x2 = &amp;lo;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo + <span class=\"number\">2</span>; i &lt;= hi; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A[*x2] &lt; A[i]) &#123;      <span class=\"comment\">// 索引i的对象比较小的值大</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[*x1] &lt; A[i]) &#123;    <span class=\"comment\">// 索引i的对象甚至超过了较大值</span></span><br><span class=\"line\">        x2 = &amp;(*x1); x1 = &amp;i;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      *x2 = i;                <span class=\"comment\">// x1指针指向的元素赋值成i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" A[*x1] \"</span>  &lt;&lt; A[*x1] &lt;&lt; <span class=\"string\">'\\n'</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\" A[*x2] \"</span>  &lt;&lt; A[*x2] &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最好情况: 1 + (n-2)<em>1 = n-1<br>最坏情况: 1+ (n-2) </em>2 = 2n-3</p>\n<p><code>即使在最坏情况，也更高效的改进算法</code></p>\n<blockquote>\n<ul>\n<li>分而治之</li>\n<li>实现退化情况</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">max2</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi, <span class=\"keyword\">int</span> &amp; x1, <span class=\"keyword\">int</span> &amp; x2)</span> </span>&#123;     <span class=\"comment\">// [lo, hi)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo + <span class=\"number\">2</span> == hi) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A[lo] &lt; A[lo+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      x1 = A[lo+<span class=\"number\">1</span>]; x2 = A[lo];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x2 = A[lo+<span class=\"number\">1</span>]; x1 = A[lo];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;                         <span class=\"comment\">// T(2) = 1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo + <span class=\"number\">3</span> == hi) &#123;       <span class=\"comment\">// lo, lo+1, lo+2, lo+3; 19, 2, 3, -1;</span></span><br><span class=\"line\">    x1 = lo, x2 = lo+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A[x1] &lt; A[x2]) &#123;x1 = lo+<span class=\"number\">1</span>; x2 = lo;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo+<span class=\"number\">2</span>; i &lt; hi+<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[i] &gt; A[x2]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] &gt; A[x1]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> tmp = x1;</span><br><span class=\"line\">          x1 = i; x2 = tmp;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x2 = i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;                         <span class=\"comment\">// T(3) &lt;= 3</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (lo + hi) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x1L, x2L; max2(A, lo, mid, x1L, x2L);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x1R, x2R; max2(A, mid+<span class=\"number\">1</span>, hi, x1R, x2R);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (A[x1L] &gt; A[x1R]) &#123;</span><br><span class=\"line\">    x1 = x1L; x2 = (x2L &lt; x1R) ? x1R:x2L;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    x1 = x1R; x2 = (x2R &lt; x1L) ? x1L:x2R;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 1 + 1 = 2</span></span><br></pre></td></tr></table></figure>\n<p>最坏情况: T(n) = 2 * T(n/2) + 2 &lt;= 5n/3 -2</p>\n<p><code>递推方程推导过程:</code> ? </p>\n<p><code>最好情况复杂度:</code> ?</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>两种重要算法策略：减而治之，分而治之</p>\n<p>两种分析方法：递归跟踪和递推方程</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"迭代与递归\"><a href=\"#迭代与递归\" class=\"headerlink\" title=\"迭代与递归\"></a>迭代与递归</h1><p>分而治之：分解成子问题，递归式的求解。</p>\n<p>空间复杂度：指不包含算法的输入本身所占的空间之外，所需要的另加的用于计算所必须的空间总量。</p>\n<h1 id=\"减而治之\"><a href=\"#减而治之\" class=\"headerlink\" title=\"减而治之\"></a>减而治之</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 合                合并</span><br><span class=\"line\">----&gt;    问题   --------</span><br><span class=\"line\">^      /      \\        ^</span><br><span class=\"line\">| 缩减/        \\ 平凡   |</span><br><span class=\"line\">|\t   /          \\       |</span><br><span class=\"line\"> -&gt; 子问题     子问题 &lt;---</span><br><span class=\"line\"> !     !         !    !</span><br><span class=\"line\"> -------         ------</span><br><span class=\"line\">   治              治</span><br></pre></td></tr></table></figure>\n<p>-—例子1—–<br><code>求n个总数之和</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A为整数数组, n为问题规模, 返回数组中整数的总和</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">      (n &lt; <span class=\"number\">1</span>) ?</span><br><span class=\"line\">      <span class=\"number\">0</span> : sum(A, n<span class=\"number\">-1</span>) + A[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析:</strong></p>\n<blockquote>\n<ul>\n<li>该问题分解为一个缩减问题sum(A, n-1) 和 一个平凡问题A[n-1]</li>\n<li>最后规模小到一定程度时， 缩减问题变为 平凡问题</li>\n<li>将两个问题合并得到结果</li>\n</ul>\n</blockquote>\n<p><strong>复杂度如何？</strong></p>\n<p><code>递归跟踪(recursion trace)</code>分析 (用于简单的递归)</p>\n<ul>\n<li>检查每个<span style=\"color:red\"><strong>递归实例</strong></span></li>\n<li>累积所需要时间（调用语句本身抹去，计入递归实例）</li>\n<li>其总和是算法执行时间<br>||          ||<br>vv          vv<br><code>线性递归</code>：得出上述递归是线性递归，复杂度渐进O(n)</li>\n</ul>\n<p><code>递推方程</code>分析 (用于复杂的递归)<br>上述例子中:<br>T(n) = T(n-1) + O(1)         // recurrence<br>T(0) = O(1)                  // base</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) - n = T(n-1) - (n-1) = T(n-2) - (n-2) ...</span><br><span class=\"line\">         = T(2) - 2</span><br><span class=\"line\">\t\t = T(1) - 1</span><br><span class=\"line\">\t\t = T(0) - 0 = O(1)</span><br><span class=\"line\"></span><br><span class=\"line\">T(n) = O(1) + n = O(n)</span><br></pre></td></tr></table></figure>\n<p>-——例子2—————–<br><code>任给数组A[0,n), 将其前后颠倒</code>            // 更一般的子区间[lo, hi]<br><strong>统一接口</strong> : void reverse(int * A, int lo, int hi);</p>\n<p><code>递归版</code></p>\n<p>规模缩小两个单位。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>* A, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输入指向数组A的指针, A中要转置的左区间lo， A中要转置的右区间lo</span></span><br><span class=\"line\">  <span class=\"comment\">// 无返回值，改变指针A所指向的数组, 使其倒序</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">    swap(&amp;(A[lo]), &amp;(A[hi]));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((hi-lo) == <span class=\"number\">1</span>) || ((hi - lo) == <span class=\"number\">0</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    reverse(A, lo + <span class=\"number\">1</span>, hi - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析时间复杂度：</p>\n<p><code>递归跟踪(recursion trace)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main();</span><br><span class=\"line\">reverse(A[n], lo, hi);</span><br><span class=\"line\">reverse(A[n-2], lo+1, hi-1);</span><br><span class=\"line\">reverse(A[n-4], lo+2, hi-2);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">reverse(A[1], lo+(n-1)/2, hi+(n-1)/2);</span><br><span class=\"line\">or</span><br><span class=\"line\">reverse(A[0], lo + n/2, hi+ n/2);</span><br><span class=\"line\">      (n-1)/2 , n是奇数</span><br><span class=\"line\">     /                   </span><br><span class=\"line\">O(1)*                    = O(n)</span><br><span class=\"line\">     \\n / 2,    n是偶数</span><br></pre></td></tr></table></figure></p>\n<p><code>递推方程</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = T(n) + O(1);</span><br><span class=\"line\">T(n) - n = T(n-1) - (n-1)</span><br><span class=\"line\">T(n) - n = T(2) - 2</span><br><span class=\"line\">         = T(0) - 0</span><br><span class=\"line\">T(n) = T(0) + n = O(n)</span><br></pre></td></tr></table></figure></p>\n<p>&lt;span style=”color”:blue”&gt;<em>感觉不怎么正确??</em></p>\n<p>课后推敲:</p>\n<p><code>迭代原始版本</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse_iterate_original</span><span class=\"params\">(<span class=\"keyword\">int</span>* A, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 迭代原始版本</span></span><br><span class=\"line\">next:</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo &lt; hi)</span><br><span class=\"line\">  &#123;swap(&amp;A[lo], &amp;A[hi]); lo++; hi--; <span class=\"keyword\">goto</span> next;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:blue\"><em>使用next作为分支标记,goto跳转，真的能让代码运行，从来没用过</em></span></p>\n<p><code>迭代精简版</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse_iterate</span><span class=\"params\">(<span class=\"keyword\">int</span>* A, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 迭代版本</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; hi) swap(&amp;A[lo++], &amp;A[hi--]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"分而治之-divide-and-conquer\"><a href=\"#分而治之-divide-and-conquer\" class=\"headerlink\" title=\"分而治之(divide-and-conquer)\"></a>分而治之(divide-and-conquer)</h1><p>分解为多个或两个子问题，得到解后归并。<br>-—–二分递归———-</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mid_sum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组求和 :二分递归</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo == hi) <span class=\"keyword\">return</span> A[lo];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (lo + hi) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid_sum(A, lo, mid) + mid_sum(A, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\"><strong>注意 mid + 1</strong></span></p>\n<p>// 分析:<br>// 被分解成两个相似问题，mid_sum(n/2)<br>// 规模每次缩减一半，最后到达递归基<br>// 将多个问题结果合并</p>\n<p>分析复杂度:</p>\n<p><code>递归跟踪(几何归纳)</code></p>\n<p>以2为倍数的<strong>几何级数</strong>，总和与<strong>末项同阶</strong>。</p>\n<p><code>递推方程(代数运算)</code></p>\n<p>两个问题都是n/2<br>累加O(1)时间<br>递归基O(1)时间返回</p>\n<p>递推关系<br>T(n) = 2* T(n/2) + O(1)<br>T(1) = O(1)</p>\n<p>..<br>T(n) = O(n)</p>\n<h1 id=\"Max2-迭代1\"><a href=\"#Max2-迭代1\" class=\"headerlink\" title=\"Max2: 迭代1\"></a>Max2: 迭代1</h1><p>从数组区间A[lo, hi)中找出最大的两个整数A[x1]和A[x2]   // A[x1] &gt; A[x2]<br>比较次数要尽可能的少</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max2_three_iters</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;   <span class=\"comment\">// 1 &lt; n = hi - lo</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> max1 = <span class=\"number\">0</span>, max2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x1, x2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt; lo) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo; i &lt;= hi; i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max1 &lt; A[i]) &#123;max1 = A[i]; x1 = i;&#125;       <span class=\"comment\">// hi-lo-1 = n-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x1 != lo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i_lo  = lo; i_lo &lt; x1; i_lo++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max2 &lt; A[i_lo]) &#123;max2 = A[i_lo]; x2 = i_lo;&#125; <span class=\"comment\">// x1-lo-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x1 != hi) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i_hi = x1+<span class=\"number\">1</span>; i_hi &lt;= hi; i_hi++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max2 &lt; A[i_hi]) &#123;max2 = A[i_hi]; x2 = i_hi;&#125; <span class=\"comment\">// hi-x1-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max_array[<span class=\"number\">2</span>] = &#123;max1, max2&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" A[x1] = \"</span> &lt;&lt; A[x1] &lt;&lt; <span class=\"string\">'\\n'</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\" A[x2] = \"</span> &lt;&lt; A[x2] &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总共比较n-1+n-2 =2n-3 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max2</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历一次，改变指针</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span>* x1 = &amp;lo;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lo_next = lo + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>* x2 = &amp;lo_next;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (A[*x1] &lt; A[*x2]) &#123;x1 = &amp;lo_next; x2 = &amp;lo;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo + <span class=\"number\">2</span>; i &lt;= hi; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A[*x2] &lt; A[i]) &#123;      <span class=\"comment\">// 索引i的对象比较小的值大</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[*x1] &lt; A[i]) &#123;    <span class=\"comment\">// 索引i的对象甚至超过了较大值</span></span><br><span class=\"line\">        x2 = &amp;(*x1); x1 = &amp;i;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      *x2 = i;                <span class=\"comment\">// x1指针指向的元素赋值成i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" A[*x1] \"</span>  &lt;&lt; A[*x1] &lt;&lt; <span class=\"string\">'\\n'</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\" A[*x2] \"</span>  &lt;&lt; A[*x2] &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最好情况: 1 + (n-2)<em>1 = n-1<br>最坏情况: 1+ (n-2) </em>2 = 2n-3</p>\n<p><code>即使在最坏情况，也更高效的改进算法</code></p>\n<blockquote>\n<ul>\n<li>分而治之</li>\n<li>实现退化情况</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">max2</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi, <span class=\"keyword\">int</span> &amp; x1, <span class=\"keyword\">int</span> &amp; x2)</span> </span>&#123;     <span class=\"comment\">// [lo, hi)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo + <span class=\"number\">2</span> == hi) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A[lo] &lt; A[lo+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      x1 = A[lo+<span class=\"number\">1</span>]; x2 = A[lo];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x2 = A[lo+<span class=\"number\">1</span>]; x1 = A[lo];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;                         <span class=\"comment\">// T(2) = 1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo + <span class=\"number\">3</span> == hi) &#123;       <span class=\"comment\">// lo, lo+1, lo+2, lo+3; 19, 2, 3, -1;</span></span><br><span class=\"line\">    x1 = lo, x2 = lo+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A[x1] &lt; A[x2]) &#123;x1 = lo+<span class=\"number\">1</span>; x2 = lo;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lo+<span class=\"number\">2</span>; i &lt; hi+<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[i] &gt; A[x2]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] &gt; A[x1]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> tmp = x1;</span><br><span class=\"line\">          x1 = i; x2 = tmp;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x2 = i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;                         <span class=\"comment\">// T(3) &lt;= 3</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (lo + hi) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x1L, x2L; max2(A, lo, mid, x1L, x2L);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x1R, x2R; max2(A, mid+<span class=\"number\">1</span>, hi, x1R, x2R);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (A[x1L] &gt; A[x1R]) &#123;</span><br><span class=\"line\">    x1 = x1L; x2 = (x2L &lt; x1R) ? x1R:x2L;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    x1 = x1R; x2 = (x2R &lt; x1L) ? x1L:x2R;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 1 + 1 = 2</span></span><br></pre></td></tr></table></figure>\n<p>最坏情况: T(n) = 2 * T(n/2) + 2 &lt;= 5n/3 -2</p>\n<p><code>递推方程推导过程:</code> ? </p>\n<p><code>最好情况复杂度:</code> ?</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>两种重要算法策略：减而治之，分而治之</p>\n<p>两种分析方法：递归跟踪和递推方程</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-02-A","date":"2018-01-09T16:08:58.000Z","_content":"\n# 接口与实现\n\n如何根据同一接口规范，定制ADT和实现implementation一个数据结构?\n如何通过更有效的算法，使得对外接口更高效的工作?\n - search \n - sort\n \n `Abstract Data Type vs. Data Structure`\n \n 抽象数据类型 = 数据模型 + 定义在该模型上的一组操作\n 数据结构     = 基于某种特定语言，实现ADT的一套算法\n \n \n# 向量ADT\n\n## 数组到向量 \n\n数组是连续的内存空间，均匀划分成若干个单元，而每一个单元都与[0, n)的**编号一一对应**\n\nA[i] = A + i * s, s为单个元素所占空间量, 故亦称作线性数组(linear array)\n\n向量是数组的抽象和泛化， 由一组元素按照线性次序封装而成\n与[0, n)内的**秩(rank)**一一对应    // 循秩访问(call-by-rank)\n元素类型不限于基本类型\n操作，管理维护更加简化安全。\n可更为简便的参与更复杂的数据结构的定制。\n\n# 操作实例\n\n## Vector模板类\n\n```cpp\ntypedef int Rank;             // 秩\n#define DEAFAULT_CAPACITY 3   // 默认初始容量\n\ntemplate <typename T> class Vector {   // 向量模板类\n private:\n  Rank _size; int _capacity; T* _elem;   // 规模, 容量, 数据区\n protected:\n  /* ... 内部函数*/\n public:\n  /* ... 构造函数*/\n  /* ... 析构函数*/\n  /* ... 只读函数*/\n  /* ... 可写函数*/\n  /* ... 遍历函数*/\n};\n```\n\n应用和实现相互分离;\n实现对内部数据项的封装。\n\n## 构造和析构\n\n```cpp\ntemplate <typename T> class Vector {   // 向量模板类\n private:\n  Rank _size; int _capacity; T* _elem;   // 规模, 容量, 数据区\n protected:\n  /* ... 内部函数*/\n public:\n  // /* ... 构造函数\n  void copyFrom(T* const A, Rank lo, Rank hi);\n  Vector(int c = DEAFAULT_CAPACITY)\n  {_elem = new T[_capacity = c]; _size = 0;}     // 默认\n  Vector(T* const A, Rank lo, Rank hi)          // 数组区间复制\n  {copyFrom(A, lo, hi);}\n  Vector(Vector<T> const& V, Rank lo, Rank hi)   // 向量区间复制\n  {copyFrom(V, lo, hi);}\n  Vector(Vector<T> const& V)                     // 向量整体复制\n  {copyFrom(V._elem, 0, V._size);}\n  //  */\n  // /* ... 析构函数\n  ~Vector() {delete [] _elem;}                   // 释放内部空间\n  // */\n  /* ... 只读函数*/\n  /* ... 可写函数*/\n  /* ... 遍历函数*/\n};\n\ntemplate <typename T>\nvoid Vector<T>::copyFrom(T* const A, Rank lo, Rank hi) {\n  _elem = new T[_capacity = 2*(hi- lo)];      // 分配空间\n  _size = 0;  // 清零规模\n  while (lo < hi)   // A[lo, hi)中的元素逐一\n    _elem[_size++] = A[lo++];\n}\n```\n","source":"_posts/dsacpp/02-A.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-02-A\ndate: 2018-01-10 00:08:58\ntags: [数据结构, 向量]\n---\n\n# 接口与实现\n\n如何根据同一接口规范，定制ADT和实现implementation一个数据结构?\n如何通过更有效的算法，使得对外接口更高效的工作?\n - search \n - sort\n \n `Abstract Data Type vs. Data Structure`\n \n 抽象数据类型 = 数据模型 + 定义在该模型上的一组操作\n 数据结构     = 基于某种特定语言，实现ADT的一套算法\n \n \n# 向量ADT\n\n## 数组到向量 \n\n数组是连续的内存空间，均匀划分成若干个单元，而每一个单元都与[0, n)的**编号一一对应**\n\nA[i] = A + i * s, s为单个元素所占空间量, 故亦称作线性数组(linear array)\n\n向量是数组的抽象和泛化， 由一组元素按照线性次序封装而成\n与[0, n)内的**秩(rank)**一一对应    // 循秩访问(call-by-rank)\n元素类型不限于基本类型\n操作，管理维护更加简化安全。\n可更为简便的参与更复杂的数据结构的定制。\n\n# 操作实例\n\n## Vector模板类\n\n```cpp\ntypedef int Rank;             // 秩\n#define DEAFAULT_CAPACITY 3   // 默认初始容量\n\ntemplate <typename T> class Vector {   // 向量模板类\n private:\n  Rank _size; int _capacity; T* _elem;   // 规模, 容量, 数据区\n protected:\n  /* ... 内部函数*/\n public:\n  /* ... 构造函数*/\n  /* ... 析构函数*/\n  /* ... 只读函数*/\n  /* ... 可写函数*/\n  /* ... 遍历函数*/\n};\n```\n\n应用和实现相互分离;\n实现对内部数据项的封装。\n\n## 构造和析构\n\n```cpp\ntemplate <typename T> class Vector {   // 向量模板类\n private:\n  Rank _size; int _capacity; T* _elem;   // 规模, 容量, 数据区\n protected:\n  /* ... 内部函数*/\n public:\n  // /* ... 构造函数\n  void copyFrom(T* const A, Rank lo, Rank hi);\n  Vector(int c = DEAFAULT_CAPACITY)\n  {_elem = new T[_capacity = c]; _size = 0;}     // 默认\n  Vector(T* const A, Rank lo, Rank hi)          // 数组区间复制\n  {copyFrom(A, lo, hi);}\n  Vector(Vector<T> const& V, Rank lo, Rank hi)   // 向量区间复制\n  {copyFrom(V, lo, hi);}\n  Vector(Vector<T> const& V)                     // 向量整体复制\n  {copyFrom(V._elem, 0, V._size);}\n  //  */\n  // /* ... 析构函数\n  ~Vector() {delete [] _elem;}                   // 释放内部空间\n  // */\n  /* ... 只读函数*/\n  /* ... 可写函数*/\n  /* ... 遍历函数*/\n};\n\ntemplate <typename T>\nvoid Vector<T>::copyFrom(T* const A, Rank lo, Rank hi) {\n  _elem = new T[_capacity = 2*(hi- lo)];      // 分配空间\n  _size = 0;  // 清零规模\n  while (lo < hi)   // A[lo, hi)中的元素逐一\n    _elem[_size++] = A[lo++];\n}\n```\n","slug":"dsacpp/02-A","published":1,"updated":"2018-01-09T16:24:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv0l001vfadrhp8n5ko2","content":"<h1 id=\"接口与实现\"><a href=\"#接口与实现\" class=\"headerlink\" title=\"接口与实现\"></a>接口与实现</h1><p>如何根据同一接口规范，定制ADT和实现implementation一个数据结构?<br>如何通过更有效的算法，使得对外接口更高效的工作?</p>\n<ul>\n<li>search </li>\n<li><p>sort</p>\n<p><code>Abstract Data Type vs. Data Structure</code></p>\n<p>抽象数据类型 = 数据模型 + 定义在该模型上的一组操作<br>数据结构     = 基于某种特定语言，实现ADT的一套算法</p>\n</li>\n</ul>\n<h1 id=\"向量ADT\"><a href=\"#向量ADT\" class=\"headerlink\" title=\"向量ADT\"></a>向量ADT</h1><h2 id=\"数组到向量\"><a href=\"#数组到向量\" class=\"headerlink\" title=\"数组到向量\"></a>数组到向量</h2><p>数组是连续的内存空间，均匀划分成若干个单元，而每一个单元都与[0, n)的<strong>编号一一对应</strong></p>\n<p>A[i] = A + i * s, s为单个元素所占空间量, 故亦称作线性数组(linear array)</p>\n<p>向量是数组的抽象和泛化， 由一组元素按照线性次序封装而成<br>与[0, n)内的<strong>秩(rank)</strong>一一对应    // 循秩访问(call-by-rank)<br>元素类型不限于基本类型<br>操作，管理维护更加简化安全。<br>可更为简便的参与更复杂的数据结构的定制。</p>\n<h1 id=\"操作实例\"><a href=\"#操作实例\" class=\"headerlink\" title=\"操作实例\"></a>操作实例</h1><h2 id=\"Vector模板类\"><a href=\"#Vector模板类\" class=\"headerlink\" title=\"Vector模板类\"></a>Vector模板类</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> Rank;             <span class=\"comment\">// 秩</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEAFAULT_CAPACITY 3   <span class=\"comment\">// 默认初始容量</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span>   <span class=\"comment\">// 向量模板类</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  Rank _size; <span class=\"keyword\">int</span> _capacity; T* _elem;   <span class=\"comment\">// 规模, 容量, 数据区</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* ... 内部函数*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* ... 构造函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 析构函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 只读函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 可写函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 遍历函数*/</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>应用和实现相互分离;<br>实现对内部数据项的封装。</p>\n<h2 id=\"构造和析构\"><a href=\"#构造和析构\" class=\"headerlink\" title=\"构造和析构\"></a>构造和析构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span>   <span class=\"comment\">// 向量模板类</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  Rank _size; <span class=\"keyword\">int</span> _capacity; T* _elem;   <span class=\"comment\">// 规模, 容量, 数据区</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* ... 内部函数*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// /* ... 构造函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyFrom</span><span class=\"params\">(T* <span class=\"keyword\">const</span> A, Rank lo, Rank hi)</span></span>;</span><br><span class=\"line\">  Vector(<span class=\"keyword\">int</span> c = DEAFAULT_CAPACITY)</span><br><span class=\"line\">  &#123;_elem = <span class=\"keyword\">new</span> T[_capacity = c]; _size = <span class=\"number\">0</span>;&#125;     <span class=\"comment\">// 默认</span></span><br><span class=\"line\">  Vector(T* <span class=\"keyword\">const</span> A, Rank lo, Rank hi)          <span class=\"comment\">// 数组区间复制</span></span><br><span class=\"line\">  &#123;copyFrom(A, lo, hi);&#125;</span><br><span class=\"line\">  Vector(Vector&lt;T&gt; <span class=\"keyword\">const</span>&amp; V, Rank lo, Rank hi)   <span class=\"comment\">// 向量区间复制</span></span><br><span class=\"line\">  &#123;copyFrom(V, lo, hi);&#125;</span><br><span class=\"line\">  Vector(Vector&lt;T&gt; <span class=\"keyword\">const</span>&amp; V)                     <span class=\"comment\">// 向量整体复制</span></span><br><span class=\"line\">  &#123;copyFrom(V._elem, <span class=\"number\">0</span>, V._size);&#125;</span><br><span class=\"line\">  <span class=\"comment\">//  */</span></span><br><span class=\"line\">  <span class=\"comment\">// /* ... 析构函数</span></span><br><span class=\"line\">  ~Vector() &#123;<span class=\"keyword\">delete</span> [] _elem;&#125;                   <span class=\"comment\">// 释放内部空间</span></span><br><span class=\"line\">  <span class=\"comment\">// */</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 只读函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 可写函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 遍历函数*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Vector&lt;T&gt;::copyFrom(T* <span class=\"keyword\">const</span> A, Rank lo, Rank hi) &#123;</span><br><span class=\"line\">  _elem = <span class=\"keyword\">new</span> T[_capacity = <span class=\"number\">2</span>*(hi- lo)];      <span class=\"comment\">// 分配空间</span></span><br><span class=\"line\">  _size = <span class=\"number\">0</span>;  <span class=\"comment\">// 清零规模</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; hi)   <span class=\"comment\">// A[lo, hi)中的元素逐一</span></span><br><span class=\"line\">    _elem[_size++] = A[lo++];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"接口与实现\"><a href=\"#接口与实现\" class=\"headerlink\" title=\"接口与实现\"></a>接口与实现</h1><p>如何根据同一接口规范，定制ADT和实现implementation一个数据结构?<br>如何通过更有效的算法，使得对外接口更高效的工作?</p>\n<ul>\n<li>search </li>\n<li><p>sort</p>\n<p><code>Abstract Data Type vs. Data Structure</code></p>\n<p>抽象数据类型 = 数据模型 + 定义在该模型上的一组操作<br>数据结构     = 基于某种特定语言，实现ADT的一套算法</p>\n</li>\n</ul>\n<h1 id=\"向量ADT\"><a href=\"#向量ADT\" class=\"headerlink\" title=\"向量ADT\"></a>向量ADT</h1><h2 id=\"数组到向量\"><a href=\"#数组到向量\" class=\"headerlink\" title=\"数组到向量\"></a>数组到向量</h2><p>数组是连续的内存空间，均匀划分成若干个单元，而每一个单元都与[0, n)的<strong>编号一一对应</strong></p>\n<p>A[i] = A + i * s, s为单个元素所占空间量, 故亦称作线性数组(linear array)</p>\n<p>向量是数组的抽象和泛化， 由一组元素按照线性次序封装而成<br>与[0, n)内的<strong>秩(rank)</strong>一一对应    // 循秩访问(call-by-rank)<br>元素类型不限于基本类型<br>操作，管理维护更加简化安全。<br>可更为简便的参与更复杂的数据结构的定制。</p>\n<h1 id=\"操作实例\"><a href=\"#操作实例\" class=\"headerlink\" title=\"操作实例\"></a>操作实例</h1><h2 id=\"Vector模板类\"><a href=\"#Vector模板类\" class=\"headerlink\" title=\"Vector模板类\"></a>Vector模板类</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> Rank;             <span class=\"comment\">// 秩</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEAFAULT_CAPACITY 3   <span class=\"comment\">// 默认初始容量</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span>   <span class=\"comment\">// 向量模板类</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  Rank _size; <span class=\"keyword\">int</span> _capacity; T* _elem;   <span class=\"comment\">// 规模, 容量, 数据区</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* ... 内部函数*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* ... 构造函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 析构函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 只读函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 可写函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 遍历函数*/</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>应用和实现相互分离;<br>实现对内部数据项的封装。</p>\n<h2 id=\"构造和析构\"><a href=\"#构造和析构\" class=\"headerlink\" title=\"构造和析构\"></a>构造和析构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span>   <span class=\"comment\">// 向量模板类</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  Rank _size; <span class=\"keyword\">int</span> _capacity; T* _elem;   <span class=\"comment\">// 规模, 容量, 数据区</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* ... 内部函数*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// /* ... 构造函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyFrom</span><span class=\"params\">(T* <span class=\"keyword\">const</span> A, Rank lo, Rank hi)</span></span>;</span><br><span class=\"line\">  Vector(<span class=\"keyword\">int</span> c = DEAFAULT_CAPACITY)</span><br><span class=\"line\">  &#123;_elem = <span class=\"keyword\">new</span> T[_capacity = c]; _size = <span class=\"number\">0</span>;&#125;     <span class=\"comment\">// 默认</span></span><br><span class=\"line\">  Vector(T* <span class=\"keyword\">const</span> A, Rank lo, Rank hi)          <span class=\"comment\">// 数组区间复制</span></span><br><span class=\"line\">  &#123;copyFrom(A, lo, hi);&#125;</span><br><span class=\"line\">  Vector(Vector&lt;T&gt; <span class=\"keyword\">const</span>&amp; V, Rank lo, Rank hi)   <span class=\"comment\">// 向量区间复制</span></span><br><span class=\"line\">  &#123;copyFrom(V, lo, hi);&#125;</span><br><span class=\"line\">  Vector(Vector&lt;T&gt; <span class=\"keyword\">const</span>&amp; V)                     <span class=\"comment\">// 向量整体复制</span></span><br><span class=\"line\">  &#123;copyFrom(V._elem, <span class=\"number\">0</span>, V._size);&#125;</span><br><span class=\"line\">  <span class=\"comment\">//  */</span></span><br><span class=\"line\">  <span class=\"comment\">// /* ... 析构函数</span></span><br><span class=\"line\">  ~Vector() &#123;<span class=\"keyword\">delete</span> [] _elem;&#125;                   <span class=\"comment\">// 释放内部空间</span></span><br><span class=\"line\">  <span class=\"comment\">// */</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 只读函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 可写函数*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* ... 遍历函数*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Vector&lt;T&gt;::copyFrom(T* <span class=\"keyword\">const</span> A, Rank lo, Rank hi) &#123;</span><br><span class=\"line\">  _elem = <span class=\"keyword\">new</span> T[_capacity = <span class=\"number\">2</span>*(hi- lo)];      <span class=\"comment\">// 分配空间</span></span><br><span class=\"line\">  _size = <span class=\"number\">0</span>;  <span class=\"comment\">// 清零规模</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; hi)   <span class=\"comment\">// A[lo, hi)中的元素逐一</span></span><br><span class=\"line\">    _elem[_size++] = A[lo++];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"邓俊辉<<数据结构>>-公开课-02-B","date":"2018-01-09T16:09:07.000Z","_content":"\n# 可扩充向量\n\n## 静态管理空间\n\n_capacity固定, 存在不足:\n> 1, 上溢(overflow）, _elem[]不足以存放元素\n> 2, 下溢(underflow), _elem[]中元素寥寥无几\n装填因子(load factor) = _size/ _ capacity << 50% 空间利用率低\n\n# 动态管理空间\n\n蝉的哲学：每过一段时间，身体生长，以致于无法外壳容纳自己的身体，退去一层外壳，但之以容纳新的外壳。\n\n即将发生**上溢**，失当扩展容量\n\n## 扩容算法实现\n\n`得益于向量的封装, 尽管扩容之后数据区的物理地址有所改变, 却不致出现野指针`\n封装后，上述通过_elem统一的指示器标记起点.\n\n`为何必须采用容量加倍`\n\n# 递增式扩容\n\n算术级数\n\n总耗时 = I * (m-1) * m/2 = O(n^2), 每次O(n)\n\n# 加倍式扩容\n\n几何级数\n\n总耗时O(n), 每次扩容分摊成本为O(1)\n\n空间上的牺牲, 在时间上获得巨大的收益。\n\n# 分摊复杂度 \n\n## 平均分析 vs 分摊分析\n`平均分析(average/ expected complexity)`\n独立事件, 割裂相关性\n往往不能准确反应。\n\n\n`分摊分析(amortized complexity)`\n连续的, 足够多的操作。\n实际可行，整体考量。\n更为真实反应。\n","source":"_posts/dsacpp/02-B.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-02-B\ndate: 2018-01-10 00:09:07\ntags: [数据结构, 复杂度]\n---\n\n# 可扩充向量\n\n## 静态管理空间\n\n_capacity固定, 存在不足:\n> 1, 上溢(overflow）, _elem[]不足以存放元素\n> 2, 下溢(underflow), _elem[]中元素寥寥无几\n装填因子(load factor) = _size/ _ capacity << 50% 空间利用率低\n\n# 动态管理空间\n\n蝉的哲学：每过一段时间，身体生长，以致于无法外壳容纳自己的身体，退去一层外壳，但之以容纳新的外壳。\n\n即将发生**上溢**，失当扩展容量\n\n## 扩容算法实现\n\n`得益于向量的封装, 尽管扩容之后数据区的物理地址有所改变, 却不致出现野指针`\n封装后，上述通过_elem统一的指示器标记起点.\n\n`为何必须采用容量加倍`\n\n# 递增式扩容\n\n算术级数\n\n总耗时 = I * (m-1) * m/2 = O(n^2), 每次O(n)\n\n# 加倍式扩容\n\n几何级数\n\n总耗时O(n), 每次扩容分摊成本为O(1)\n\n空间上的牺牲, 在时间上获得巨大的收益。\n\n# 分摊复杂度 \n\n## 平均分析 vs 分摊分析\n`平均分析(average/ expected complexity)`\n独立事件, 割裂相关性\n往往不能准确反应。\n\n\n`分摊分析(amortized complexity)`\n连续的, 足够多的操作。\n实际可行，整体考量。\n更为真实反应。\n","slug":"dsacpp/02-B","published":1,"updated":"2018-01-09T16:24:29.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv0n001yfadrldp0zpgq","content":"<h1 id=\"可扩充向量\"><a href=\"#可扩充向量\" class=\"headerlink\" title=\"可扩充向量\"></a>可扩充向量</h1><h2 id=\"静态管理空间\"><a href=\"#静态管理空间\" class=\"headerlink\" title=\"静态管理空间\"></a>静态管理空间</h2><p>_capacity固定, 存在不足:</p>\n<blockquote>\n<p>1, 上溢(overflow）, _elem[]不足以存放元素<br>2, 下溢(underflow), _elem[]中元素寥寥无几<br>装填因子(load factor) = <em>size/ </em> capacity &lt;&lt; 50% 空间利用率低</p>\n</blockquote>\n<h1 id=\"动态管理空间\"><a href=\"#动态管理空间\" class=\"headerlink\" title=\"动态管理空间\"></a>动态管理空间</h1><p>蝉的哲学：每过一段时间，身体生长，以致于无法外壳容纳自己的身体，退去一层外壳，但之以容纳新的外壳。</p>\n<p>即将发生<strong>上溢</strong>，失当扩展容量</p>\n<h2 id=\"扩容算法实现\"><a href=\"#扩容算法实现\" class=\"headerlink\" title=\"扩容算法实现\"></a>扩容算法实现</h2><p><code>得益于向量的封装, 尽管扩容之后数据区的物理地址有所改变, 却不致出现野指针</code><br>封装后，上述通过_elem统一的指示器标记起点.</p>\n<p><code>为何必须采用容量加倍</code></p>\n<h1 id=\"递增式扩容\"><a href=\"#递增式扩容\" class=\"headerlink\" title=\"递增式扩容\"></a>递增式扩容</h1><p>算术级数</p>\n<p>总耗时 = I <em> (m-1) </em> m/2 = O(n^2), 每次O(n)</p>\n<h1 id=\"加倍式扩容\"><a href=\"#加倍式扩容\" class=\"headerlink\" title=\"加倍式扩容\"></a>加倍式扩容</h1><p>几何级数</p>\n<p>总耗时O(n), 每次扩容分摊成本为O(1)</p>\n<p>空间上的牺牲, 在时间上获得巨大的收益。</p>\n<h1 id=\"分摊复杂度\"><a href=\"#分摊复杂度\" class=\"headerlink\" title=\"分摊复杂度\"></a>分摊复杂度</h1><h2 id=\"平均分析-vs-分摊分析\"><a href=\"#平均分析-vs-分摊分析\" class=\"headerlink\" title=\"平均分析 vs 分摊分析\"></a>平均分析 vs 分摊分析</h2><p><code>平均分析(average/ expected complexity)</code><br>独立事件, 割裂相关性<br>往往不能准确反应。</p>\n<p><code>分摊分析(amortized complexity)</code><br>连续的, 足够多的操作。<br>实际可行，整体考量。<br>更为真实反应。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"可扩充向量\"><a href=\"#可扩充向量\" class=\"headerlink\" title=\"可扩充向量\"></a>可扩充向量</h1><h2 id=\"静态管理空间\"><a href=\"#静态管理空间\" class=\"headerlink\" title=\"静态管理空间\"></a>静态管理空间</h2><p>_capacity固定, 存在不足:</p>\n<blockquote>\n<p>1, 上溢(overflow）, _elem[]不足以存放元素<br>2, 下溢(underflow), _elem[]中元素寥寥无几<br>装填因子(load factor) = <em>size/ </em> capacity &lt;&lt; 50% 空间利用率低</p>\n</blockquote>\n<h1 id=\"动态管理空间\"><a href=\"#动态管理空间\" class=\"headerlink\" title=\"动态管理空间\"></a>动态管理空间</h1><p>蝉的哲学：每过一段时间，身体生长，以致于无法外壳容纳自己的身体，退去一层外壳，但之以容纳新的外壳。</p>\n<p>即将发生<strong>上溢</strong>，失当扩展容量</p>\n<h2 id=\"扩容算法实现\"><a href=\"#扩容算法实现\" class=\"headerlink\" title=\"扩容算法实现\"></a>扩容算法实现</h2><p><code>得益于向量的封装, 尽管扩容之后数据区的物理地址有所改变, 却不致出现野指针</code><br>封装后，上述通过_elem统一的指示器标记起点.</p>\n<p><code>为何必须采用容量加倍</code></p>\n<h1 id=\"递增式扩容\"><a href=\"#递增式扩容\" class=\"headerlink\" title=\"递增式扩容\"></a>递增式扩容</h1><p>算术级数</p>\n<p>总耗时 = I <em> (m-1) </em> m/2 = O(n^2), 每次O(n)</p>\n<h1 id=\"加倍式扩容\"><a href=\"#加倍式扩容\" class=\"headerlink\" title=\"加倍式扩容\"></a>加倍式扩容</h1><p>几何级数</p>\n<p>总耗时O(n), 每次扩容分摊成本为O(1)</p>\n<p>空间上的牺牲, 在时间上获得巨大的收益。</p>\n<h1 id=\"分摊复杂度\"><a href=\"#分摊复杂度\" class=\"headerlink\" title=\"分摊复杂度\"></a>分摊复杂度</h1><h2 id=\"平均分析-vs-分摊分析\"><a href=\"#平均分析-vs-分摊分析\" class=\"headerlink\" title=\"平均分析 vs 分摊分析\"></a>平均分析 vs 分摊分析</h2><p><code>平均分析(average/ expected complexity)</code><br>独立事件, 割裂相关性<br>往往不能准确反应。</p>\n<p><code>分摊分析(amortized complexity)</code><br>连续的, 足够多的操作。<br>实际可行，整体考量。<br>更为真实反应。</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-01-D","date":"2017-12-28T03:14:53.000Z","_content":"\n<span style=\"color:blue\">*我把邓老师课上对自己有需要的笔记写下来，并在看完视频后补充教材和课后习题的内容.*</span>\n\n\n# 算法分析\n\n运用DSA\n\n算法分析的两个任务\n> * 正确性(不变性 * 单调性)\n> * 复杂度增长速度表格\n\nC++等高级语言的基本指令，等效于常数条RAM的基本指令；渐进意义下，相当\n  分支转向：goto   // 算法灵魂；出于结构考虑，被隐藏\n  迭代循环:for(), while()..   // 本质上 \"if+goto\"\n  调用+递归                   // 本质上也是 \"goto\"\n\n复杂度分析方法:\n> 1. 迭代: 级数求和\n> 2. 递归: 递归跟踪 + 递推方程\n> 猜测 + 验证\n\n# 级数\n\n## 算术级数：与**末项平方**同阶\n\n## 幂方级数：比幂次高出一阶\n\n## 几何级数（a > 1）:与末项同阶\n\n## 收敛级数:O(1)\n\n## 未必收敛，但长度有限\nh(n) = 1 + 1/2 + 1/3 + ... + 1/n = O(logn)            // 调和级数\nlog1 + log2 + log3 + ... + logn = log(n!) = O(nlogn)  // 对数级数\n\n## 推荐书籍\n`<<Concrete Math>>` 具体数学\n\n# 循环 vs 级数\n\n\n## 没有耦合的二层循环\n```cpp\nfor (int i = 0; i < n; i++)\nfor (int j = 0; j < n; j++)\n    O1Operation(i, j);\n```\n\n算术级数:  n * n = O(n^2)\n等效：矩形被填充的过程，时间复杂度等于矩形面积。\n\n## 耦合的二层循环\n```cpp\nfor (int i = 0; i < n; i++)\nfor (int j = 0; j < i; j++)\n    O1Operation(i, j);\n```\n\n算术级数: n(n-1) / 2 = O(n^2)\n等效：三角形被填充，复杂度等于矩形面积。\n\n## 递增不为1的二层循环\n```cpp\nfor (int i = 0; i < n; i++)\nfor (int j = 0; j < i; j += 2013)\n    O1Operation(i, j);\n```\n\n算术级数：O(n^2)\n\n## 外循环左移一位(加倍)\n```cpp\nfor (int i = 1; i < n; i <<= 1)\nfor (int j = 0; j < i; j++)\n    O1peration(i, j);\n```\n\n几何级数：O(n)     // ??\n\n## 更复杂的实例\n```cpp\nfor (int i = 0; i <= n; i++)\nfor (int j = 1; j <  i; j += j)\n    O1peration(i, j);\n```\n\n## 习题解析\n\n# 取非极端元素、冒泡排序\n\n## 取非极端元素 \n\n算法： \n> 1, 从S中取出三个元素{x, y, z}\n> 2, 确定并排除其中的最小值和最大值\n> 3, 输出剩下的元素z\n\n```cpp\nint ordinaryElements(int A[], int n) {\n  // 从n >= 3个互异整数中,除最大、最小者以外,任取一个“常规元素”\n  // 先比较a,b;再确定c对于(a,b)区间的关系\n  int a = A[0], b = A[1], c = A[2];    // 从特定单元读取元素O(3)\n  // 统一成区间(a, b), 用于c对其判断\n  if (a < b) { } else {\n    swap(&a, &b);\n  }\n  if (c < a) return a;\n  else if (c > b) return b;\n  else\n    return c;\n  // return 输出非极端数O(1)\n\n  // =======================================\n  // T(n) = O(3) + O(3) + O(1) = O(7) = O(1)\n}\n```\n\n结论:无论输入规模有多大，所需执行该算法的执行时间都不变。\n\n## 起泡排序问题\n```cpp\nvoid bubblesort(int A[], int n) {\n  for (bool sorted = false; sorted = !sorted; n--)\n    for (int i = 1; i < n+1; i++) {  // 自左向右逐对检查[0,n)各相邻元素\n      if (A[i-1] > A[i]) {         // 若逆序,则\n        swap(&A[i-1], &A[i]);      // 令其交换位置\n        sorted = false;            // 消除全局有序标记\n      }\n    }\n}\n```\n\n# 算法分析\n\n\n不变性：经k轮扫描交换后，最大的k个元素必然就位\n单调性：经k轮扫描交换后，问题的规模缩减至n-k\n正确性：经至多k轮扫描后，算法必然终止，且能给出正确答案\n\n基本且重要的技巧：通过挖掘不变性和单调性，证明算法的正确性\n\n# 封底估计 Back-Of-The-Envelope Calculation\n\n不需要工具\n\n787km 占据整个周长的1/50 => 整个周长4wkm\n\n抓住问题的主要方面，简洁得出总体规律\n\n在复杂度分析中，对象是时间。\n\n# 封底估计实例\n> * 一天: = 24hr * 60min * 60sec = 25 * 4000 = 10^5 sec\n> * 一生: = 1世纪 = 100yr * 365 = 3 * 10^4 = 3 * 10^9 sec\n> * \"50年\" = 1.6 * 10^9 sec\n> * 三生三世: 300yr = 10^10 = (1 googel)^(1/10) sec\n> * 宇宙大爆炸至今: 10^21 = 10^(10^10)^2 sec \n三生三世是10^10s\n三生三世中的一天，相当于在一天中的1s\n整个宇宙中的三生三世，就是在三生三世中的0.1s\n\n1亿 = 10^9\n\n复杂度和浮点运算能力flops相除，能得到某算法的时间。\n\n人口普查 n = 10^9\n\\=====================\n普通PC 1Ghz 10^9 flops\nBullesort: O(n^2) ==> (10^9)^2 = 10^18 \n\n时间: 10^18 / 10^9  = 10^9\n3*10^9 = 100yr, 10^9 = 30年\n\\=====================\n普通PC  10^9 flops\nMergesort: O(n\\*logn) => (10^9)\\*log(10^9) = 30 * 10^9\n\n时间; 30 * 10^9 / 10^9 = 30s\n\\=====================\n天河1A 10^15 flops\nBullesort:\n\n时间:20min: 10^3s\n\\=====================\n","source":"_posts/dsacpp/01-D.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-01-D\ndate: 2017-12-28 11:14:53\ntags: [数据结构, 复杂度]\n---\n\n<span style=\"color:blue\">*我把邓老师课上对自己有需要的笔记写下来，并在看完视频后补充教材和课后习题的内容.*</span>\n\n\n# 算法分析\n\n运用DSA\n\n算法分析的两个任务\n> * 正确性(不变性 * 单调性)\n> * 复杂度增长速度表格\n\nC++等高级语言的基本指令，等效于常数条RAM的基本指令；渐进意义下，相当\n  分支转向：goto   // 算法灵魂；出于结构考虑，被隐藏\n  迭代循环:for(), while()..   // 本质上 \"if+goto\"\n  调用+递归                   // 本质上也是 \"goto\"\n\n复杂度分析方法:\n> 1. 迭代: 级数求和\n> 2. 递归: 递归跟踪 + 递推方程\n> 猜测 + 验证\n\n# 级数\n\n## 算术级数：与**末项平方**同阶\n\n## 幂方级数：比幂次高出一阶\n\n## 几何级数（a > 1）:与末项同阶\n\n## 收敛级数:O(1)\n\n## 未必收敛，但长度有限\nh(n) = 1 + 1/2 + 1/3 + ... + 1/n = O(logn)            // 调和级数\nlog1 + log2 + log3 + ... + logn = log(n!) = O(nlogn)  // 对数级数\n\n## 推荐书籍\n`<<Concrete Math>>` 具体数学\n\n# 循环 vs 级数\n\n\n## 没有耦合的二层循环\n```cpp\nfor (int i = 0; i < n; i++)\nfor (int j = 0; j < n; j++)\n    O1Operation(i, j);\n```\n\n算术级数:  n * n = O(n^2)\n等效：矩形被填充的过程，时间复杂度等于矩形面积。\n\n## 耦合的二层循环\n```cpp\nfor (int i = 0; i < n; i++)\nfor (int j = 0; j < i; j++)\n    O1Operation(i, j);\n```\n\n算术级数: n(n-1) / 2 = O(n^2)\n等效：三角形被填充，复杂度等于矩形面积。\n\n## 递增不为1的二层循环\n```cpp\nfor (int i = 0; i < n; i++)\nfor (int j = 0; j < i; j += 2013)\n    O1Operation(i, j);\n```\n\n算术级数：O(n^2)\n\n## 外循环左移一位(加倍)\n```cpp\nfor (int i = 1; i < n; i <<= 1)\nfor (int j = 0; j < i; j++)\n    O1peration(i, j);\n```\n\n几何级数：O(n)     // ??\n\n## 更复杂的实例\n```cpp\nfor (int i = 0; i <= n; i++)\nfor (int j = 1; j <  i; j += j)\n    O1peration(i, j);\n```\n\n## 习题解析\n\n# 取非极端元素、冒泡排序\n\n## 取非极端元素 \n\n算法： \n> 1, 从S中取出三个元素{x, y, z}\n> 2, 确定并排除其中的最小值和最大值\n> 3, 输出剩下的元素z\n\n```cpp\nint ordinaryElements(int A[], int n) {\n  // 从n >= 3个互异整数中,除最大、最小者以外,任取一个“常规元素”\n  // 先比较a,b;再确定c对于(a,b)区间的关系\n  int a = A[0], b = A[1], c = A[2];    // 从特定单元读取元素O(3)\n  // 统一成区间(a, b), 用于c对其判断\n  if (a < b) { } else {\n    swap(&a, &b);\n  }\n  if (c < a) return a;\n  else if (c > b) return b;\n  else\n    return c;\n  // return 输出非极端数O(1)\n\n  // =======================================\n  // T(n) = O(3) + O(3) + O(1) = O(7) = O(1)\n}\n```\n\n结论:无论输入规模有多大，所需执行该算法的执行时间都不变。\n\n## 起泡排序问题\n```cpp\nvoid bubblesort(int A[], int n) {\n  for (bool sorted = false; sorted = !sorted; n--)\n    for (int i = 1; i < n+1; i++) {  // 自左向右逐对检查[0,n)各相邻元素\n      if (A[i-1] > A[i]) {         // 若逆序,则\n        swap(&A[i-1], &A[i]);      // 令其交换位置\n        sorted = false;            // 消除全局有序标记\n      }\n    }\n}\n```\n\n# 算法分析\n\n\n不变性：经k轮扫描交换后，最大的k个元素必然就位\n单调性：经k轮扫描交换后，问题的规模缩减至n-k\n正确性：经至多k轮扫描后，算法必然终止，且能给出正确答案\n\n基本且重要的技巧：通过挖掘不变性和单调性，证明算法的正确性\n\n# 封底估计 Back-Of-The-Envelope Calculation\n\n不需要工具\n\n787km 占据整个周长的1/50 => 整个周长4wkm\n\n抓住问题的主要方面，简洁得出总体规律\n\n在复杂度分析中，对象是时间。\n\n# 封底估计实例\n> * 一天: = 24hr * 60min * 60sec = 25 * 4000 = 10^5 sec\n> * 一生: = 1世纪 = 100yr * 365 = 3 * 10^4 = 3 * 10^9 sec\n> * \"50年\" = 1.6 * 10^9 sec\n> * 三生三世: 300yr = 10^10 = (1 googel)^(1/10) sec\n> * 宇宙大爆炸至今: 10^21 = 10^(10^10)^2 sec \n三生三世是10^10s\n三生三世中的一天，相当于在一天中的1s\n整个宇宙中的三生三世，就是在三生三世中的0.1s\n\n1亿 = 10^9\n\n复杂度和浮点运算能力flops相除，能得到某算法的时间。\n\n人口普查 n = 10^9\n\\=====================\n普通PC 1Ghz 10^9 flops\nBullesort: O(n^2) ==> (10^9)^2 = 10^18 \n\n时间: 10^18 / 10^9  = 10^9\n3*10^9 = 100yr, 10^9 = 30年\n\\=====================\n普通PC  10^9 flops\nMergesort: O(n\\*logn) => (10^9)\\*log(10^9) = 30 * 10^9\n\n时间; 30 * 10^9 / 10^9 = 30s\n\\=====================\n天河1A 10^15 flops\nBullesort:\n\n时间:20min: 10^3s\n\\=====================\n","slug":"dsacpp/01-D","published":1,"updated":"2018-01-09T16:17:04.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7ukv0p0020fadriniewmsp","content":"<p><span style=\"color:blue\"><em>我把邓老师课上对自己有需要的笔记写下来，并在看完视频后补充教材和课后习题的内容.</em></span></p>\n<h1 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h1><p>运用DSA</p>\n<p>算法分析的两个任务</p>\n<blockquote>\n<ul>\n<li>正确性(不变性 * 单调性)</li>\n<li>复杂度增长速度表格</li>\n</ul>\n</blockquote>\n<p>C++等高级语言的基本指令，等效于常数条RAM的基本指令；渐进意义下，相当<br>  分支转向：goto   // 算法灵魂；出于结构考虑，被隐藏<br>  迭代循环:for(), while()..   // 本质上 “if+goto”<br>  调用+递归                   // 本质上也是 “goto”</p>\n<p>复杂度分析方法:</p>\n<blockquote>\n<ol>\n<li>迭代: 级数求和</li>\n<li>递归: 递归跟踪 + 递推方程<br>猜测 + 验证</li>\n</ol>\n</blockquote>\n<h1 id=\"级数\"><a href=\"#级数\" class=\"headerlink\" title=\"级数\"></a>级数</h1><h2 id=\"算术级数：与末项平方同阶\"><a href=\"#算术级数：与末项平方同阶\" class=\"headerlink\" title=\"算术级数：与末项平方同阶\"></a>算术级数：与<strong>末项平方</strong>同阶</h2><h2 id=\"幂方级数：比幂次高出一阶\"><a href=\"#幂方级数：比幂次高出一阶\" class=\"headerlink\" title=\"幂方级数：比幂次高出一阶\"></a>幂方级数：比幂次高出一阶</h2><h2 id=\"几何级数（a-gt-1）-与末项同阶\"><a href=\"#几何级数（a-gt-1）-与末项同阶\" class=\"headerlink\" title=\"几何级数（a &gt; 1）:与末项同阶\"></a>几何级数（a &gt; 1）:与末项同阶</h2><h2 id=\"收敛级数-O-1\"><a href=\"#收敛级数-O-1\" class=\"headerlink\" title=\"收敛级数:O(1)\"></a>收敛级数:O(1)</h2><h2 id=\"未必收敛，但长度有限\"><a href=\"#未必收敛，但长度有限\" class=\"headerlink\" title=\"未必收敛，但长度有限\"></a>未必收敛，但长度有限</h2><p>h(n) = 1 + 1/2 + 1/3 + … + 1/n = O(logn)            // 调和级数<br>log1 + log2 + log3 + … + logn = log(n!) = O(nlogn)  // 对数级数</p>\n<h2 id=\"推荐书籍\"><a href=\"#推荐书籍\" class=\"headerlink\" title=\"推荐书籍\"></a>推荐书籍</h2><p><code>&lt;&lt;Concrete Math&gt;&gt;</code> 具体数学</p>\n<h1 id=\"循环-vs-级数\"><a href=\"#循环-vs-级数\" class=\"headerlink\" title=\"循环 vs 级数\"></a>循环 vs 级数</h1><h2 id=\"没有耦合的二层循环\"><a href=\"#没有耦合的二层循环\" class=\"headerlink\" title=\"没有耦合的二层循环\"></a>没有耦合的二层循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">    O1Operation(i, j);</span><br></pre></td></tr></table></figure>\n<p>算术级数:  n * n = O(n^2)<br>等效：矩形被填充的过程，时间复杂度等于矩形面积。</p>\n<h2 id=\"耦合的二层循环\"><a href=\"#耦合的二层循环\" class=\"headerlink\" title=\"耦合的二层循环\"></a>耦合的二层循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">    O1Operation(i, j);</span><br></pre></td></tr></table></figure>\n<p>算术级数: n(n-1) / 2 = O(n^2)<br>等效：三角形被填充，复杂度等于矩形面积。</p>\n<h2 id=\"递增不为1的二层循环\"><a href=\"#递增不为1的二层循环\" class=\"headerlink\" title=\"递增不为1的二层循环\"></a>递增不为1的二层循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j += <span class=\"number\">2013</span>)</span><br><span class=\"line\">    O1Operation(i, j);</span><br></pre></td></tr></table></figure>\n<p>算术级数：O(n^2)</p>\n<h2 id=\"外循环左移一位-加倍\"><a href=\"#外循环左移一位-加倍\" class=\"headerlink\" title=\"外循环左移一位(加倍)\"></a>外循环左移一位(加倍)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">    O1peration(i, j);</span><br></pre></td></tr></table></figure>\n<p>几何级数：O(n)     // ??</p>\n<h2 id=\"更复杂的实例\"><a href=\"#更复杂的实例\" class=\"headerlink\" title=\"更复杂的实例\"></a>更复杂的实例</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;  i; j += j)</span><br><span class=\"line\">    O1peration(i, j);</span><br></pre></td></tr></table></figure>\n<h2 id=\"习题解析\"><a href=\"#习题解析\" class=\"headerlink\" title=\"习题解析\"></a>习题解析</h2><h1 id=\"取非极端元素、冒泡排序\"><a href=\"#取非极端元素、冒泡排序\" class=\"headerlink\" title=\"取非极端元素、冒泡排序\"></a>取非极端元素、冒泡排序</h1><h2 id=\"取非极端元素\"><a href=\"#取非极端元素\" class=\"headerlink\" title=\"取非极端元素\"></a>取非极端元素</h2><p>算法： </p>\n<blockquote>\n<p>1, 从S中取出三个元素{x, y, z}<br>2, 确定并排除其中的最小值和最大值<br>3, 输出剩下的元素z</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ordinaryElements</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从n &gt;= 3个互异整数中,除最大、最小者以外,任取一个“常规元素”</span></span><br><span class=\"line\">  <span class=\"comment\">// 先比较a,b;再确定c对于(a,b)区间的关系</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = A[<span class=\"number\">0</span>], b = A[<span class=\"number\">1</span>], c = A[<span class=\"number\">2</span>];    <span class=\"comment\">// 从特定单元读取元素O(3)</span></span><br><span class=\"line\">  <span class=\"comment\">// 统一成区间(a, b), 用于c对其判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a &lt; b) &#123; &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    swap(&amp;a, &amp;b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c &lt; a) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &gt; b) <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">  <span class=\"comment\">// return 输出非极端数O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// =======================================</span></span><br><span class=\"line\">  <span class=\"comment\">// T(n) = O(3) + O(3) + O(1) = O(7) = O(1)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结论:无论输入规模有多大，所需执行该算法的执行时间都不变。</p>\n<h2 id=\"起泡排序问题\"><a href=\"#起泡排序问题\" class=\"headerlink\" title=\"起泡排序问题\"></a>起泡排序问题</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubblesort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">bool</span> sorted = <span class=\"literal\">false</span>; sorted = !sorted; n--)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n+<span class=\"number\">1</span>; i++) &#123;  <span class=\"comment\">// 自左向右逐对检查[0,n)各相邻元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[i<span class=\"number\">-1</span>] &gt; A[i]) &#123;         <span class=\"comment\">// 若逆序,则</span></span><br><span class=\"line\">        swap(&amp;A[i<span class=\"number\">-1</span>], &amp;A[i]);      <span class=\"comment\">// 令其交换位置</span></span><br><span class=\"line\">        sorted = <span class=\"literal\">false</span>;            <span class=\"comment\">// 消除全局有序标记</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h1><p>不变性：经k轮扫描交换后，最大的k个元素必然就位<br>单调性：经k轮扫描交换后，问题的规模缩减至n-k<br>正确性：经至多k轮扫描后，算法必然终止，且能给出正确答案</p>\n<p>基本且重要的技巧：通过挖掘不变性和单调性，证明算法的正确性</p>\n<h1 id=\"封底估计-Back-Of-The-Envelope-Calculation\"><a href=\"#封底估计-Back-Of-The-Envelope-Calculation\" class=\"headerlink\" title=\"封底估计 Back-Of-The-Envelope Calculation\"></a>封底估计 Back-Of-The-Envelope Calculation</h1><p>不需要工具</p>\n<p>787km 占据整个周长的1/50 =&gt; 整个周长4wkm</p>\n<p>抓住问题的主要方面，简洁得出总体规律</p>\n<p>在复杂度分析中，对象是时间。</p>\n<h1 id=\"封底估计实例\"><a href=\"#封底估计实例\" class=\"headerlink\" title=\"封底估计实例\"></a>封底估计实例</h1><blockquote>\n<ul>\n<li>一天: = 24hr <em> 60min </em> 60sec = 25 * 4000 = 10^5 sec</li>\n<li>一生: = 1世纪 = 100yr <em> 365 = 3 </em> 10^4 = 3 * 10^9 sec</li>\n<li>“50年” = 1.6 * 10^9 sec</li>\n<li>三生三世: 300yr = 10^10 = (1 googel)^(1/10) sec</li>\n<li>宇宙大爆炸至今: 10^21 = 10^(10^10)^2 sec<br>三生三世是10^10s<br>三生三世中的一天，相当于在一天中的1s<br>整个宇宙中的三生三世，就是在三生三世中的0.1s</li>\n</ul>\n</blockquote>\n<p>1亿 = 10^9</p>\n<p>复杂度和浮点运算能力flops相除，能得到某算法的时间。</p>\n<p>人口普查 n = 10^9<br>\\=====================<br>普通PC 1Ghz 10^9 flops<br>Bullesort: O(n^2) ==&gt; (10^9)^2 = 10^18 </p>\n<p>时间: 10^18 / 10^9  = 10^9<br>3<em>10^9 = 100yr, 10^9 = 30年<br>\\=====================<br>普通PC  10^9 flops<br>Mergesort: O(n\\</em>logn) =&gt; (10^9)*log(10^9) = 30 * 10^9</p>\n<p>时间; 30 * 10^9 / 10^9 = 30s<br>\\=====================<br>天河1A 10^15 flops<br>Bullesort:</p>\n<p>时间:20min: 10^3s<br>\\=====================</p>\n","site":{"data":{}},"excerpt":"","more":"<p><span style=\"color:blue\"><em>我把邓老师课上对自己有需要的笔记写下来，并在看完视频后补充教材和课后习题的内容.</em></span></p>\n<h1 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h1><p>运用DSA</p>\n<p>算法分析的两个任务</p>\n<blockquote>\n<ul>\n<li>正确性(不变性 * 单调性)</li>\n<li>复杂度增长速度表格</li>\n</ul>\n</blockquote>\n<p>C++等高级语言的基本指令，等效于常数条RAM的基本指令；渐进意义下，相当<br>  分支转向：goto   // 算法灵魂；出于结构考虑，被隐藏<br>  迭代循环:for(), while()..   // 本质上 “if+goto”<br>  调用+递归                   // 本质上也是 “goto”</p>\n<p>复杂度分析方法:</p>\n<blockquote>\n<ol>\n<li>迭代: 级数求和</li>\n<li>递归: 递归跟踪 + 递推方程<br>猜测 + 验证</li>\n</ol>\n</blockquote>\n<h1 id=\"级数\"><a href=\"#级数\" class=\"headerlink\" title=\"级数\"></a>级数</h1><h2 id=\"算术级数：与末项平方同阶\"><a href=\"#算术级数：与末项平方同阶\" class=\"headerlink\" title=\"算术级数：与末项平方同阶\"></a>算术级数：与<strong>末项平方</strong>同阶</h2><h2 id=\"幂方级数：比幂次高出一阶\"><a href=\"#幂方级数：比幂次高出一阶\" class=\"headerlink\" title=\"幂方级数：比幂次高出一阶\"></a>幂方级数：比幂次高出一阶</h2><h2 id=\"几何级数（a-gt-1）-与末项同阶\"><a href=\"#几何级数（a-gt-1）-与末项同阶\" class=\"headerlink\" title=\"几何级数（a &gt; 1）:与末项同阶\"></a>几何级数（a &gt; 1）:与末项同阶</h2><h2 id=\"收敛级数-O-1\"><a href=\"#收敛级数-O-1\" class=\"headerlink\" title=\"收敛级数:O(1)\"></a>收敛级数:O(1)</h2><h2 id=\"未必收敛，但长度有限\"><a href=\"#未必收敛，但长度有限\" class=\"headerlink\" title=\"未必收敛，但长度有限\"></a>未必收敛，但长度有限</h2><p>h(n) = 1 + 1/2 + 1/3 + … + 1/n = O(logn)            // 调和级数<br>log1 + log2 + log3 + … + logn = log(n!) = O(nlogn)  // 对数级数</p>\n<h2 id=\"推荐书籍\"><a href=\"#推荐书籍\" class=\"headerlink\" title=\"推荐书籍\"></a>推荐书籍</h2><p><code>&lt;&lt;Concrete Math&gt;&gt;</code> 具体数学</p>\n<h1 id=\"循环-vs-级数\"><a href=\"#循环-vs-级数\" class=\"headerlink\" title=\"循环 vs 级数\"></a>循环 vs 级数</h1><h2 id=\"没有耦合的二层循环\"><a href=\"#没有耦合的二层循环\" class=\"headerlink\" title=\"没有耦合的二层循环\"></a>没有耦合的二层循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">    O1Operation(i, j);</span><br></pre></td></tr></table></figure>\n<p>算术级数:  n * n = O(n^2)<br>等效：矩形被填充的过程，时间复杂度等于矩形面积。</p>\n<h2 id=\"耦合的二层循环\"><a href=\"#耦合的二层循环\" class=\"headerlink\" title=\"耦合的二层循环\"></a>耦合的二层循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">    O1Operation(i, j);</span><br></pre></td></tr></table></figure>\n<p>算术级数: n(n-1) / 2 = O(n^2)<br>等效：三角形被填充，复杂度等于矩形面积。</p>\n<h2 id=\"递增不为1的二层循环\"><a href=\"#递增不为1的二层循环\" class=\"headerlink\" title=\"递增不为1的二层循环\"></a>递增不为1的二层循环</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j += <span class=\"number\">2013</span>)</span><br><span class=\"line\">    O1Operation(i, j);</span><br></pre></td></tr></table></figure>\n<p>算术级数：O(n^2)</p>\n<h2 id=\"外循环左移一位-加倍\"><a href=\"#外循环左移一位-加倍\" class=\"headerlink\" title=\"外循环左移一位(加倍)\"></a>外循环左移一位(加倍)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">    O1peration(i, j);</span><br></pre></td></tr></table></figure>\n<p>几何级数：O(n)     // ??</p>\n<h2 id=\"更复杂的实例\"><a href=\"#更复杂的实例\" class=\"headerlink\" title=\"更复杂的实例\"></a>更复杂的实例</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;  i; j += j)</span><br><span class=\"line\">    O1peration(i, j);</span><br></pre></td></tr></table></figure>\n<h2 id=\"习题解析\"><a href=\"#习题解析\" class=\"headerlink\" title=\"习题解析\"></a>习题解析</h2><h1 id=\"取非极端元素、冒泡排序\"><a href=\"#取非极端元素、冒泡排序\" class=\"headerlink\" title=\"取非极端元素、冒泡排序\"></a>取非极端元素、冒泡排序</h1><h2 id=\"取非极端元素\"><a href=\"#取非极端元素\" class=\"headerlink\" title=\"取非极端元素\"></a>取非极端元素</h2><p>算法： </p>\n<blockquote>\n<p>1, 从S中取出三个元素{x, y, z}<br>2, 确定并排除其中的最小值和最大值<br>3, 输出剩下的元素z</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ordinaryElements</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从n &gt;= 3个互异整数中,除最大、最小者以外,任取一个“常规元素”</span></span><br><span class=\"line\">  <span class=\"comment\">// 先比较a,b;再确定c对于(a,b)区间的关系</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = A[<span class=\"number\">0</span>], b = A[<span class=\"number\">1</span>], c = A[<span class=\"number\">2</span>];    <span class=\"comment\">// 从特定单元读取元素O(3)</span></span><br><span class=\"line\">  <span class=\"comment\">// 统一成区间(a, b), 用于c对其判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a &lt; b) &#123; &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    swap(&amp;a, &amp;b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c &lt; a) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &gt; b) <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">  <span class=\"comment\">// return 输出非极端数O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// =======================================</span></span><br><span class=\"line\">  <span class=\"comment\">// T(n) = O(3) + O(3) + O(1) = O(7) = O(1)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结论:无论输入规模有多大，所需执行该算法的执行时间都不变。</p>\n<h2 id=\"起泡排序问题\"><a href=\"#起泡排序问题\" class=\"headerlink\" title=\"起泡排序问题\"></a>起泡排序问题</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubblesort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">bool</span> sorted = <span class=\"literal\">false</span>; sorted = !sorted; n--)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n+<span class=\"number\">1</span>; i++) &#123;  <span class=\"comment\">// 自左向右逐对检查[0,n)各相邻元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[i<span class=\"number\">-1</span>] &gt; A[i]) &#123;         <span class=\"comment\">// 若逆序,则</span></span><br><span class=\"line\">        swap(&amp;A[i<span class=\"number\">-1</span>], &amp;A[i]);      <span class=\"comment\">// 令其交换位置</span></span><br><span class=\"line\">        sorted = <span class=\"literal\">false</span>;            <span class=\"comment\">// 消除全局有序标记</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h1><p>不变性：经k轮扫描交换后，最大的k个元素必然就位<br>单调性：经k轮扫描交换后，问题的规模缩减至n-k<br>正确性：经至多k轮扫描后，算法必然终止，且能给出正确答案</p>\n<p>基本且重要的技巧：通过挖掘不变性和单调性，证明算法的正确性</p>\n<h1 id=\"封底估计-Back-Of-The-Envelope-Calculation\"><a href=\"#封底估计-Back-Of-The-Envelope-Calculation\" class=\"headerlink\" title=\"封底估计 Back-Of-The-Envelope Calculation\"></a>封底估计 Back-Of-The-Envelope Calculation</h1><p>不需要工具</p>\n<p>787km 占据整个周长的1/50 =&gt; 整个周长4wkm</p>\n<p>抓住问题的主要方面，简洁得出总体规律</p>\n<p>在复杂度分析中，对象是时间。</p>\n<h1 id=\"封底估计实例\"><a href=\"#封底估计实例\" class=\"headerlink\" title=\"封底估计实例\"></a>封底估计实例</h1><blockquote>\n<ul>\n<li>一天: = 24hr <em> 60min </em> 60sec = 25 * 4000 = 10^5 sec</li>\n<li>一生: = 1世纪 = 100yr <em> 365 = 3 </em> 10^4 = 3 * 10^9 sec</li>\n<li>“50年” = 1.6 * 10^9 sec</li>\n<li>三生三世: 300yr = 10^10 = (1 googel)^(1/10) sec</li>\n<li>宇宙大爆炸至今: 10^21 = 10^(10^10)^2 sec<br>三生三世是10^10s<br>三生三世中的一天，相当于在一天中的1s<br>整个宇宙中的三生三世，就是在三生三世中的0.1s</li>\n</ul>\n</blockquote>\n<p>1亿 = 10^9</p>\n<p>复杂度和浮点运算能力flops相除，能得到某算法的时间。</p>\n<p>人口普查 n = 10^9<br>\\=====================<br>普通PC 1Ghz 10^9 flops<br>Bullesort: O(n^2) ==&gt; (10^9)^2 = 10^18 </p>\n<p>时间: 10^18 / 10^9  = 10^9<br>3<em>10^9 = 100yr, 10^9 = 30年<br>\\=====================<br>普通PC  10^9 flops<br>Mergesort: O(n\\</em>logn) =&gt; (10^9)*log(10^9) = 30 * 10^9</p>\n<p>时间; 30 * 10^9 / 10^9 = 30s<br>\\=====================<br>天河1A 10^15 flops<br>Bullesort:</p>\n<p>时间:20min: 10^3s<br>\\=====================</p>\n"},{"title":"邓俊辉<<数据结构>>-公开课-02-C","date":"2018-01-09T16:09:15.000Z","_content":"\n# 无序向量\n```cpp\ntemplate <typename T> class Vector {};    // template定义方式\n```\n\n模板和模板, 模板和类之间可以互相组合。意味着数据结构之间也可以互相组合\n\n```cpp\ntemplate <typename T> class Vector {\n};\nclass BinTree {\n};\ntemplate <typename T> class Tree {\n};\n\nint main() {\n  // ..\n  Vector<int> myVector;    // Right\n\n  Vector<float> myfVector;\n\n  Vector<BinTree> binForest;       // Combine with other class;\n  Vector<Tree<int>> binForest;     // Combine with template;\n  return 0;\n}\n```\n\n无序向量: 没有顺序, 甚至不可能排成顺序。\n\n## 元素访问(寻秩访问)\n\nv.get(r), v.put(e)\n\nA[r]\n\n重载下标运算符\"[]\"\n```cpp\n// 寻秩访问\n/* // my test\ntemplate <typename T>\nT& Vector<T>::operator[](std::size_t n) {    // 这个类 Vector<T>\n  assert(n < _size);\n  return _elem[n];\n}\n*/\n\ntemplate <typename T>\nT& Vector<T>::operator[](Rank r) const {   // 不改变数据成员, 定义成常量成员函数\n  // 在vector内部, 定义了秩的类型, 统一用Rank\n  assert(r < _size);   // 对下标秩进行溢出检测\n  return _elem[r];\n}\n```\n\n左值, 右值, `引用??`\n引用类型可作为左值。\n\n寻秩访问\n\n代码健壮性简化\n - assert 断言, \n```cpp\n#include <cassert>\nassert(r < _size);\n```\n\n## 插入\n\n```cpp\n// 插入\n/* my test\ntemplate <typename T>\nvoid Vector<T>::insert(const Rank r, const int value) {\n  // 检查移动后是否需要扩容\n  if (++_size > _capacity) expand();\n  // 将秩为r后的所有元素后移一位\n  for (Rank i = _size-2; i >= r; i--) {     // 为了不覆盖数据, 从尾部开始移动\n    _elem[i+1] = _elem[i];     // 向后移动一位\n  }\n  // 在r秩位置上填入要插入的值\n  _elem[r] = value;\n}\n*/\ntemplate <typename T>\nvoid Vector<T>::insert(const Rank r, T const &e) {\n  // value不应该是某一中特点的类型, 而应该利用template的特性\n  assert(0<= r && r < _size);\n  expand();  // 若有必要扩容  结合expand()中, _size < _capacity的定义\n  for (int i = _size; i > r; i--)  // 习惯把改变后的值的索引设置成i\n    _elem[i] = _elem[i-1];     // 后继元素顺次后移一个单元\n  _elem[r] = e; _size++;\n}\n```\n\nTemplate中泛型T的作用, \n模板类中函数的互相搭配,\n插入元素对vector操作的顺序 \n对\\_capacity和_size的影响。\n## 删除算法\n\n自前向后的迁移操作\n缩容\n\n```cpp\n// 删除操作\n/* my test code\ntemplate <typename T>\nvoid Vector<T>::del(const Rank lo, const Rank hi) {\n  for (Rank i = lo; i < _size; i++) {\n    // 清空区间元素\n    if (i < hi) { _elem[i] = 0;\n    } else {\n      // 将元素整体前移\n      _elem[i - (hi-lo)] = _elem[i];\n      // 前移后元素清空\n       _elem[i] = 0;\n    }\n  }\n  // 缩短规模和空间容量\n  _size -= hi-lo; _capacity -= hi-lo;\n}\n*/\n\n\ntemplate <typename T>\nint Vector<T>::del(Rank lo, Rank hi) {\n  // 处理退化情况\n  if (lo == hi) return 0;\n  const int length = hi - lo;\n  // 自前向后的迁移操作\n  while (lo < _size) {\n    if (hi < _capacity) {_elem[lo++] = _elem[hi++];\n    } else {_elem[lo++] = 0;}   // 处理hi++超出_capacityg容量的情况\n  }\n  // 更新规模或者缩容\n  _size -= length;\n  shrunk();\n  // 返回被删除元素的数目\n  return hi-lo;\n}\n```\n\n\n`1, 规模仍旧不变? 删除一段区间, 这里可以不改变规模, 相当于后面留空?` 改进成改变size的版本用于shrunk\n`2 , _elem[hi++]能够被一直索引到?` 超过_capacity时, 返回未定义的值\n`3, _elem[hi++]为什么不清空? `把_capacity的剩余空间对应元素赋值给它的方法清空\n`4, 看出移动操作过程中, 变量的同步性`\n`5, 缩容不光光是改变_capacity的值, 仍旧要释放空间`\n\t\n## 查找\n\n无序向量： T为可判等, 重载 \"==\"或者\"!=\"\n有序向量： T为可比较，重载 \"<\" 或  \">\"\n\n```cpp\n// 查找\n/* my test code\ntemplate <typename T>\nint Vector<T>::find(Rank lo, Rank hi, T const &e) const {\n  // 查找e在区间[lo,hi)内\n  // 从右往左查找\n  while (hi >= lo) {\n    if (_elem[hi] == e) {return hi;\n    }\n    hi--;\n  }\n  // 没有在while循环中返回, 不存在匹配元素\n  return -1;\n}\n*/\n\ntemplate <typename T>\nRank Vector<T>::find(Rank lo, Rank hi, T const &e) const {\n  // O(hi - lo) = O(n), 在命中多个元素时可返回秩最大者\n  while (lo < hi-- && e != _elem[hi]) {}   // 逆向查找\n  return hi;   // hi < lo失败; 否则hi即命中元素的秩\n}\n```\n\n`利用while本身的条件语句；后置递增的特性`\n`返回hi?` 将判断是否成功, 交给`上层的调用者`;以及成功后被`上层算法`进一步利用\n\n最好情况 O(1), 最坏情况O(n)\n输入敏感(input-sensitive): 最好情况和最坏情况相差悬殊的算法。\n## 删除单元素\n\n`视为区间操作的特例`\n```cpp\n// 删除单个元素\n/* my test code\ntemplate <typename T>\nvoid Vector<T>::remove(Rank r) {\n  // 单元素的删除操作, 视为区间操作的特例 [r, r+1)\n  remove(r, r+1);\n}\n*/\ntemplate <typename T>     // 删除向量中秩为r的元素, 0 <= r < size\nT& Vector<T>::remove(Rank r) {  // O(n-r)\n  T& old_t = _elem[r];    // 备份被删除的元素\n  remove(r, r+1);         // 调用区间删除算法\n  return old_t;           // 返回被删除元素\n}\n```\n\n\n`颠倒考虑`\n\n复杂度分析:\n每次循环的耗时正比于删除区间的后缀长度 O(n-hi)\n循环的次数等于区间宽度 O(hi-lo)\n总体 O(n^2) 复杂度\n\nright, but not fast!!\n\n\n## 唯一化\n\n\n`实现`\n\n```cpp\n// 唯一化\n/*\ntemplate <typename T>\nvoid Vector<T>::deduplicate(Rank lo, Rank hi) {\n  // 对向量中的元素遍历,\n  for (Rank i = lo; i < hi; i++) {\n    // find右往左查, 返回lo-1代表失败\n    // 删除当前元素, 不再对后续元素查找\n    if (find(lo, i, _elem[i]) != lo-1) {remove(i); break;}\n    if (find(i+1, hi, _elem[i]) != i) { remove(i);}\n  }\n}\n*/\n\ntemplate <typename T>\nint Vector<T>::deduplicate() {\n  int old_size = _size;\n  Rank i = 1;\n  while (i < _size) {\n    find(0, i, _elem[i]) < 0 ?\n                             i++  // 小于0说明无雷同, 继续查找\n                             : remove(i);    // 删除雷同者(至多一个?!)\n  }\n  return  old_size - _size;      // 返回规模的变化量\n}\n```\n\n`记录规模?` 考虑返回值怎么设计，这里我估计会在更高级的接口中用到\n`从1开始?` 因为要在当前i的前缀中查找\n`至多一个?` 删除至多一个, 实际不一定至多一个\n`为什么不需要改变_size和_capacity大小?` 说明remove为更底层的操作, 在底层操作中, 定义底层的数据成员的修改, 这样做的话, 在更高级的操作中, 可以不去管这些细节。也是封装调用的好处。\n\n`**正确性证明**`：\n**不变性**: 对于当前元素V[i]的前缀V[0, i)中, 各元素彼此互异\n初始时, i = 1, 两个元素成立,...\n\n**单调性**:\n1)前缀单调非降, 后缀减少, 且前缀迟早增至_size;   // 与1)结合\n2)后缀单调下降, _size迟早减至0;     // 2)更容易把握\n\n故算法必然终止, 至多迭代O(n)轮\n\n`复杂度`\n\n主要来自find() 和 remove();\nfind()从右向左针对前缀, remove()从左向右针对后缀, 因此每次while循环不超过O(n);\nwhile循环会进行n次, \n总体复杂度为 O(n^2)\n\n\n`练习三种优化方案（未完成）`\n\n1, 仿照uniquify()高效版本的思路.\n元素移动的次数可以降至O(n), 但比较次数依然是O(n^2); 而且破坏稳定性\n2, 先对需要删除的重复元素标记, 然后统一删除.\n稳定性保持, 但因查找长度更长, 从而导致更多的对比操作\n3, V.sort().uniquify(): 简明实现最优的O(nlogn)\n\n## 遍历\n\nvisit\n\n函数指针机制 ?? \n\n函数对象机制 ??\n\n两种方法优劣\n\n实例: 将向量中所有的元素统一加一\n重载操作符 \"++\"\n重载操作符 \"()\"\n\n练习更为复杂的遍历\n\n减1\n\n```cpp\n// 遍历运用函数对象机制，对各个元素减1\n/* my test code\n// 单个T类型元素减1的类\ntemplate <typename T>\nVector<T>::struct Decrease {\n  virtual void operator() {T &e--;}     // 重载()操作, 类对象当作函数来用\n};\n\ntemplate <typename T>\nvoid decrease(Vector<T>& V) {\n  V.traverse(Decrease<T>());\n}\n// 泛型模板在调用的时候都要带<type>\n*/\n\ntemplate <typename T>\nstruct Decrease {\n  virtual void operator()(T &e) {e--;}\n};\n\n/*\n// 为什么不是Vector<T>::struct Decrease?\n// Decrease对象, 不需要声明在vector类内, 这是借用函数对象作为traverse的参数, traverse声明在类内, 这个参数的类型是VST, 即函数对象。\n// 为什么需要virtual\n// void operator()(T &e)?\n// 第一个括号是代表重载运算符是(), 第二个是该重载函数的参数列表\n*/\n\ntemplate <typename T>\nvoid decrease(Vector<T> & V) {\n  V.traverse(Decrease<T>());\n}\n\n// 在类的外部定义decrease函数, 它具有泛型T, 参数为Vector<T>& 类型\n// 函数内部, 实例V调用traverse方法, 通过多次调用这个函数对象去遍历所有元素\n\n// 终极问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?\n\n```\n\n`本质问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?`\n\n加倍 \n\n求和\n","source":"_posts/dsacpp/02-C.md","raw":"---\ntitle: 邓俊辉<<数据结构>>-公开课-02-C\ndate: 2018-01-10 00:09:15\ntags: [数据结构, 向量]\n---\n\n# 无序向量\n```cpp\ntemplate <typename T> class Vector {};    // template定义方式\n```\n\n模板和模板, 模板和类之间可以互相组合。意味着数据结构之间也可以互相组合\n\n```cpp\ntemplate <typename T> class Vector {\n};\nclass BinTree {\n};\ntemplate <typename T> class Tree {\n};\n\nint main() {\n  // ..\n  Vector<int> myVector;    // Right\n\n  Vector<float> myfVector;\n\n  Vector<BinTree> binForest;       // Combine with other class;\n  Vector<Tree<int>> binForest;     // Combine with template;\n  return 0;\n}\n```\n\n无序向量: 没有顺序, 甚至不可能排成顺序。\n\n## 元素访问(寻秩访问)\n\nv.get(r), v.put(e)\n\nA[r]\n\n重载下标运算符\"[]\"\n```cpp\n// 寻秩访问\n/* // my test\ntemplate <typename T>\nT& Vector<T>::operator[](std::size_t n) {    // 这个类 Vector<T>\n  assert(n < _size);\n  return _elem[n];\n}\n*/\n\ntemplate <typename T>\nT& Vector<T>::operator[](Rank r) const {   // 不改变数据成员, 定义成常量成员函数\n  // 在vector内部, 定义了秩的类型, 统一用Rank\n  assert(r < _size);   // 对下标秩进行溢出检测\n  return _elem[r];\n}\n```\n\n左值, 右值, `引用??`\n引用类型可作为左值。\n\n寻秩访问\n\n代码健壮性简化\n - assert 断言, \n```cpp\n#include <cassert>\nassert(r < _size);\n```\n\n## 插入\n\n```cpp\n// 插入\n/* my test\ntemplate <typename T>\nvoid Vector<T>::insert(const Rank r, const int value) {\n  // 检查移动后是否需要扩容\n  if (++_size > _capacity) expand();\n  // 将秩为r后的所有元素后移一位\n  for (Rank i = _size-2; i >= r; i--) {     // 为了不覆盖数据, 从尾部开始移动\n    _elem[i+1] = _elem[i];     // 向后移动一位\n  }\n  // 在r秩位置上填入要插入的值\n  _elem[r] = value;\n}\n*/\ntemplate <typename T>\nvoid Vector<T>::insert(const Rank r, T const &e) {\n  // value不应该是某一中特点的类型, 而应该利用template的特性\n  assert(0<= r && r < _size);\n  expand();  // 若有必要扩容  结合expand()中, _size < _capacity的定义\n  for (int i = _size; i > r; i--)  // 习惯把改变后的值的索引设置成i\n    _elem[i] = _elem[i-1];     // 后继元素顺次后移一个单元\n  _elem[r] = e; _size++;\n}\n```\n\nTemplate中泛型T的作用, \n模板类中函数的互相搭配,\n插入元素对vector操作的顺序 \n对\\_capacity和_size的影响。\n## 删除算法\n\n自前向后的迁移操作\n缩容\n\n```cpp\n// 删除操作\n/* my test code\ntemplate <typename T>\nvoid Vector<T>::del(const Rank lo, const Rank hi) {\n  for (Rank i = lo; i < _size; i++) {\n    // 清空区间元素\n    if (i < hi) { _elem[i] = 0;\n    } else {\n      // 将元素整体前移\n      _elem[i - (hi-lo)] = _elem[i];\n      // 前移后元素清空\n       _elem[i] = 0;\n    }\n  }\n  // 缩短规模和空间容量\n  _size -= hi-lo; _capacity -= hi-lo;\n}\n*/\n\n\ntemplate <typename T>\nint Vector<T>::del(Rank lo, Rank hi) {\n  // 处理退化情况\n  if (lo == hi) return 0;\n  const int length = hi - lo;\n  // 自前向后的迁移操作\n  while (lo < _size) {\n    if (hi < _capacity) {_elem[lo++] = _elem[hi++];\n    } else {_elem[lo++] = 0;}   // 处理hi++超出_capacityg容量的情况\n  }\n  // 更新规模或者缩容\n  _size -= length;\n  shrunk();\n  // 返回被删除元素的数目\n  return hi-lo;\n}\n```\n\n\n`1, 规模仍旧不变? 删除一段区间, 这里可以不改变规模, 相当于后面留空?` 改进成改变size的版本用于shrunk\n`2 , _elem[hi++]能够被一直索引到?` 超过_capacity时, 返回未定义的值\n`3, _elem[hi++]为什么不清空? `把_capacity的剩余空间对应元素赋值给它的方法清空\n`4, 看出移动操作过程中, 变量的同步性`\n`5, 缩容不光光是改变_capacity的值, 仍旧要释放空间`\n\t\n## 查找\n\n无序向量： T为可判等, 重载 \"==\"或者\"!=\"\n有序向量： T为可比较，重载 \"<\" 或  \">\"\n\n```cpp\n// 查找\n/* my test code\ntemplate <typename T>\nint Vector<T>::find(Rank lo, Rank hi, T const &e) const {\n  // 查找e在区间[lo,hi)内\n  // 从右往左查找\n  while (hi >= lo) {\n    if (_elem[hi] == e) {return hi;\n    }\n    hi--;\n  }\n  // 没有在while循环中返回, 不存在匹配元素\n  return -1;\n}\n*/\n\ntemplate <typename T>\nRank Vector<T>::find(Rank lo, Rank hi, T const &e) const {\n  // O(hi - lo) = O(n), 在命中多个元素时可返回秩最大者\n  while (lo < hi-- && e != _elem[hi]) {}   // 逆向查找\n  return hi;   // hi < lo失败; 否则hi即命中元素的秩\n}\n```\n\n`利用while本身的条件语句；后置递增的特性`\n`返回hi?` 将判断是否成功, 交给`上层的调用者`;以及成功后被`上层算法`进一步利用\n\n最好情况 O(1), 最坏情况O(n)\n输入敏感(input-sensitive): 最好情况和最坏情况相差悬殊的算法。\n## 删除单元素\n\n`视为区间操作的特例`\n```cpp\n// 删除单个元素\n/* my test code\ntemplate <typename T>\nvoid Vector<T>::remove(Rank r) {\n  // 单元素的删除操作, 视为区间操作的特例 [r, r+1)\n  remove(r, r+1);\n}\n*/\ntemplate <typename T>     // 删除向量中秩为r的元素, 0 <= r < size\nT& Vector<T>::remove(Rank r) {  // O(n-r)\n  T& old_t = _elem[r];    // 备份被删除的元素\n  remove(r, r+1);         // 调用区间删除算法\n  return old_t;           // 返回被删除元素\n}\n```\n\n\n`颠倒考虑`\n\n复杂度分析:\n每次循环的耗时正比于删除区间的后缀长度 O(n-hi)\n循环的次数等于区间宽度 O(hi-lo)\n总体 O(n^2) 复杂度\n\nright, but not fast!!\n\n\n## 唯一化\n\n\n`实现`\n\n```cpp\n// 唯一化\n/*\ntemplate <typename T>\nvoid Vector<T>::deduplicate(Rank lo, Rank hi) {\n  // 对向量中的元素遍历,\n  for (Rank i = lo; i < hi; i++) {\n    // find右往左查, 返回lo-1代表失败\n    // 删除当前元素, 不再对后续元素查找\n    if (find(lo, i, _elem[i]) != lo-1) {remove(i); break;}\n    if (find(i+1, hi, _elem[i]) != i) { remove(i);}\n  }\n}\n*/\n\ntemplate <typename T>\nint Vector<T>::deduplicate() {\n  int old_size = _size;\n  Rank i = 1;\n  while (i < _size) {\n    find(0, i, _elem[i]) < 0 ?\n                             i++  // 小于0说明无雷同, 继续查找\n                             : remove(i);    // 删除雷同者(至多一个?!)\n  }\n  return  old_size - _size;      // 返回规模的变化量\n}\n```\n\n`记录规模?` 考虑返回值怎么设计，这里我估计会在更高级的接口中用到\n`从1开始?` 因为要在当前i的前缀中查找\n`至多一个?` 删除至多一个, 实际不一定至多一个\n`为什么不需要改变_size和_capacity大小?` 说明remove为更底层的操作, 在底层操作中, 定义底层的数据成员的修改, 这样做的话, 在更高级的操作中, 可以不去管这些细节。也是封装调用的好处。\n\n`**正确性证明**`：\n**不变性**: 对于当前元素V[i]的前缀V[0, i)中, 各元素彼此互异\n初始时, i = 1, 两个元素成立,...\n\n**单调性**:\n1)前缀单调非降, 后缀减少, 且前缀迟早增至_size;   // 与1)结合\n2)后缀单调下降, _size迟早减至0;     // 2)更容易把握\n\n故算法必然终止, 至多迭代O(n)轮\n\n`复杂度`\n\n主要来自find() 和 remove();\nfind()从右向左针对前缀, remove()从左向右针对后缀, 因此每次while循环不超过O(n);\nwhile循环会进行n次, \n总体复杂度为 O(n^2)\n\n\n`练习三种优化方案（未完成）`\n\n1, 仿照uniquify()高效版本的思路.\n元素移动的次数可以降至O(n), 但比较次数依然是O(n^2); 而且破坏稳定性\n2, 先对需要删除的重复元素标记, 然后统一删除.\n稳定性保持, 但因查找长度更长, 从而导致更多的对比操作\n3, V.sort().uniquify(): 简明实现最优的O(nlogn)\n\n## 遍历\n\nvisit\n\n函数指针机制 ?? \n\n函数对象机制 ??\n\n两种方法优劣\n\n实例: 将向量中所有的元素统一加一\n重载操作符 \"++\"\n重载操作符 \"()\"\n\n练习更为复杂的遍历\n\n减1\n\n```cpp\n// 遍历运用函数对象机制，对各个元素减1\n/* my test code\n// 单个T类型元素减1的类\ntemplate <typename T>\nVector<T>::struct Decrease {\n  virtual void operator() {T &e--;}     // 重载()操作, 类对象当作函数来用\n};\n\ntemplate <typename T>\nvoid decrease(Vector<T>& V) {\n  V.traverse(Decrease<T>());\n}\n// 泛型模板在调用的时候都要带<type>\n*/\n\ntemplate <typename T>\nstruct Decrease {\n  virtual void operator()(T &e) {e--;}\n};\n\n/*\n// 为什么不是Vector<T>::struct Decrease?\n// Decrease对象, 不需要声明在vector类内, 这是借用函数对象作为traverse的参数, traverse声明在类内, 这个参数的类型是VST, 即函数对象。\n// 为什么需要virtual\n// void operator()(T &e)?\n// 第一个括号是代表重载运算符是(), 第二个是该重载函数的参数列表\n*/\n\ntemplate <typename T>\nvoid decrease(Vector<T> & V) {\n  V.traverse(Decrease<T>());\n}\n\n// 在类的外部定义decrease函数, 它具有泛型T, 参数为Vector<T>& 类型\n// 函数内部, 实例V调用traverse方法, 通过多次调用这个函数对象去遍历所有元素\n\n// 终极问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?\n\n```\n\n`本质问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?`\n\n加倍 \n\n求和\n","slug":"dsacpp/02-C","published":1,"updated":"2018-01-09T16:26:59.165Z","_id":"cjc7ukv0s0023fadrlwddseyr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"无序向量\"><a href=\"#无序向量\" class=\"headerlink\" title=\"无序向量\"></a>无序向量</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span>&#125;;    <span class=\"comment\">// template定义方式</span></span><br></pre></td></tr></table></figure>\n<p>模板和模板, 模板和类之间可以互相组合。意味着数据结构之间也可以互相组合</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinTree</span> &#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> &#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">  Vector&lt;<span class=\"keyword\">int</span>&gt; myVector;    <span class=\"comment\">// Right</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Vector&lt;<span class=\"keyword\">float</span>&gt; myfVector;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vector&lt;BinTree&gt; binForest;       <span class=\"comment\">// Combine with other class;</span></span><br><span class=\"line\">  Vector&lt;Tree&lt;<span class=\"keyword\">int</span>&gt;&gt; binForest;     <span class=\"comment\">// Combine with template;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无序向量: 没有顺序, 甚至不可能排成顺序。</p>\n<h2 id=\"元素访问-寻秩访问\"><a href=\"#元素访问-寻秩访问\" class=\"headerlink\" title=\"元素访问(寻秩访问)\"></a>元素访问(寻秩访问)</h2><p>v.get(r), v.put(e)</p>\n<p>A[r]</p>\n<p>重载下标运算符”[]”<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 寻秩访问</span></span><br><span class=\"line\"><span class=\"comment\">/* // my test</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">T&amp; Vector&lt;T&gt;::operator[](std::size_t n) &#123;    // 这个类 Vector&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  assert(n &lt; _size);</span></span><br><span class=\"line\"><span class=\"comment\">  return _elem[n];</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; Vector&lt;T&gt;::<span class=\"keyword\">operator</span>[](Rank r) <span class=\"keyword\">const</span> &#123;   <span class=\"comment\">// 不改变数据成员, 定义成常量成员函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 在vector内部, 定义了秩的类型, 统一用Rank</span></span><br><span class=\"line\">  assert(r &lt; _size);   <span class=\"comment\">// 对下标秩进行溢出检测</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _elem[r];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>左值, 右值, <code>引用??</code><br>引用类型可作为左值。</p>\n<p>寻秩访问</p>\n<p>代码健壮性简化</p>\n<ul>\n<li>assert 断言, <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\">assert(r &lt; _size);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"comment\">/* my test</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::insert(const Rank r, const int value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 检查移动后是否需要扩容</span></span><br><span class=\"line\"><span class=\"comment\">  if (++_size &gt; _capacity) expand();</span></span><br><span class=\"line\"><span class=\"comment\">  // 将秩为r后的所有元素后移一位</span></span><br><span class=\"line\"><span class=\"comment\">  for (Rank i = _size-2; i &gt;= r; i--) &#123;     // 为了不覆盖数据, 从尾部开始移动</span></span><br><span class=\"line\"><span class=\"comment\">    _elem[i+1] = _elem[i];     // 向后移动一位</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  // 在r秩位置上填入要插入的值</span></span><br><span class=\"line\"><span class=\"comment\">  _elem[r] = value;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Vector&lt;T&gt;::insert(<span class=\"keyword\">const</span> Rank r, T <span class=\"keyword\">const</span> &amp;e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// value不应该是某一中特点的类型, 而应该利用template的特性</span></span><br><span class=\"line\">  assert(<span class=\"number\">0</span>&lt;= r &amp;&amp; r &lt; _size);</span><br><span class=\"line\">  expand();  <span class=\"comment\">// 若有必要扩容  结合expand()中, _size &lt; _capacity的定义</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = _size; i &gt; r; i--)  <span class=\"comment\">// 习惯把改变后的值的索引设置成i</span></span><br><span class=\"line\">    _elem[i] = _elem[i<span class=\"number\">-1</span>];     <span class=\"comment\">// 后继元素顺次后移一个单元</span></span><br><span class=\"line\">  _elem[r] = e; _size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Template中泛型T的作用,<br>模板类中函数的互相搭配,<br>插入元素对vector操作的顺序<br>对_capacity和_size的影响。</p>\n<h2 id=\"删除算法\"><a href=\"#删除算法\" class=\"headerlink\" title=\"删除算法\"></a>删除算法</h2><p>自前向后的迁移操作<br>缩容</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除操作</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::del(const Rank lo, const Rank hi) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  for (Rank i = lo; i &lt; _size; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // 清空区间元素</span></span><br><span class=\"line\"><span class=\"comment\">    if (i &lt; hi) &#123; _elem[i] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      // 将元素整体前移</span></span><br><span class=\"line\"><span class=\"comment\">      _elem[i - (hi-lo)] = _elem[i];</span></span><br><span class=\"line\"><span class=\"comment\">      // 前移后元素清空</span></span><br><span class=\"line\"><span class=\"comment\">       _elem[i] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  // 缩短规模和空间容量</span></span><br><span class=\"line\"><span class=\"comment\">  _size -= hi-lo; _capacity -= hi-lo;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Vector&lt;T&gt;::del(Rank lo, Rank hi) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理退化情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo == hi) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> length = hi - lo;</span><br><span class=\"line\">  <span class=\"comment\">// 自前向后的迁移操作</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; _size) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hi &lt; _capacity) &#123;_elem[lo++] = _elem[hi++];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;_elem[lo++] = <span class=\"number\">0</span>;&#125;   <span class=\"comment\">// 处理hi++超出_capacityg容量的情况</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 更新规模或者缩容</span></span><br><span class=\"line\">  _size -= length;</span><br><span class=\"line\">  shrunk();</span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除元素的数目</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hi-lo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1, 规模仍旧不变? 删除一段区间, 这里可以不改变规模, 相当于后面留空?</code> 改进成改变size的版本用于shrunk<br><code>2 , _elem[hi++]能够被一直索引到?</code> 超过_capacity时, 返回未定义的值<br><code>3, _elem[hi++]为什么不清空?</code>把_capacity的剩余空间对应元素赋值给它的方法清空<br><code>4, 看出移动操作过程中, 变量的同步性</code><br><code>5, 缩容不光光是改变_capacity的值, 仍旧要释放空间</code></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>无序向量： T为可判等, 重载 “==”或者”!=”<br>有序向量： T为可比较，重载 “&lt;” 或  “&gt;”</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">int Vector&lt;T&gt;::find(Rank lo, Rank hi, T const &amp;e) const &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 查找e在区间[lo,hi)内</span></span><br><span class=\"line\"><span class=\"comment\">  // 从右往左查找</span></span><br><span class=\"line\"><span class=\"comment\">  while (hi &gt;= lo) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    if (_elem[hi] == e) &#123;return hi;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    hi--;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  // 没有在while循环中返回, 不存在匹配元素</span></span><br><span class=\"line\"><span class=\"comment\">  return -1;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Rank Vector&lt;T&gt;::find(Rank lo, Rank hi, T <span class=\"keyword\">const</span> &amp;e) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// O(hi - lo) = O(n), 在命中多个元素时可返回秩最大者</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; hi-- &amp;&amp; e != _elem[hi]) &#123;&#125;   <span class=\"comment\">// 逆向查找</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hi;   <span class=\"comment\">// hi &lt; lo失败; 否则hi即命中元素的秩</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>利用while本身的条件语句；后置递增的特性</code><br><code>返回hi?</code> 将判断是否成功, 交给<code>上层的调用者</code>;以及成功后被<code>上层算法</code>进一步利用</p>\n<p>最好情况 O(1), 最坏情况O(n)<br>输入敏感(input-sensitive): 最好情况和最坏情况相差悬殊的算法。</p>\n<h2 id=\"删除单元素\"><a href=\"#删除单元素\" class=\"headerlink\" title=\"删除单元素\"></a>删除单元素</h2><p><code>视为区间操作的特例</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除单个元素</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::remove(Rank r) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 单元素的删除操作, 视为区间操作的特例 [r, r+1)</span></span><br><span class=\"line\"><span class=\"comment\">  remove(r, r+1);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;     <span class=\"comment\">// 删除向量中秩为r的元素, 0 &lt;= r &lt; size</span></span><br><span class=\"line\">T&amp; Vector&lt;T&gt;::remove(Rank r) &#123;  <span class=\"comment\">// O(n-r)</span></span><br><span class=\"line\">  T&amp; <span class=\"keyword\">old_t</span> = _elem[r];    <span class=\"comment\">// 备份被删除的元素</span></span><br><span class=\"line\">  remove(r, r+<span class=\"number\">1</span>);         <span class=\"comment\">// 调用区间删除算法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">old_t</span>;           <span class=\"comment\">// 返回被删除元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>颠倒考虑</code></p>\n<p>复杂度分析:<br>每次循环的耗时正比于删除区间的后缀长度 O(n-hi)<br>循环的次数等于区间宽度 O(hi-lo)<br>总体 O(n^2) 复杂度</p>\n<p>right, but not fast!!</p>\n<h2 id=\"唯一化\"><a href=\"#唯一化\" class=\"headerlink\" title=\"唯一化\"></a>唯一化</h2><p><code>实现</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 唯一化</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::deduplicate(Rank lo, Rank hi) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 对向量中的元素遍历,</span></span><br><span class=\"line\"><span class=\"comment\">  for (Rank i = lo; i &lt; hi; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // find右往左查, 返回lo-1代表失败</span></span><br><span class=\"line\"><span class=\"comment\">    // 删除当前元素, 不再对后续元素查找</span></span><br><span class=\"line\"><span class=\"comment\">    if (find(lo, i, _elem[i]) != lo-1) &#123;remove(i); break;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    if (find(i+1, hi, _elem[i]) != i) &#123; remove(i);&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Vector&lt;T&gt;::deduplicate() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> old_size = _size;</span><br><span class=\"line\">  Rank i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; _size) &#123;</span><br><span class=\"line\">    find(<span class=\"number\">0</span>, i, _elem[i]) &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                             i++  <span class=\"comment\">// 小于0说明无雷同, 继续查找</span></span><br><span class=\"line\">                             : remove(i);    <span class=\"comment\">// 删除雷同者(至多一个?!)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  old_size - _size;      <span class=\"comment\">// 返回规模的变化量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>记录规模?</code> 考虑返回值怎么设计，这里我估计会在更高级的接口中用到<br><code>从1开始?</code> 因为要在当前i的前缀中查找<br><code>至多一个?</code> 删除至多一个, 实际不一定至多一个<br><code>为什么不需要改变_size和_capacity大小?</code> 说明remove为更底层的操作, 在底层操作中, 定义底层的数据成员的修改, 这样做的话, 在更高级的操作中, 可以不去管这些细节。也是封装调用的好处。</p>\n<p><code>**正确性证明**</code>：<br><strong>不变性</strong>: 对于当前元素V[i]的前缀V[0, i)中, 各元素彼此互异<br>初始时, i = 1, 两个元素成立,…</p>\n<p><strong>单调性</strong>:<br>1)前缀单调非降, 后缀减少, 且前缀迟早增至_size;   // 与1)结合<br>2)后缀单调下降, _size迟早减至0;     // 2)更容易把握</p>\n<p>故算法必然终止, 至多迭代O(n)轮</p>\n<p><code>复杂度</code></p>\n<p>主要来自find() 和 remove();<br>find()从右向左针对前缀, remove()从左向右针对后缀, 因此每次while循环不超过O(n);<br>while循环会进行n次,<br>总体复杂度为 O(n^2)</p>\n<p><code>练习三种优化方案（未完成）</code></p>\n<p>1, 仿照uniquify()高效版本的思路.<br>元素移动的次数可以降至O(n), 但比较次数依然是O(n^2); 而且破坏稳定性<br>2, 先对需要删除的重复元素标记, 然后统一删除.<br>稳定性保持, 但因查找长度更长, 从而导致更多的对比操作<br>3, V.sort().uniquify(): 简明实现最优的O(nlogn)</p>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><p>visit</p>\n<p>函数指针机制 ?? </p>\n<p>函数对象机制 ??</p>\n<p>两种方法优劣</p>\n<p>实例: 将向量中所有的元素统一加一<br>重载操作符 “++”<br>重载操作符 “()”</p>\n<p>练习更为复杂的遍历</p>\n<p>减1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历运用函数对象机制，对各个元素减1</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">// 单个T类型元素减1的类</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">Vector&lt;T&gt;::struct Decrease &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  virtual void operator() &#123;T &amp;e--;&#125;     // 重载()操作, 类对象当作函数来用</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void decrease(Vector&lt;T&gt;&amp; V) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  V.traverse(Decrease&lt;T&gt;());</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 泛型模板在调用的时候都要带&lt;type&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Decrease</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(T &amp;e)</span> </span>&#123;e--;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么不是Vector&lt;T&gt;::struct Decrease?</span></span><br><span class=\"line\"><span class=\"comment\">// Decrease对象, 不需要声明在vector类内, 这是借用函数对象作为traverse的参数, traverse声明在类内, 这个参数的类型是VST, 即函数对象。</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么需要virtual</span></span><br><span class=\"line\"><span class=\"comment\">// void operator()(T &amp;e)?</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个括号是代表重载运算符是(), 第二个是该重载函数的参数列表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Vector&lt;T&gt; &amp; V)</span> </span>&#123;</span><br><span class=\"line\">  V.traverse(Decrease&lt;T&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在类的外部定义decrease函数, 它具有泛型T, 参数为Vector&lt;T&gt;&amp; 类型</span></span><br><span class=\"line\"><span class=\"comment\">// 函数内部, 实例V调用traverse方法, 通过多次调用这个函数对象去遍历所有元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 终极问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?</span></span><br></pre></td></tr></table></figure>\n<p><code>本质问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?</code></p>\n<p>加倍 </p>\n<p>求和</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"无序向量\"><a href=\"#无序向量\" class=\"headerlink\" title=\"无序向量\"></a>无序向量</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span>&#125;;    <span class=\"comment\">// template定义方式</span></span><br></pre></td></tr></table></figure>\n<p>模板和模板, 模板和类之间可以互相组合。意味着数据结构之间也可以互相组合</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinTree</span> &#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> &#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">  Vector&lt;<span class=\"keyword\">int</span>&gt; myVector;    <span class=\"comment\">// Right</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Vector&lt;<span class=\"keyword\">float</span>&gt; myfVector;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vector&lt;BinTree&gt; binForest;       <span class=\"comment\">// Combine with other class;</span></span><br><span class=\"line\">  Vector&lt;Tree&lt;<span class=\"keyword\">int</span>&gt;&gt; binForest;     <span class=\"comment\">// Combine with template;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无序向量: 没有顺序, 甚至不可能排成顺序。</p>\n<h2 id=\"元素访问-寻秩访问\"><a href=\"#元素访问-寻秩访问\" class=\"headerlink\" title=\"元素访问(寻秩访问)\"></a>元素访问(寻秩访问)</h2><p>v.get(r), v.put(e)</p>\n<p>A[r]</p>\n<p>重载下标运算符”[]”<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 寻秩访问</span></span><br><span class=\"line\"><span class=\"comment\">/* // my test</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">T&amp; Vector&lt;T&gt;::operator[](std::size_t n) &#123;    // 这个类 Vector&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  assert(n &lt; _size);</span></span><br><span class=\"line\"><span class=\"comment\">  return _elem[n];</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; Vector&lt;T&gt;::<span class=\"keyword\">operator</span>[](Rank r) <span class=\"keyword\">const</span> &#123;   <span class=\"comment\">// 不改变数据成员, 定义成常量成员函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 在vector内部, 定义了秩的类型, 统一用Rank</span></span><br><span class=\"line\">  assert(r &lt; _size);   <span class=\"comment\">// 对下标秩进行溢出检测</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _elem[r];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>左值, 右值, <code>引用??</code><br>引用类型可作为左值。</p>\n<p>寻秩访问</p>\n<p>代码健壮性简化</p>\n<ul>\n<li>assert 断言, <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\">assert(r &lt; _size);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"comment\">/* my test</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::insert(const Rank r, const int value) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 检查移动后是否需要扩容</span></span><br><span class=\"line\"><span class=\"comment\">  if (++_size &gt; _capacity) expand();</span></span><br><span class=\"line\"><span class=\"comment\">  // 将秩为r后的所有元素后移一位</span></span><br><span class=\"line\"><span class=\"comment\">  for (Rank i = _size-2; i &gt;= r; i--) &#123;     // 为了不覆盖数据, 从尾部开始移动</span></span><br><span class=\"line\"><span class=\"comment\">    _elem[i+1] = _elem[i];     // 向后移动一位</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  // 在r秩位置上填入要插入的值</span></span><br><span class=\"line\"><span class=\"comment\">  _elem[r] = value;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Vector&lt;T&gt;::insert(<span class=\"keyword\">const</span> Rank r, T <span class=\"keyword\">const</span> &amp;e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// value不应该是某一中特点的类型, 而应该利用template的特性</span></span><br><span class=\"line\">  assert(<span class=\"number\">0</span>&lt;= r &amp;&amp; r &lt; _size);</span><br><span class=\"line\">  expand();  <span class=\"comment\">// 若有必要扩容  结合expand()中, _size &lt; _capacity的定义</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = _size; i &gt; r; i--)  <span class=\"comment\">// 习惯把改变后的值的索引设置成i</span></span><br><span class=\"line\">    _elem[i] = _elem[i<span class=\"number\">-1</span>];     <span class=\"comment\">// 后继元素顺次后移一个单元</span></span><br><span class=\"line\">  _elem[r] = e; _size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Template中泛型T的作用,<br>模板类中函数的互相搭配,<br>插入元素对vector操作的顺序<br>对_capacity和_size的影响。</p>\n<h2 id=\"删除算法\"><a href=\"#删除算法\" class=\"headerlink\" title=\"删除算法\"></a>删除算法</h2><p>自前向后的迁移操作<br>缩容</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除操作</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::del(const Rank lo, const Rank hi) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  for (Rank i = lo; i &lt; _size; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // 清空区间元素</span></span><br><span class=\"line\"><span class=\"comment\">    if (i &lt; hi) &#123; _elem[i] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      // 将元素整体前移</span></span><br><span class=\"line\"><span class=\"comment\">      _elem[i - (hi-lo)] = _elem[i];</span></span><br><span class=\"line\"><span class=\"comment\">      // 前移后元素清空</span></span><br><span class=\"line\"><span class=\"comment\">       _elem[i] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  // 缩短规模和空间容量</span></span><br><span class=\"line\"><span class=\"comment\">  _size -= hi-lo; _capacity -= hi-lo;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Vector&lt;T&gt;::del(Rank lo, Rank hi) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理退化情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lo == hi) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> length = hi - lo;</span><br><span class=\"line\">  <span class=\"comment\">// 自前向后的迁移操作</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; _size) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hi &lt; _capacity) &#123;_elem[lo++] = _elem[hi++];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;_elem[lo++] = <span class=\"number\">0</span>;&#125;   <span class=\"comment\">// 处理hi++超出_capacityg容量的情况</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 更新规模或者缩容</span></span><br><span class=\"line\">  _size -= length;</span><br><span class=\"line\">  shrunk();</span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除元素的数目</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hi-lo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>1, 规模仍旧不变? 删除一段区间, 这里可以不改变规模, 相当于后面留空?</code> 改进成改变size的版本用于shrunk<br><code>2 , _elem[hi++]能够被一直索引到?</code> 超过_capacity时, 返回未定义的值<br><code>3, _elem[hi++]为什么不清空?</code>把_capacity的剩余空间对应元素赋值给它的方法清空<br><code>4, 看出移动操作过程中, 变量的同步性</code><br><code>5, 缩容不光光是改变_capacity的值, 仍旧要释放空间</code></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>无序向量： T为可判等, 重载 “==”或者”!=”<br>有序向量： T为可比较，重载 “&lt;” 或  “&gt;”</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">int Vector&lt;T&gt;::find(Rank lo, Rank hi, T const &amp;e) const &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 查找e在区间[lo,hi)内</span></span><br><span class=\"line\"><span class=\"comment\">  // 从右往左查找</span></span><br><span class=\"line\"><span class=\"comment\">  while (hi &gt;= lo) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    if (_elem[hi] == e) &#123;return hi;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    hi--;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  // 没有在while循环中返回, 不存在匹配元素</span></span><br><span class=\"line\"><span class=\"comment\">  return -1;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Rank Vector&lt;T&gt;::find(Rank lo, Rank hi, T <span class=\"keyword\">const</span> &amp;e) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// O(hi - lo) = O(n), 在命中多个元素时可返回秩最大者</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lo &lt; hi-- &amp;&amp; e != _elem[hi]) &#123;&#125;   <span class=\"comment\">// 逆向查找</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hi;   <span class=\"comment\">// hi &lt; lo失败; 否则hi即命中元素的秩</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>利用while本身的条件语句；后置递增的特性</code><br><code>返回hi?</code> 将判断是否成功, 交给<code>上层的调用者</code>;以及成功后被<code>上层算法</code>进一步利用</p>\n<p>最好情况 O(1), 最坏情况O(n)<br>输入敏感(input-sensitive): 最好情况和最坏情况相差悬殊的算法。</p>\n<h2 id=\"删除单元素\"><a href=\"#删除单元素\" class=\"headerlink\" title=\"删除单元素\"></a>删除单元素</h2><p><code>视为区间操作的特例</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除单个元素</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::remove(Rank r) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 单元素的删除操作, 视为区间操作的特例 [r, r+1)</span></span><br><span class=\"line\"><span class=\"comment\">  remove(r, r+1);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;     <span class=\"comment\">// 删除向量中秩为r的元素, 0 &lt;= r &lt; size</span></span><br><span class=\"line\">T&amp; Vector&lt;T&gt;::remove(Rank r) &#123;  <span class=\"comment\">// O(n-r)</span></span><br><span class=\"line\">  T&amp; <span class=\"keyword\">old_t</span> = _elem[r];    <span class=\"comment\">// 备份被删除的元素</span></span><br><span class=\"line\">  remove(r, r+<span class=\"number\">1</span>);         <span class=\"comment\">// 调用区间删除算法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">old_t</span>;           <span class=\"comment\">// 返回被删除元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>颠倒考虑</code></p>\n<p>复杂度分析:<br>每次循环的耗时正比于删除区间的后缀长度 O(n-hi)<br>循环的次数等于区间宽度 O(hi-lo)<br>总体 O(n^2) 复杂度</p>\n<p>right, but not fast!!</p>\n<h2 id=\"唯一化\"><a href=\"#唯一化\" class=\"headerlink\" title=\"唯一化\"></a>唯一化</h2><p><code>实现</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 唯一化</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void Vector&lt;T&gt;::deduplicate(Rank lo, Rank hi) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 对向量中的元素遍历,</span></span><br><span class=\"line\"><span class=\"comment\">  for (Rank i = lo; i &lt; hi; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // find右往左查, 返回lo-1代表失败</span></span><br><span class=\"line\"><span class=\"comment\">    // 删除当前元素, 不再对后续元素查找</span></span><br><span class=\"line\"><span class=\"comment\">    if (find(lo, i, _elem[i]) != lo-1) &#123;remove(i); break;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    if (find(i+1, hi, _elem[i]) != i) &#123; remove(i);&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Vector&lt;T&gt;::deduplicate() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> old_size = _size;</span><br><span class=\"line\">  Rank i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; _size) &#123;</span><br><span class=\"line\">    find(<span class=\"number\">0</span>, i, _elem[i]) &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                             i++  <span class=\"comment\">// 小于0说明无雷同, 继续查找</span></span><br><span class=\"line\">                             : remove(i);    <span class=\"comment\">// 删除雷同者(至多一个?!)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  old_size - _size;      <span class=\"comment\">// 返回规模的变化量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>记录规模?</code> 考虑返回值怎么设计，这里我估计会在更高级的接口中用到<br><code>从1开始?</code> 因为要在当前i的前缀中查找<br><code>至多一个?</code> 删除至多一个, 实际不一定至多一个<br><code>为什么不需要改变_size和_capacity大小?</code> 说明remove为更底层的操作, 在底层操作中, 定义底层的数据成员的修改, 这样做的话, 在更高级的操作中, 可以不去管这些细节。也是封装调用的好处。</p>\n<p><code>**正确性证明**</code>：<br><strong>不变性</strong>: 对于当前元素V[i]的前缀V[0, i)中, 各元素彼此互异<br>初始时, i = 1, 两个元素成立,…</p>\n<p><strong>单调性</strong>:<br>1)前缀单调非降, 后缀减少, 且前缀迟早增至_size;   // 与1)结合<br>2)后缀单调下降, _size迟早减至0;     // 2)更容易把握</p>\n<p>故算法必然终止, 至多迭代O(n)轮</p>\n<p><code>复杂度</code></p>\n<p>主要来自find() 和 remove();<br>find()从右向左针对前缀, remove()从左向右针对后缀, 因此每次while循环不超过O(n);<br>while循环会进行n次,<br>总体复杂度为 O(n^2)</p>\n<p><code>练习三种优化方案（未完成）</code></p>\n<p>1, 仿照uniquify()高效版本的思路.<br>元素移动的次数可以降至O(n), 但比较次数依然是O(n^2); 而且破坏稳定性<br>2, 先对需要删除的重复元素标记, 然后统一删除.<br>稳定性保持, 但因查找长度更长, 从而导致更多的对比操作<br>3, V.sort().uniquify(): 简明实现最优的O(nlogn)</p>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><p>visit</p>\n<p>函数指针机制 ?? </p>\n<p>函数对象机制 ??</p>\n<p>两种方法优劣</p>\n<p>实例: 将向量中所有的元素统一加一<br>重载操作符 “++”<br>重载操作符 “()”</p>\n<p>练习更为复杂的遍历</p>\n<p>减1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历运用函数对象机制，对各个元素减1</span></span><br><span class=\"line\"><span class=\"comment\">/* my test code</span></span><br><span class=\"line\"><span class=\"comment\">// 单个T类型元素减1的类</span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">Vector&lt;T&gt;::struct Decrease &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  virtual void operator() &#123;T &amp;e--;&#125;     // 重载()操作, 类对象当作函数来用</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">template &lt;typename T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">void decrease(Vector&lt;T&gt;&amp; V) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  V.traverse(Decrease&lt;T&gt;());</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 泛型模板在调用的时候都要带&lt;type&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Decrease</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(T &amp;e)</span> </span>&#123;e--;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么不是Vector&lt;T&gt;::struct Decrease?</span></span><br><span class=\"line\"><span class=\"comment\">// Decrease对象, 不需要声明在vector类内, 这是借用函数对象作为traverse的参数, traverse声明在类内, 这个参数的类型是VST, 即函数对象。</span></span><br><span class=\"line\"><span class=\"comment\">// 为什么需要virtual</span></span><br><span class=\"line\"><span class=\"comment\">// void operator()(T &amp;e)?</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个括号是代表重载运算符是(), 第二个是该重载函数的参数列表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Vector&lt;T&gt; &amp; V)</span> </span>&#123;</span><br><span class=\"line\">  V.traverse(Decrease&lt;T&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在类的外部定义decrease函数, 它具有泛型T, 参数为Vector&lt;T&gt;&amp; 类型</span></span><br><span class=\"line\"><span class=\"comment\">// 函数内部, 实例V调用traverse方法, 通过多次调用这个函数对象去遍历所有元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 终极问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?</span></span><br></pre></td></tr></table></figure>\n<p><code>本质问题: 为什么需要函数对象or 函数指针,  为什么不直接调用函数呢?</code></p>\n<p>加倍 </p>\n<p>求和</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjc7ukuqq0000fadrzzkd6qa0","tag_id":"cjc7ukur80004fadrn6w04clt","_id":"cjc7ukurl0009fadru2gp4w0r"},{"post_id":"cjc7ukur20002fadrj15cwqv8","tag_id":"cjc7ukurk0008fadrb1b5et1n","_id":"cjc7ukurv000efadrpld56s1f"},{"post_id":"cjc7ukure0005fadrtjh1y06z","tag_id":"cjc7ukurs000cfadrbmm6qppv","_id":"cjc7ukus0000ifadr4paezwkq"},{"post_id":"cjc7ukurg0006fadr05w98sso","tag_id":"cjc7ukury000gfadroqanzhxj","_id":"cjc7ukusc000pfadrvcz7gpwe"},{"post_id":"cjc7ukurg0006fadr05w98sso","tag_id":"cjc7ukus2000kfadru10d3lg2","_id":"cjc7ukuse000rfadr3r3tmy16"},{"post_id":"cjc7ukus9000nfadrvxndxvk1","tag_id":"cjc7ukur80004fadrn6w04clt","_id":"cjc7ukuse000tfadridl47f3e"},{"post_id":"cjc7ukuri0007fadr30rr7drh","tag_id":"cjc7ukusb000ofadrn8uaca9n","_id":"cjc7ukusg000zfadromvd5g1n"},{"post_id":"cjc7ukuri0007fadr30rr7drh","tag_id":"cjc7ukuse000sfadrmewfqcuw","_id":"cjc7ukush0010fadrev21kunx"},{"post_id":"cjc7ukuri0007fadr30rr7drh","tag_id":"cjc7ukuse000ufadruu9r614o","_id":"cjc7ukusi0012fadr3haoyjdw"},{"post_id":"cjc7ukuri0007fadr30rr7drh","tag_id":"cjc7ukusf000vfadrqf4s0ume","_id":"cjc7ukusi0013fadrxy4sfi5w"},{"post_id":"cjc7ukuri0007fadr30rr7drh","tag_id":"cjc7ukusf000wfadr2xje0wsg","_id":"cjc7ukusi0015fadr0d75i8u7"},{"post_id":"cjc7ukuri0007fadr30rr7drh","tag_id":"cjc7ukusf000xfadr5xfo23sh","_id":"cjc7ukusj0016fadrpd2hio9p"},{"post_id":"cjc7ukurl000afadr1byw6ywe","tag_id":"cjc7ukurs000cfadrbmm6qppv","_id":"cjc7ukusj0018fadr975rchrv"},{"post_id":"cjc7ukurt000dfadrj109y26v","tag_id":"cjc7ukuse000sfadrmewfqcuw","_id":"cjc7ukusj0019fadrb2z3k5wn"},{"post_id":"cjc7ukury000hfadrqdys0m0b","tag_id":"cjc7ukusi0014fadreo8s0kze","_id":"cjc7ukusk001bfadrheya7rsy"},{"post_id":"cjc7ukus0000jfadr5ytcl0vu","tag_id":"cjc7ukusi0014fadreo8s0kze","_id":"cjc7ukusk001dfadrewfm0314"},{"post_id":"cjc7ukus0000jfadr5ytcl0vu","tag_id":"cjc7ukusj001afadrrlcvs20p","_id":"cjc7ukusk001efadr7fsfcgcj"},{"post_id":"cjc7ukus3000lfadrv337kc4m","tag_id":"cjc7ukusk001cfadrqyl1r1cg","_id":"cjc7ukusl001hfadr0aukrs2n"},{"post_id":"cjc7ukus3000lfadrv337kc4m","tag_id":"cjc7ukusk001ffadrhhx2d3u6","_id":"cjc7ukusl001ifadrw3ub6unk"},{"post_id":"cjc7ukus7000mfadrkwtt9pze","tag_id":"cjc7ukuse000sfadrmewfqcuw","_id":"cjc7ukusm001kfadrm9u38fj5"},{"post_id":"cjc7ukusc000qfadro3bk5wch","tag_id":"cjc7ukuse000ufadruu9r614o","_id":"cjc7ukusn001nfadravtq3e8j"},{"post_id":"cjc7ukusc000qfadro3bk5wch","tag_id":"cjc7ukusm001lfadrnehrtvmn","_id":"cjc7ukuso001ofadrkp5zo57k"},{"post_id":"cjc7ukusc000qfadro3bk5wch","tag_id":"cjc7ukusm001mfadrabbft08k","_id":"cjc7ukuso001pfadrlskv4vg6"},{"post_id":"cjc7ukv0i001ufadrcmntc6aj","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0n001xfadra2e8qluh"},{"post_id":"cjc7ukv09001qfadr4m54d7hu","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0p001zfadriyg08zpu"},{"post_id":"cjc7ukv0d001rfadrx8yg1mdz","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0r0022fadrrlj724aq"},{"post_id":"cjc7ukv0g001tfadrlmf5j8fu","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0u0026fadry5065hlp"},{"post_id":"cjc7ukv0g001tfadrlmf5j8fu","tag_id":"cjc7ukv0t0024fadrn2znv5ab","_id":"cjc7ukv0u0027fadr7wna27ak"},{"post_id":"cjc7ukv0l001vfadrhp8n5ko2","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0u0029fadryab5nnt9"},{"post_id":"cjc7ukv0l001vfadrhp8n5ko2","tag_id":"cjc7ukv0t0025fadriyrzw3wc","_id":"cjc7ukv0u002afadrluw2bj24"},{"post_id":"cjc7ukv0n001yfadrldp0zpgq","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0u002cfadrszk5xadb"},{"post_id":"cjc7ukv0n001yfadrldp0zpgq","tag_id":"cjc7ukv0u0028fadr00fs2hxj","_id":"cjc7ukv0u002dfadrz2ag6jfl"},{"post_id":"cjc7ukv0p0020fadriniewmsp","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0v002ffadr4muob0bq"},{"post_id":"cjc7ukv0p0020fadriniewmsp","tag_id":"cjc7ukv0u0028fadr00fs2hxj","_id":"cjc7ukv0v002gfadrmubk8bus"},{"post_id":"cjc7ukv0s0023fadrlwddseyr","tag_id":"cjc7ukv0f001sfadre9rviwo6","_id":"cjc7ukv0v002hfadrraca69r3"},{"post_id":"cjc7ukv0s0023fadrlwddseyr","tag_id":"cjc7ukv0t0025fadriyrzw3wc","_id":"cjc7ukv0v002ifadrnnulxyiy"}],"Tag":[{"name":"markdown","_id":"cjc7ukur80004fadrn6w04clt"},{"name":"随笔","_id":"cjc7ukurk0008fadrb1b5et1n"},{"name":"git","_id":"cjc7ukurs000cfadrbmm6qppv"},{"name":"DirectX","_id":"cjc7ukury000gfadroqanzhxj"},{"name":"Games","_id":"cjc7ukus2000kfadru10d3lg2"},{"name":"图形学","_id":"cjc7ukusb000ofadrn8uaca9n"},{"name":"OpenGL","_id":"cjc7ukuse000sfadrmewfqcuw"},{"name":"读书","_id":"cjc7ukuse000ufadruu9r614o"},{"name":"随想","_id":"cjc7ukusf000vfadrqf4s0ume"},{"name":"方法论","_id":"cjc7ukusf000wfadr2xje0wsg"},{"name":"引擎","_id":"cjc7ukusf000xfadr5xfo23sh"},{"name":"hexo","_id":"cjc7ukusi0014fadreo8s0kze"},{"name":"UTF-8","_id":"cjc7ukusj001afadrrlcvs20p"},{"name":"program","_id":"cjc7ukusk001cfadrqyl1r1cg"},{"name":"learn","_id":"cjc7ukusk001ffadrhhx2d3u6"},{"name":"游戏","_id":"cjc7ukusm001lfadrnehrtvmn"},{"name":"C++","_id":"cjc7ukusm001mfadrabbft08k"},{"name":"数据结构","_id":"cjc7ukv0f001sfadre9rviwo6"},{"name":"动态规划","_id":"cjc7ukv0t0024fadrn2znv5ab"},{"name":"向量","_id":"cjc7ukv0t0025fadriyrzw3wc"},{"name":"复杂度","_id":"cjc7ukv0u0028fadr00fs2hxj"}]}}